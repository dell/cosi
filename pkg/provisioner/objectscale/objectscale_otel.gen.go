// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/6c8f05695fec23df85903a8da0af66ac414e2a63/templates/opentelemetry
// gowrap: http://github.com/hexdigest/gowrap

package objectscale

//go:generate gowrap gen -p github.com/dell/cosi-driver/pkg/provisioner/virtualdriver -i Driver -t https://raw.githubusercontent.com/hexdigest/gowrap/6c8f05695fec23df85903a8da0af66ac414e2a63/templates/opentelemetry -o objectscale_otel.gen.go -l ""

import (
	"context"

	"github.com/dell/cosi-driver/pkg/provisioner/virtualdriver"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
	cosi "sigs.k8s.io/container-object-storage-interface-spec"
)

// DriverWithTracing implements virtualdriver.Driver interface instrumented with opentracing spans
type DriverWithTracing struct {
	virtualdriver.Driver
	_instance      string
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
}

// NewDriverWithTracing returns DriverWithTracing
func NewDriverWithTracing(base virtualdriver.Driver, instance string, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) DriverWithTracing {
	d := DriverWithTracing{
		Driver:    base,
		_instance: instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// DriverCreateBucket implements virtualdriver.Driver
func (_d DriverWithTracing) DriverCreateBucket(ctx context.Context, dp1 *cosi.DriverCreateBucketRequest) (dp2 *cosi.DriverCreateBucketResponse, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "virtualdriver.Driver.DriverCreateBucket")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"dp1": dp1}, map[string]interface{}{
				"dp2": dp2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Driver.DriverCreateBucket(ctx, dp1)
}

// DriverDeleteBucket implements virtualdriver.Driver
func (_d DriverWithTracing) DriverDeleteBucket(ctx context.Context, dp1 *cosi.DriverDeleteBucketRequest) (dp2 *cosi.DriverDeleteBucketResponse, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "virtualdriver.Driver.DriverDeleteBucket")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"dp1": dp1}, map[string]interface{}{
				"dp2": dp2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Driver.DriverDeleteBucket(ctx, dp1)
}

// DriverGrantBucketAccess implements virtualdriver.Driver
func (_d DriverWithTracing) DriverGrantBucketAccess(ctx context.Context, dp1 *cosi.DriverGrantBucketAccessRequest) (dp2 *cosi.DriverGrantBucketAccessResponse, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "virtualdriver.Driver.DriverGrantBucketAccess")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"dp1": dp1}, map[string]interface{}{
				"dp2": dp2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Driver.DriverGrantBucketAccess(ctx, dp1)
}

// DriverRevokeBucketAccess implements virtualdriver.Driver
func (_d DriverWithTracing) DriverRevokeBucketAccess(ctx context.Context, dp1 *cosi.DriverRevokeBucketAccessRequest) (dp2 *cosi.DriverRevokeBucketAccessResponse, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "virtualdriver.Driver.DriverRevokeBucketAccess")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"dp1": dp1}, map[string]interface{}{
				"dp2": dp2,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Driver.DriverRevokeBucketAccess(ctx, dp1)
}

// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package config

import "fmt"
import "encoding/json"
import "reflect"

// this file contains JSON schema for Dell COSI Driver Configuration file
type ConfigSchemaJson struct {
	// List of connections based on which the sub-drivers are constructed
	Connections []Configuration `json:"connections,omitempty" yaml:"connections,omitempty"`

	// Path to the COSI socket
	CosiEndpoint string `json:"cosi-endpoint,omitempty" yaml:"cosi-endpoint,omitempty"`

	// Defines how verbose should logs be
	LogLevel ConfigSchemaJsonLogLevel `json:"log-level,omitempty" yaml:"log-level,omitempty"`
}

type ConfigSchemaJsonLogLevel string

const ConfigSchemaJsonLogLevelDebug ConfigSchemaJsonLogLevel = "debug"
const ConfigSchemaJsonLogLevelError ConfigSchemaJsonLogLevel = "error"
const ConfigSchemaJsonLogLevelFatal ConfigSchemaJsonLogLevel = "fatal"
const ConfigSchemaJsonLogLevelInfo ConfigSchemaJsonLogLevel = "info"
const ConfigSchemaJsonLogLevelTrace ConfigSchemaJsonLogLevel = "trace"
const ConfigSchemaJsonLogLevelWarning ConfigSchemaJsonLogLevel = "warning"

// Configuration for single sub-driver
type Configuration struct {
	// Ecs corresponds to the JSON schema field "ecs".
	Ecs *Ecs `json:"ecs,omitempty" yaml:"ecs,omitempty"`

	// Objectscale corresponds to the JSON schema field "objectscale".
	Objectscale *Objectscale `json:"objectscale,omitempty" yaml:"objectscale,omitempty"`

	// Powerscale corresponds to the JSON schema field "powerscale".
	Powerscale *Powerscale `json:"powerscale,omitempty" yaml:"powerscale,omitempty"`
}

// Credentials used for authentication to OSP
type Credentials struct {
	// Base64 encoded password
	Password string `json:"password" yaml:"password"`

	// Base64 encoded username
	Username string `json:"username" yaml:"username"`
}

// Configuration specific to the Dell ECS platform
type Ecs struct {
	// Credentials corresponds to the JSON schema field "credentials".
	Credentials Credentials `json:"credentials" yaml:"credentials"`

	// Endpoint of the Dell ECS
	Endpoint string `json:"endpoint" yaml:"endpoint"`

	// Default, unique identifier for the sub-driver/platform
	Id string `json:"id" yaml:"id"`

	// Protocols corresponds to the JSON schema field "protocols".
	Protocols Protocols `json:"protocols" yaml:"protocols"`

	// Tls corresponds to the JSON schema field "tls".
	Tls Tls `json:"tls" yaml:"tls"`
}

// Configuration specific to the Dell ObjectScale platform
type Objectscale struct {
	// Credentials corresponds to the JSON schema field "credentials".
	Credentials Credentials `json:"credentials" yaml:"credentials"`

	// Default, unique identifier for the sub-driver/platform
	Id string `json:"id" yaml:"id"`

	// Endpoint of the ObjectScale Gateway Internal service
	ObjectscaleGateway string `json:"objectscale-gateway" yaml:"objectscale-gateway"`

	// Endpoint of the ObjectScale ObjectStore Management Gateway service
	ObjectstoreGateway string `json:"objectstore-gateway" yaml:"objectstore-gateway"`

	// Protocols corresponds to the JSON schema field "protocols".
	Protocols Protocols `json:"protocols" yaml:"protocols"`

	// IAM API specific field, points to the region in which ObjectScale system is
	// installed
	Region *string `json:"region,omitempty" yaml:"region,omitempty"`

	// Tls corresponds to the JSON schema field "tls".
	Tls Tls `json:"tls" yaml:"tls"`
}

// TODO: this is not implemented, and the configuration details are yet to be
// defined
type Powerscale struct {
	// Credentials corresponds to the JSON schema field "credentials".
	Credentials Credentials `json:"credentials" yaml:"credentials"`

	// Endpoint of the Dell PowerScale
	Endpoint string `json:"endpoint" yaml:"endpoint"`

	// Default, unique identifier for the sub-driver/platform
	Id string `json:"id" yaml:"id"`

	// Protocols corresponds to the JSON schema field "protocols".
	Protocols Protocols `json:"protocols" yaml:"protocols"`

	// Tls corresponds to the JSON schema field "tls".
	Tls Tls `json:"tls" yaml:"tls"`
}

type Protocols struct {
	// S3 corresponds to the JSON schema field "s3".
	S3 *S3 `json:"s3,omitempty" yaml:"s3,omitempty"`
}

// S3 configuration
type S3 struct {
	// Endpoint of the ObjectStore S3 service
	Endpoint string `json:"endpoint" yaml:"endpoint"`
}

// TLS configuration details
type Tls struct {
	// ClientAuth corresponds to the JSON schema field "client-auth".
	ClientAuth *TlsClientAuth `json:"client-auth,omitempty" yaml:"client-auth,omitempty"`

	// Base64 encoded certificate file
	ClientCas *string `json:"client-cas,omitempty" yaml:"client-cas,omitempty"`

	// Insecure corresponds to the JSON schema field "insecure".
	Insecure bool `json:"insecure" yaml:"insecure"`

	// MinVersion corresponds to the JSON schema field "min-version".
	MinVersion *TlsMinVersion `json:"min-version,omitempty" yaml:"min-version,omitempty"`

	// ServerName corresponds to the JSON schema field "server-name".
	ServerName *string `json:"server-name,omitempty" yaml:"server-name,omitempty"`
}

type TlsClientAuth string

const TlsClientAuthTlsNoClientCert TlsClientAuth = "tls.NoClientCert"
const TlsClientAuthTlsRequestClientCert TlsClientAuth = "tls.RequestClientCert"
const TlsClientAuthTlsRequireAndVerifyClientCert TlsClientAuth = "tls.RequireAndVerifyClientCert"
const TlsClientAuthTlsRequireAnyClientCert TlsClientAuth = "tls.RequireAnyClientCert"

// UnmarshalJSON implements json.Unmarshaler.
func (j *TlsMinVersion) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TlsMinVersion {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TlsMinVersion, v)
	}
	*j = TlsMinVersion(v)
	return nil
}

const TlsMinVersionVersionTLS13 TlsMinVersion = "VersionTLS13"

// UnmarshalJSON implements json.Unmarshaler.
func (j *Ecs) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["credentials"]; !ok || v == nil {
		return fmt.Errorf("field credentials in Ecs: required")
	}
	if v, ok := raw["endpoint"]; !ok || v == nil {
		return fmt.Errorf("field endpoint in Ecs: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id in Ecs: required")
	}
	if v, ok := raw["protocols"]; !ok || v == nil {
		return fmt.Errorf("field protocols in Ecs: required")
	}
	if v, ok := raw["tls"]; !ok || v == nil {
		return fmt.Errorf("field tls in Ecs: required")
	}
	type Plain Ecs
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Ecs(plain)
	return nil
}

const TlsMinVersionVersionTLS12 TlsMinVersion = "VersionTLS12"

// UnmarshalJSON implements json.Unmarshaler.
func (j *Objectscale) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["credentials"]; !ok || v == nil {
		return fmt.Errorf("field credentials in Objectscale: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id in Objectscale: required")
	}
	if v, ok := raw["objectscale-gateway"]; !ok || v == nil {
		return fmt.Errorf("field objectscale-gateway in Objectscale: required")
	}
	if v, ok := raw["objectstore-gateway"]; !ok || v == nil {
		return fmt.Errorf("field objectstore-gateway in Objectscale: required")
	}
	if v, ok := raw["protocols"]; !ok || v == nil {
		return fmt.Errorf("field protocols in Objectscale: required")
	}
	if v, ok := raw["tls"]; !ok || v == nil {
		return fmt.Errorf("field tls in Objectscale: required")
	}
	type Plain Objectscale
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Objectscale(plain)
	return nil
}

const TlsMinVersionVersionTLS11 TlsMinVersion = "VersionTLS11"

// UnmarshalJSON implements json.Unmarshaler.
func (j *Powerscale) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["credentials"]; !ok || v == nil {
		return fmt.Errorf("field credentials in Powerscale: required")
	}
	if v, ok := raw["endpoint"]; !ok || v == nil {
		return fmt.Errorf("field endpoint in Powerscale: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id in Powerscale: required")
	}
	if v, ok := raw["protocols"]; !ok || v == nil {
		return fmt.Errorf("field protocols in Powerscale: required")
	}
	if v, ok := raw["tls"]; !ok || v == nil {
		return fmt.Errorf("field tls in Powerscale: required")
	}
	type Plain Powerscale
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Powerscale(plain)
	return nil
}

const TlsMinVersionVersionTLS10 TlsMinVersion = "VersionTLS10"

// UnmarshalJSON implements json.Unmarshaler.
func (j *Tls) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["insecure"]; !ok || v == nil {
		return fmt.Errorf("field insecure in Tls: required")
	}
	type Plain Tls
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Tls(plain)
	return nil
}

var enumValues_ConfigSchemaJsonLogLevel = []interface{}{
	"fatal",
	"error",
	"warning",
	"info",
	"debug",
	"trace",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConfigSchemaJsonLogLevel) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ConfigSchemaJsonLogLevel {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ConfigSchemaJsonLogLevel, v)
	}
	*j = ConfigSchemaJsonLogLevel(v)
	return nil
}

var enumValues_TlsMinVersion = []interface{}{
	"VersionTLS10",
	"VersionTLS11",
	"VersionTLS12",
	"VersionTLS13",
}

type TlsMinVersion string

const TlsClientAuthTlsVerifyClientCertIfGiven TlsClientAuth = "tls.VerifyClientCertIfGiven"

// UnmarshalJSON implements json.Unmarshaler.
func (j *TlsClientAuth) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_TlsClientAuth {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_TlsClientAuth, v)
	}
	*j = TlsClientAuth(v)
	return nil
}

var enumValues_TlsClientAuth = []interface{}{
	"tls.NoClientCert",
	"tls.RequestClientCert",
	"tls.RequireAnyClientCert",
	"tls.VerifyClientCertIfGiven",
	"tls.RequireAndVerifyClientCert",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *S3) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["endpoint"]; !ok || v == nil {
		return fmt.Errorf("field endpoint in S3: required")
	}
	type Plain S3
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = S3(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Credentials) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["password"]; !ok || v == nil {
		return fmt.Errorf("field password in Credentials: required")
	}
	if v, ok := raw["username"]; !ok || v == nil {
		return fmt.Errorf("field username in Credentials: required")
	}
	type Plain Credentials
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Credentials(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConfigSchemaJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	type Plain ConfigSchemaJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["cosi-endpoint"]; !ok || v == nil {
		plain.CosiEndpoint = "unix:///var/lib/cosi/cosi.sock"
	}
	if v, ok := raw["log-level"]; !ok || v == nil {
		plain.LogLevel = "info"
	}
	*j = ConfigSchemaJson(plain)
	return nil
}

// Code generated by mockery v2.33.0. DO NOT EDIT.

package mock

import (
	context "context"

	iam "github.com/aws/aws-sdk-go/service/iam"

	mock "github.com/stretchr/testify/mock"

	request "github.com/aws/aws-sdk-go/aws/request"
)

// MockIAMAPI is an autogenerated mock type for the IAMAPI type
type MockIAMAPI struct {
	mock.Mock
}

type MockIAMAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAMAPI) EXPECT() *MockIAMAPI_Expecter {
	return &MockIAMAPI_Expecter{mock: &_m.Mock}
}

// AddClientIDToOpenIDConnectProvider provides a mock function with given fields: _a0
func (_m *MockIAMAPI) AddClientIDToOpenIDConnectProvider(_a0 *iam.AddClientIDToOpenIDConnectProviderInput) (*iam.AddClientIDToOpenIDConnectProviderOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.AddClientIDToOpenIDConnectProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.AddClientIDToOpenIDConnectProviderInput) (*iam.AddClientIDToOpenIDConnectProviderOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.AddClientIDToOpenIDConnectProviderInput) *iam.AddClientIDToOpenIDConnectProviderOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.AddClientIDToOpenIDConnectProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.AddClientIDToOpenIDConnectProviderInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_AddClientIDToOpenIDConnectProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddClientIDToOpenIDConnectProvider'
type MockIAMAPI_AddClientIDToOpenIDConnectProvider_Call struct {
	*mock.Call
}

// AddClientIDToOpenIDConnectProvider is a helper method to define mock.On call
//   - _a0 *iam.AddClientIDToOpenIDConnectProviderInput
func (_e *MockIAMAPI_Expecter) AddClientIDToOpenIDConnectProvider(_a0 interface{}) *MockIAMAPI_AddClientIDToOpenIDConnectProvider_Call {
	return &MockIAMAPI_AddClientIDToOpenIDConnectProvider_Call{Call: _e.mock.On("AddClientIDToOpenIDConnectProvider", _a0)}
}

func (_c *MockIAMAPI_AddClientIDToOpenIDConnectProvider_Call) Run(run func(_a0 *iam.AddClientIDToOpenIDConnectProviderInput)) *MockIAMAPI_AddClientIDToOpenIDConnectProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.AddClientIDToOpenIDConnectProviderInput))
	})
	return _c
}

func (_c *MockIAMAPI_AddClientIDToOpenIDConnectProvider_Call) Return(_a0 *iam.AddClientIDToOpenIDConnectProviderOutput, _a1 error) *MockIAMAPI_AddClientIDToOpenIDConnectProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_AddClientIDToOpenIDConnectProvider_Call) RunAndReturn(run func(*iam.AddClientIDToOpenIDConnectProviderInput) (*iam.AddClientIDToOpenIDConnectProviderOutput, error)) *MockIAMAPI_AddClientIDToOpenIDConnectProvider_Call {
	_c.Call.Return(run)
	return _c
}

// AddClientIDToOpenIDConnectProviderRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) AddClientIDToOpenIDConnectProviderRequest(_a0 *iam.AddClientIDToOpenIDConnectProviderInput) (*request.Request, *iam.AddClientIDToOpenIDConnectProviderOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.AddClientIDToOpenIDConnectProviderOutput
	if rf, ok := ret.Get(0).(func(*iam.AddClientIDToOpenIDConnectProviderInput) (*request.Request, *iam.AddClientIDToOpenIDConnectProviderOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.AddClientIDToOpenIDConnectProviderInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.AddClientIDToOpenIDConnectProviderInput) *iam.AddClientIDToOpenIDConnectProviderOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.AddClientIDToOpenIDConnectProviderOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_AddClientIDToOpenIDConnectProviderRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddClientIDToOpenIDConnectProviderRequest'
type MockIAMAPI_AddClientIDToOpenIDConnectProviderRequest_Call struct {
	*mock.Call
}

// AddClientIDToOpenIDConnectProviderRequest is a helper method to define mock.On call
//   - _a0 *iam.AddClientIDToOpenIDConnectProviderInput
func (_e *MockIAMAPI_Expecter) AddClientIDToOpenIDConnectProviderRequest(_a0 interface{}) *MockIAMAPI_AddClientIDToOpenIDConnectProviderRequest_Call {
	return &MockIAMAPI_AddClientIDToOpenIDConnectProviderRequest_Call{Call: _e.mock.On("AddClientIDToOpenIDConnectProviderRequest", _a0)}
}

func (_c *MockIAMAPI_AddClientIDToOpenIDConnectProviderRequest_Call) Run(run func(_a0 *iam.AddClientIDToOpenIDConnectProviderInput)) *MockIAMAPI_AddClientIDToOpenIDConnectProviderRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.AddClientIDToOpenIDConnectProviderInput))
	})
	return _c
}

func (_c *MockIAMAPI_AddClientIDToOpenIDConnectProviderRequest_Call) Return(_a0 *request.Request, _a1 *iam.AddClientIDToOpenIDConnectProviderOutput) *MockIAMAPI_AddClientIDToOpenIDConnectProviderRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_AddClientIDToOpenIDConnectProviderRequest_Call) RunAndReturn(run func(*iam.AddClientIDToOpenIDConnectProviderInput) (*request.Request, *iam.AddClientIDToOpenIDConnectProviderOutput)) *MockIAMAPI_AddClientIDToOpenIDConnectProviderRequest_Call {
	_c.Call.Return(run)
	return _c
}

// AddClientIDToOpenIDConnectProviderWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) AddClientIDToOpenIDConnectProviderWithContext(_a0 context.Context, _a1 *iam.AddClientIDToOpenIDConnectProviderInput, _a2 ...request.Option) (*iam.AddClientIDToOpenIDConnectProviderOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.AddClientIDToOpenIDConnectProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.AddClientIDToOpenIDConnectProviderInput, ...request.Option) (*iam.AddClientIDToOpenIDConnectProviderOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.AddClientIDToOpenIDConnectProviderInput, ...request.Option) *iam.AddClientIDToOpenIDConnectProviderOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.AddClientIDToOpenIDConnectProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.AddClientIDToOpenIDConnectProviderInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_AddClientIDToOpenIDConnectProviderWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddClientIDToOpenIDConnectProviderWithContext'
type MockIAMAPI_AddClientIDToOpenIDConnectProviderWithContext_Call struct {
	*mock.Call
}

// AddClientIDToOpenIDConnectProviderWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.AddClientIDToOpenIDConnectProviderInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) AddClientIDToOpenIDConnectProviderWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_AddClientIDToOpenIDConnectProviderWithContext_Call {
	return &MockIAMAPI_AddClientIDToOpenIDConnectProviderWithContext_Call{Call: _e.mock.On("AddClientIDToOpenIDConnectProviderWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_AddClientIDToOpenIDConnectProviderWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.AddClientIDToOpenIDConnectProviderInput, _a2 ...request.Option)) *MockIAMAPI_AddClientIDToOpenIDConnectProviderWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.AddClientIDToOpenIDConnectProviderInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_AddClientIDToOpenIDConnectProviderWithContext_Call) Return(_a0 *iam.AddClientIDToOpenIDConnectProviderOutput, _a1 error) *MockIAMAPI_AddClientIDToOpenIDConnectProviderWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_AddClientIDToOpenIDConnectProviderWithContext_Call) RunAndReturn(run func(context.Context, *iam.AddClientIDToOpenIDConnectProviderInput, ...request.Option) (*iam.AddClientIDToOpenIDConnectProviderOutput, error)) *MockIAMAPI_AddClientIDToOpenIDConnectProviderWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// AddRoleToInstanceProfile provides a mock function with given fields: _a0
func (_m *MockIAMAPI) AddRoleToInstanceProfile(_a0 *iam.AddRoleToInstanceProfileInput) (*iam.AddRoleToInstanceProfileOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.AddRoleToInstanceProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.AddRoleToInstanceProfileInput) (*iam.AddRoleToInstanceProfileOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.AddRoleToInstanceProfileInput) *iam.AddRoleToInstanceProfileOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.AddRoleToInstanceProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.AddRoleToInstanceProfileInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_AddRoleToInstanceProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRoleToInstanceProfile'
type MockIAMAPI_AddRoleToInstanceProfile_Call struct {
	*mock.Call
}

// AddRoleToInstanceProfile is a helper method to define mock.On call
//   - _a0 *iam.AddRoleToInstanceProfileInput
func (_e *MockIAMAPI_Expecter) AddRoleToInstanceProfile(_a0 interface{}) *MockIAMAPI_AddRoleToInstanceProfile_Call {
	return &MockIAMAPI_AddRoleToInstanceProfile_Call{Call: _e.mock.On("AddRoleToInstanceProfile", _a0)}
}

func (_c *MockIAMAPI_AddRoleToInstanceProfile_Call) Run(run func(_a0 *iam.AddRoleToInstanceProfileInput)) *MockIAMAPI_AddRoleToInstanceProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.AddRoleToInstanceProfileInput))
	})
	return _c
}

func (_c *MockIAMAPI_AddRoleToInstanceProfile_Call) Return(_a0 *iam.AddRoleToInstanceProfileOutput, _a1 error) *MockIAMAPI_AddRoleToInstanceProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_AddRoleToInstanceProfile_Call) RunAndReturn(run func(*iam.AddRoleToInstanceProfileInput) (*iam.AddRoleToInstanceProfileOutput, error)) *MockIAMAPI_AddRoleToInstanceProfile_Call {
	_c.Call.Return(run)
	return _c
}

// AddRoleToInstanceProfileRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) AddRoleToInstanceProfileRequest(_a0 *iam.AddRoleToInstanceProfileInput) (*request.Request, *iam.AddRoleToInstanceProfileOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.AddRoleToInstanceProfileOutput
	if rf, ok := ret.Get(0).(func(*iam.AddRoleToInstanceProfileInput) (*request.Request, *iam.AddRoleToInstanceProfileOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.AddRoleToInstanceProfileInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.AddRoleToInstanceProfileInput) *iam.AddRoleToInstanceProfileOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.AddRoleToInstanceProfileOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_AddRoleToInstanceProfileRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRoleToInstanceProfileRequest'
type MockIAMAPI_AddRoleToInstanceProfileRequest_Call struct {
	*mock.Call
}

// AddRoleToInstanceProfileRequest is a helper method to define mock.On call
//   - _a0 *iam.AddRoleToInstanceProfileInput
func (_e *MockIAMAPI_Expecter) AddRoleToInstanceProfileRequest(_a0 interface{}) *MockIAMAPI_AddRoleToInstanceProfileRequest_Call {
	return &MockIAMAPI_AddRoleToInstanceProfileRequest_Call{Call: _e.mock.On("AddRoleToInstanceProfileRequest", _a0)}
}

func (_c *MockIAMAPI_AddRoleToInstanceProfileRequest_Call) Run(run func(_a0 *iam.AddRoleToInstanceProfileInput)) *MockIAMAPI_AddRoleToInstanceProfileRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.AddRoleToInstanceProfileInput))
	})
	return _c
}

func (_c *MockIAMAPI_AddRoleToInstanceProfileRequest_Call) Return(_a0 *request.Request, _a1 *iam.AddRoleToInstanceProfileOutput) *MockIAMAPI_AddRoleToInstanceProfileRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_AddRoleToInstanceProfileRequest_Call) RunAndReturn(run func(*iam.AddRoleToInstanceProfileInput) (*request.Request, *iam.AddRoleToInstanceProfileOutput)) *MockIAMAPI_AddRoleToInstanceProfileRequest_Call {
	_c.Call.Return(run)
	return _c
}

// AddRoleToInstanceProfileWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) AddRoleToInstanceProfileWithContext(_a0 context.Context, _a1 *iam.AddRoleToInstanceProfileInput, _a2 ...request.Option) (*iam.AddRoleToInstanceProfileOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.AddRoleToInstanceProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.AddRoleToInstanceProfileInput, ...request.Option) (*iam.AddRoleToInstanceProfileOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.AddRoleToInstanceProfileInput, ...request.Option) *iam.AddRoleToInstanceProfileOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.AddRoleToInstanceProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.AddRoleToInstanceProfileInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_AddRoleToInstanceProfileWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRoleToInstanceProfileWithContext'
type MockIAMAPI_AddRoleToInstanceProfileWithContext_Call struct {
	*mock.Call
}

// AddRoleToInstanceProfileWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.AddRoleToInstanceProfileInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) AddRoleToInstanceProfileWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_AddRoleToInstanceProfileWithContext_Call {
	return &MockIAMAPI_AddRoleToInstanceProfileWithContext_Call{Call: _e.mock.On("AddRoleToInstanceProfileWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_AddRoleToInstanceProfileWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.AddRoleToInstanceProfileInput, _a2 ...request.Option)) *MockIAMAPI_AddRoleToInstanceProfileWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.AddRoleToInstanceProfileInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_AddRoleToInstanceProfileWithContext_Call) Return(_a0 *iam.AddRoleToInstanceProfileOutput, _a1 error) *MockIAMAPI_AddRoleToInstanceProfileWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_AddRoleToInstanceProfileWithContext_Call) RunAndReturn(run func(context.Context, *iam.AddRoleToInstanceProfileInput, ...request.Option) (*iam.AddRoleToInstanceProfileOutput, error)) *MockIAMAPI_AddRoleToInstanceProfileWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// AddUserToGroup provides a mock function with given fields: _a0
func (_m *MockIAMAPI) AddUserToGroup(_a0 *iam.AddUserToGroupInput) (*iam.AddUserToGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.AddUserToGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.AddUserToGroupInput) (*iam.AddUserToGroupOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.AddUserToGroupInput) *iam.AddUserToGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.AddUserToGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.AddUserToGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_AddUserToGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserToGroup'
type MockIAMAPI_AddUserToGroup_Call struct {
	*mock.Call
}

// AddUserToGroup is a helper method to define mock.On call
//   - _a0 *iam.AddUserToGroupInput
func (_e *MockIAMAPI_Expecter) AddUserToGroup(_a0 interface{}) *MockIAMAPI_AddUserToGroup_Call {
	return &MockIAMAPI_AddUserToGroup_Call{Call: _e.mock.On("AddUserToGroup", _a0)}
}

func (_c *MockIAMAPI_AddUserToGroup_Call) Run(run func(_a0 *iam.AddUserToGroupInput)) *MockIAMAPI_AddUserToGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.AddUserToGroupInput))
	})
	return _c
}

func (_c *MockIAMAPI_AddUserToGroup_Call) Return(_a0 *iam.AddUserToGroupOutput, _a1 error) *MockIAMAPI_AddUserToGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_AddUserToGroup_Call) RunAndReturn(run func(*iam.AddUserToGroupInput) (*iam.AddUserToGroupOutput, error)) *MockIAMAPI_AddUserToGroup_Call {
	_c.Call.Return(run)
	return _c
}

// AddUserToGroupRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) AddUserToGroupRequest(_a0 *iam.AddUserToGroupInput) (*request.Request, *iam.AddUserToGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.AddUserToGroupOutput
	if rf, ok := ret.Get(0).(func(*iam.AddUserToGroupInput) (*request.Request, *iam.AddUserToGroupOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.AddUserToGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.AddUserToGroupInput) *iam.AddUserToGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.AddUserToGroupOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_AddUserToGroupRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserToGroupRequest'
type MockIAMAPI_AddUserToGroupRequest_Call struct {
	*mock.Call
}

// AddUserToGroupRequest is a helper method to define mock.On call
//   - _a0 *iam.AddUserToGroupInput
func (_e *MockIAMAPI_Expecter) AddUserToGroupRequest(_a0 interface{}) *MockIAMAPI_AddUserToGroupRequest_Call {
	return &MockIAMAPI_AddUserToGroupRequest_Call{Call: _e.mock.On("AddUserToGroupRequest", _a0)}
}

func (_c *MockIAMAPI_AddUserToGroupRequest_Call) Run(run func(_a0 *iam.AddUserToGroupInput)) *MockIAMAPI_AddUserToGroupRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.AddUserToGroupInput))
	})
	return _c
}

func (_c *MockIAMAPI_AddUserToGroupRequest_Call) Return(_a0 *request.Request, _a1 *iam.AddUserToGroupOutput) *MockIAMAPI_AddUserToGroupRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_AddUserToGroupRequest_Call) RunAndReturn(run func(*iam.AddUserToGroupInput) (*request.Request, *iam.AddUserToGroupOutput)) *MockIAMAPI_AddUserToGroupRequest_Call {
	_c.Call.Return(run)
	return _c
}

// AddUserToGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) AddUserToGroupWithContext(_a0 context.Context, _a1 *iam.AddUserToGroupInput, _a2 ...request.Option) (*iam.AddUserToGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.AddUserToGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.AddUserToGroupInput, ...request.Option) (*iam.AddUserToGroupOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.AddUserToGroupInput, ...request.Option) *iam.AddUserToGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.AddUserToGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.AddUserToGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_AddUserToGroupWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserToGroupWithContext'
type MockIAMAPI_AddUserToGroupWithContext_Call struct {
	*mock.Call
}

// AddUserToGroupWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.AddUserToGroupInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) AddUserToGroupWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_AddUserToGroupWithContext_Call {
	return &MockIAMAPI_AddUserToGroupWithContext_Call{Call: _e.mock.On("AddUserToGroupWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_AddUserToGroupWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.AddUserToGroupInput, _a2 ...request.Option)) *MockIAMAPI_AddUserToGroupWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.AddUserToGroupInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_AddUserToGroupWithContext_Call) Return(_a0 *iam.AddUserToGroupOutput, _a1 error) *MockIAMAPI_AddUserToGroupWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_AddUserToGroupWithContext_Call) RunAndReturn(run func(context.Context, *iam.AddUserToGroupInput, ...request.Option) (*iam.AddUserToGroupOutput, error)) *MockIAMAPI_AddUserToGroupWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// AttachGroupPolicy provides a mock function with given fields: _a0
func (_m *MockIAMAPI) AttachGroupPolicy(_a0 *iam.AttachGroupPolicyInput) (*iam.AttachGroupPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.AttachGroupPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.AttachGroupPolicyInput) (*iam.AttachGroupPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.AttachGroupPolicyInput) *iam.AttachGroupPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.AttachGroupPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.AttachGroupPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_AttachGroupPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachGroupPolicy'
type MockIAMAPI_AttachGroupPolicy_Call struct {
	*mock.Call
}

// AttachGroupPolicy is a helper method to define mock.On call
//   - _a0 *iam.AttachGroupPolicyInput
func (_e *MockIAMAPI_Expecter) AttachGroupPolicy(_a0 interface{}) *MockIAMAPI_AttachGroupPolicy_Call {
	return &MockIAMAPI_AttachGroupPolicy_Call{Call: _e.mock.On("AttachGroupPolicy", _a0)}
}

func (_c *MockIAMAPI_AttachGroupPolicy_Call) Run(run func(_a0 *iam.AttachGroupPolicyInput)) *MockIAMAPI_AttachGroupPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.AttachGroupPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_AttachGroupPolicy_Call) Return(_a0 *iam.AttachGroupPolicyOutput, _a1 error) *MockIAMAPI_AttachGroupPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_AttachGroupPolicy_Call) RunAndReturn(run func(*iam.AttachGroupPolicyInput) (*iam.AttachGroupPolicyOutput, error)) *MockIAMAPI_AttachGroupPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// AttachGroupPolicyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) AttachGroupPolicyRequest(_a0 *iam.AttachGroupPolicyInput) (*request.Request, *iam.AttachGroupPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.AttachGroupPolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.AttachGroupPolicyInput) (*request.Request, *iam.AttachGroupPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.AttachGroupPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.AttachGroupPolicyInput) *iam.AttachGroupPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.AttachGroupPolicyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_AttachGroupPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachGroupPolicyRequest'
type MockIAMAPI_AttachGroupPolicyRequest_Call struct {
	*mock.Call
}

// AttachGroupPolicyRequest is a helper method to define mock.On call
//   - _a0 *iam.AttachGroupPolicyInput
func (_e *MockIAMAPI_Expecter) AttachGroupPolicyRequest(_a0 interface{}) *MockIAMAPI_AttachGroupPolicyRequest_Call {
	return &MockIAMAPI_AttachGroupPolicyRequest_Call{Call: _e.mock.On("AttachGroupPolicyRequest", _a0)}
}

func (_c *MockIAMAPI_AttachGroupPolicyRequest_Call) Run(run func(_a0 *iam.AttachGroupPolicyInput)) *MockIAMAPI_AttachGroupPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.AttachGroupPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_AttachGroupPolicyRequest_Call) Return(_a0 *request.Request, _a1 *iam.AttachGroupPolicyOutput) *MockIAMAPI_AttachGroupPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_AttachGroupPolicyRequest_Call) RunAndReturn(run func(*iam.AttachGroupPolicyInput) (*request.Request, *iam.AttachGroupPolicyOutput)) *MockIAMAPI_AttachGroupPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// AttachGroupPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) AttachGroupPolicyWithContext(_a0 context.Context, _a1 *iam.AttachGroupPolicyInput, _a2 ...request.Option) (*iam.AttachGroupPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.AttachGroupPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.AttachGroupPolicyInput, ...request.Option) (*iam.AttachGroupPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.AttachGroupPolicyInput, ...request.Option) *iam.AttachGroupPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.AttachGroupPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.AttachGroupPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_AttachGroupPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachGroupPolicyWithContext'
type MockIAMAPI_AttachGroupPolicyWithContext_Call struct {
	*mock.Call
}

// AttachGroupPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.AttachGroupPolicyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) AttachGroupPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_AttachGroupPolicyWithContext_Call {
	return &MockIAMAPI_AttachGroupPolicyWithContext_Call{Call: _e.mock.On("AttachGroupPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_AttachGroupPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.AttachGroupPolicyInput, _a2 ...request.Option)) *MockIAMAPI_AttachGroupPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.AttachGroupPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_AttachGroupPolicyWithContext_Call) Return(_a0 *iam.AttachGroupPolicyOutput, _a1 error) *MockIAMAPI_AttachGroupPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_AttachGroupPolicyWithContext_Call) RunAndReturn(run func(context.Context, *iam.AttachGroupPolicyInput, ...request.Option) (*iam.AttachGroupPolicyOutput, error)) *MockIAMAPI_AttachGroupPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// AttachRolePolicy provides a mock function with given fields: _a0
func (_m *MockIAMAPI) AttachRolePolicy(_a0 *iam.AttachRolePolicyInput) (*iam.AttachRolePolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.AttachRolePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.AttachRolePolicyInput) (*iam.AttachRolePolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.AttachRolePolicyInput) *iam.AttachRolePolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.AttachRolePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.AttachRolePolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_AttachRolePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachRolePolicy'
type MockIAMAPI_AttachRolePolicy_Call struct {
	*mock.Call
}

// AttachRolePolicy is a helper method to define mock.On call
//   - _a0 *iam.AttachRolePolicyInput
func (_e *MockIAMAPI_Expecter) AttachRolePolicy(_a0 interface{}) *MockIAMAPI_AttachRolePolicy_Call {
	return &MockIAMAPI_AttachRolePolicy_Call{Call: _e.mock.On("AttachRolePolicy", _a0)}
}

func (_c *MockIAMAPI_AttachRolePolicy_Call) Run(run func(_a0 *iam.AttachRolePolicyInput)) *MockIAMAPI_AttachRolePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.AttachRolePolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_AttachRolePolicy_Call) Return(_a0 *iam.AttachRolePolicyOutput, _a1 error) *MockIAMAPI_AttachRolePolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_AttachRolePolicy_Call) RunAndReturn(run func(*iam.AttachRolePolicyInput) (*iam.AttachRolePolicyOutput, error)) *MockIAMAPI_AttachRolePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// AttachRolePolicyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) AttachRolePolicyRequest(_a0 *iam.AttachRolePolicyInput) (*request.Request, *iam.AttachRolePolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.AttachRolePolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.AttachRolePolicyInput) (*request.Request, *iam.AttachRolePolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.AttachRolePolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.AttachRolePolicyInput) *iam.AttachRolePolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.AttachRolePolicyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_AttachRolePolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachRolePolicyRequest'
type MockIAMAPI_AttachRolePolicyRequest_Call struct {
	*mock.Call
}

// AttachRolePolicyRequest is a helper method to define mock.On call
//   - _a0 *iam.AttachRolePolicyInput
func (_e *MockIAMAPI_Expecter) AttachRolePolicyRequest(_a0 interface{}) *MockIAMAPI_AttachRolePolicyRequest_Call {
	return &MockIAMAPI_AttachRolePolicyRequest_Call{Call: _e.mock.On("AttachRolePolicyRequest", _a0)}
}

func (_c *MockIAMAPI_AttachRolePolicyRequest_Call) Run(run func(_a0 *iam.AttachRolePolicyInput)) *MockIAMAPI_AttachRolePolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.AttachRolePolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_AttachRolePolicyRequest_Call) Return(_a0 *request.Request, _a1 *iam.AttachRolePolicyOutput) *MockIAMAPI_AttachRolePolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_AttachRolePolicyRequest_Call) RunAndReturn(run func(*iam.AttachRolePolicyInput) (*request.Request, *iam.AttachRolePolicyOutput)) *MockIAMAPI_AttachRolePolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// AttachRolePolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) AttachRolePolicyWithContext(_a0 context.Context, _a1 *iam.AttachRolePolicyInput, _a2 ...request.Option) (*iam.AttachRolePolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.AttachRolePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.AttachRolePolicyInput, ...request.Option) (*iam.AttachRolePolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.AttachRolePolicyInput, ...request.Option) *iam.AttachRolePolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.AttachRolePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.AttachRolePolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_AttachRolePolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachRolePolicyWithContext'
type MockIAMAPI_AttachRolePolicyWithContext_Call struct {
	*mock.Call
}

// AttachRolePolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.AttachRolePolicyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) AttachRolePolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_AttachRolePolicyWithContext_Call {
	return &MockIAMAPI_AttachRolePolicyWithContext_Call{Call: _e.mock.On("AttachRolePolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_AttachRolePolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.AttachRolePolicyInput, _a2 ...request.Option)) *MockIAMAPI_AttachRolePolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.AttachRolePolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_AttachRolePolicyWithContext_Call) Return(_a0 *iam.AttachRolePolicyOutput, _a1 error) *MockIAMAPI_AttachRolePolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_AttachRolePolicyWithContext_Call) RunAndReturn(run func(context.Context, *iam.AttachRolePolicyInput, ...request.Option) (*iam.AttachRolePolicyOutput, error)) *MockIAMAPI_AttachRolePolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// AttachUserPolicy provides a mock function with given fields: _a0
func (_m *MockIAMAPI) AttachUserPolicy(_a0 *iam.AttachUserPolicyInput) (*iam.AttachUserPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.AttachUserPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.AttachUserPolicyInput) (*iam.AttachUserPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.AttachUserPolicyInput) *iam.AttachUserPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.AttachUserPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.AttachUserPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_AttachUserPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachUserPolicy'
type MockIAMAPI_AttachUserPolicy_Call struct {
	*mock.Call
}

// AttachUserPolicy is a helper method to define mock.On call
//   - _a0 *iam.AttachUserPolicyInput
func (_e *MockIAMAPI_Expecter) AttachUserPolicy(_a0 interface{}) *MockIAMAPI_AttachUserPolicy_Call {
	return &MockIAMAPI_AttachUserPolicy_Call{Call: _e.mock.On("AttachUserPolicy", _a0)}
}

func (_c *MockIAMAPI_AttachUserPolicy_Call) Run(run func(_a0 *iam.AttachUserPolicyInput)) *MockIAMAPI_AttachUserPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.AttachUserPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_AttachUserPolicy_Call) Return(_a0 *iam.AttachUserPolicyOutput, _a1 error) *MockIAMAPI_AttachUserPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_AttachUserPolicy_Call) RunAndReturn(run func(*iam.AttachUserPolicyInput) (*iam.AttachUserPolicyOutput, error)) *MockIAMAPI_AttachUserPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// AttachUserPolicyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) AttachUserPolicyRequest(_a0 *iam.AttachUserPolicyInput) (*request.Request, *iam.AttachUserPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.AttachUserPolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.AttachUserPolicyInput) (*request.Request, *iam.AttachUserPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.AttachUserPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.AttachUserPolicyInput) *iam.AttachUserPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.AttachUserPolicyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_AttachUserPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachUserPolicyRequest'
type MockIAMAPI_AttachUserPolicyRequest_Call struct {
	*mock.Call
}

// AttachUserPolicyRequest is a helper method to define mock.On call
//   - _a0 *iam.AttachUserPolicyInput
func (_e *MockIAMAPI_Expecter) AttachUserPolicyRequest(_a0 interface{}) *MockIAMAPI_AttachUserPolicyRequest_Call {
	return &MockIAMAPI_AttachUserPolicyRequest_Call{Call: _e.mock.On("AttachUserPolicyRequest", _a0)}
}

func (_c *MockIAMAPI_AttachUserPolicyRequest_Call) Run(run func(_a0 *iam.AttachUserPolicyInput)) *MockIAMAPI_AttachUserPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.AttachUserPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_AttachUserPolicyRequest_Call) Return(_a0 *request.Request, _a1 *iam.AttachUserPolicyOutput) *MockIAMAPI_AttachUserPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_AttachUserPolicyRequest_Call) RunAndReturn(run func(*iam.AttachUserPolicyInput) (*request.Request, *iam.AttachUserPolicyOutput)) *MockIAMAPI_AttachUserPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// AttachUserPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) AttachUserPolicyWithContext(_a0 context.Context, _a1 *iam.AttachUserPolicyInput, _a2 ...request.Option) (*iam.AttachUserPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.AttachUserPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.AttachUserPolicyInput, ...request.Option) (*iam.AttachUserPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.AttachUserPolicyInput, ...request.Option) *iam.AttachUserPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.AttachUserPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.AttachUserPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_AttachUserPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachUserPolicyWithContext'
type MockIAMAPI_AttachUserPolicyWithContext_Call struct {
	*mock.Call
}

// AttachUserPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.AttachUserPolicyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) AttachUserPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_AttachUserPolicyWithContext_Call {
	return &MockIAMAPI_AttachUserPolicyWithContext_Call{Call: _e.mock.On("AttachUserPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_AttachUserPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.AttachUserPolicyInput, _a2 ...request.Option)) *MockIAMAPI_AttachUserPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.AttachUserPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_AttachUserPolicyWithContext_Call) Return(_a0 *iam.AttachUserPolicyOutput, _a1 error) *MockIAMAPI_AttachUserPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_AttachUserPolicyWithContext_Call) RunAndReturn(run func(context.Context, *iam.AttachUserPolicyInput, ...request.Option) (*iam.AttachUserPolicyOutput, error)) *MockIAMAPI_AttachUserPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ChangePassword provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ChangePassword(_a0 *iam.ChangePasswordInput) (*iam.ChangePasswordOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ChangePasswordOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ChangePasswordInput) (*iam.ChangePasswordOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ChangePasswordInput) *iam.ChangePasswordOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ChangePasswordOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ChangePasswordInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ChangePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangePassword'
type MockIAMAPI_ChangePassword_Call struct {
	*mock.Call
}

// ChangePassword is a helper method to define mock.On call
//   - _a0 *iam.ChangePasswordInput
func (_e *MockIAMAPI_Expecter) ChangePassword(_a0 interface{}) *MockIAMAPI_ChangePassword_Call {
	return &MockIAMAPI_ChangePassword_Call{Call: _e.mock.On("ChangePassword", _a0)}
}

func (_c *MockIAMAPI_ChangePassword_Call) Run(run func(_a0 *iam.ChangePasswordInput)) *MockIAMAPI_ChangePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ChangePasswordInput))
	})
	return _c
}

func (_c *MockIAMAPI_ChangePassword_Call) Return(_a0 *iam.ChangePasswordOutput, _a1 error) *MockIAMAPI_ChangePassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ChangePassword_Call) RunAndReturn(run func(*iam.ChangePasswordInput) (*iam.ChangePasswordOutput, error)) *MockIAMAPI_ChangePassword_Call {
	_c.Call.Return(run)
	return _c
}

// ChangePasswordRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ChangePasswordRequest(_a0 *iam.ChangePasswordInput) (*request.Request, *iam.ChangePasswordOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ChangePasswordOutput
	if rf, ok := ret.Get(0).(func(*iam.ChangePasswordInput) (*request.Request, *iam.ChangePasswordOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ChangePasswordInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ChangePasswordInput) *iam.ChangePasswordOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ChangePasswordOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ChangePasswordRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangePasswordRequest'
type MockIAMAPI_ChangePasswordRequest_Call struct {
	*mock.Call
}

// ChangePasswordRequest is a helper method to define mock.On call
//   - _a0 *iam.ChangePasswordInput
func (_e *MockIAMAPI_Expecter) ChangePasswordRequest(_a0 interface{}) *MockIAMAPI_ChangePasswordRequest_Call {
	return &MockIAMAPI_ChangePasswordRequest_Call{Call: _e.mock.On("ChangePasswordRequest", _a0)}
}

func (_c *MockIAMAPI_ChangePasswordRequest_Call) Run(run func(_a0 *iam.ChangePasswordInput)) *MockIAMAPI_ChangePasswordRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ChangePasswordInput))
	})
	return _c
}

func (_c *MockIAMAPI_ChangePasswordRequest_Call) Return(_a0 *request.Request, _a1 *iam.ChangePasswordOutput) *MockIAMAPI_ChangePasswordRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ChangePasswordRequest_Call) RunAndReturn(run func(*iam.ChangePasswordInput) (*request.Request, *iam.ChangePasswordOutput)) *MockIAMAPI_ChangePasswordRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ChangePasswordWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ChangePasswordWithContext(_a0 context.Context, _a1 *iam.ChangePasswordInput, _a2 ...request.Option) (*iam.ChangePasswordOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ChangePasswordOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ChangePasswordInput, ...request.Option) (*iam.ChangePasswordOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ChangePasswordInput, ...request.Option) *iam.ChangePasswordOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ChangePasswordOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ChangePasswordInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ChangePasswordWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangePasswordWithContext'
type MockIAMAPI_ChangePasswordWithContext_Call struct {
	*mock.Call
}

// ChangePasswordWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ChangePasswordInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ChangePasswordWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ChangePasswordWithContext_Call {
	return &MockIAMAPI_ChangePasswordWithContext_Call{Call: _e.mock.On("ChangePasswordWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ChangePasswordWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ChangePasswordInput, _a2 ...request.Option)) *MockIAMAPI_ChangePasswordWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ChangePasswordInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ChangePasswordWithContext_Call) Return(_a0 *iam.ChangePasswordOutput, _a1 error) *MockIAMAPI_ChangePasswordWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ChangePasswordWithContext_Call) RunAndReturn(run func(context.Context, *iam.ChangePasswordInput, ...request.Option) (*iam.ChangePasswordOutput, error)) *MockIAMAPI_ChangePasswordWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccessKey provides a mock function with given fields: _a0
func (_m *MockIAMAPI) CreateAccessKey(_a0 *iam.CreateAccessKeyInput) (*iam.CreateAccessKeyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.CreateAccessKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.CreateAccessKeyInput) (*iam.CreateAccessKeyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.CreateAccessKeyInput) *iam.CreateAccessKeyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateAccessKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.CreateAccessKeyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_CreateAccessKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccessKey'
type MockIAMAPI_CreateAccessKey_Call struct {
	*mock.Call
}

// CreateAccessKey is a helper method to define mock.On call
//   - _a0 *iam.CreateAccessKeyInput
func (_e *MockIAMAPI_Expecter) CreateAccessKey(_a0 interface{}) *MockIAMAPI_CreateAccessKey_Call {
	return &MockIAMAPI_CreateAccessKey_Call{Call: _e.mock.On("CreateAccessKey", _a0)}
}

func (_c *MockIAMAPI_CreateAccessKey_Call) Run(run func(_a0 *iam.CreateAccessKeyInput)) *MockIAMAPI_CreateAccessKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.CreateAccessKeyInput))
	})
	return _c
}

func (_c *MockIAMAPI_CreateAccessKey_Call) Return(_a0 *iam.CreateAccessKeyOutput, _a1 error) *MockIAMAPI_CreateAccessKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateAccessKey_Call) RunAndReturn(run func(*iam.CreateAccessKeyInput) (*iam.CreateAccessKeyOutput, error)) *MockIAMAPI_CreateAccessKey_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccessKeyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) CreateAccessKeyRequest(_a0 *iam.CreateAccessKeyInput) (*request.Request, *iam.CreateAccessKeyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.CreateAccessKeyOutput
	if rf, ok := ret.Get(0).(func(*iam.CreateAccessKeyInput) (*request.Request, *iam.CreateAccessKeyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.CreateAccessKeyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.CreateAccessKeyInput) *iam.CreateAccessKeyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.CreateAccessKeyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_CreateAccessKeyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccessKeyRequest'
type MockIAMAPI_CreateAccessKeyRequest_Call struct {
	*mock.Call
}

// CreateAccessKeyRequest is a helper method to define mock.On call
//   - _a0 *iam.CreateAccessKeyInput
func (_e *MockIAMAPI_Expecter) CreateAccessKeyRequest(_a0 interface{}) *MockIAMAPI_CreateAccessKeyRequest_Call {
	return &MockIAMAPI_CreateAccessKeyRequest_Call{Call: _e.mock.On("CreateAccessKeyRequest", _a0)}
}

func (_c *MockIAMAPI_CreateAccessKeyRequest_Call) Run(run func(_a0 *iam.CreateAccessKeyInput)) *MockIAMAPI_CreateAccessKeyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.CreateAccessKeyInput))
	})
	return _c
}

func (_c *MockIAMAPI_CreateAccessKeyRequest_Call) Return(_a0 *request.Request, _a1 *iam.CreateAccessKeyOutput) *MockIAMAPI_CreateAccessKeyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateAccessKeyRequest_Call) RunAndReturn(run func(*iam.CreateAccessKeyInput) (*request.Request, *iam.CreateAccessKeyOutput)) *MockIAMAPI_CreateAccessKeyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccessKeyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) CreateAccessKeyWithContext(_a0 context.Context, _a1 *iam.CreateAccessKeyInput, _a2 ...request.Option) (*iam.CreateAccessKeyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.CreateAccessKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.CreateAccessKeyInput, ...request.Option) (*iam.CreateAccessKeyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.CreateAccessKeyInput, ...request.Option) *iam.CreateAccessKeyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateAccessKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.CreateAccessKeyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_CreateAccessKeyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccessKeyWithContext'
type MockIAMAPI_CreateAccessKeyWithContext_Call struct {
	*mock.Call
}

// CreateAccessKeyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.CreateAccessKeyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) CreateAccessKeyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_CreateAccessKeyWithContext_Call {
	return &MockIAMAPI_CreateAccessKeyWithContext_Call{Call: _e.mock.On("CreateAccessKeyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_CreateAccessKeyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.CreateAccessKeyInput, _a2 ...request.Option)) *MockIAMAPI_CreateAccessKeyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.CreateAccessKeyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_CreateAccessKeyWithContext_Call) Return(_a0 *iam.CreateAccessKeyOutput, _a1 error) *MockIAMAPI_CreateAccessKeyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateAccessKeyWithContext_Call) RunAndReturn(run func(context.Context, *iam.CreateAccessKeyInput, ...request.Option) (*iam.CreateAccessKeyOutput, error)) *MockIAMAPI_CreateAccessKeyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccountAlias provides a mock function with given fields: _a0
func (_m *MockIAMAPI) CreateAccountAlias(_a0 *iam.CreateAccountAliasInput) (*iam.CreateAccountAliasOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.CreateAccountAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.CreateAccountAliasInput) (*iam.CreateAccountAliasOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.CreateAccountAliasInput) *iam.CreateAccountAliasOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateAccountAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.CreateAccountAliasInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_CreateAccountAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccountAlias'
type MockIAMAPI_CreateAccountAlias_Call struct {
	*mock.Call
}

// CreateAccountAlias is a helper method to define mock.On call
//   - _a0 *iam.CreateAccountAliasInput
func (_e *MockIAMAPI_Expecter) CreateAccountAlias(_a0 interface{}) *MockIAMAPI_CreateAccountAlias_Call {
	return &MockIAMAPI_CreateAccountAlias_Call{Call: _e.mock.On("CreateAccountAlias", _a0)}
}

func (_c *MockIAMAPI_CreateAccountAlias_Call) Run(run func(_a0 *iam.CreateAccountAliasInput)) *MockIAMAPI_CreateAccountAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.CreateAccountAliasInput))
	})
	return _c
}

func (_c *MockIAMAPI_CreateAccountAlias_Call) Return(_a0 *iam.CreateAccountAliasOutput, _a1 error) *MockIAMAPI_CreateAccountAlias_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateAccountAlias_Call) RunAndReturn(run func(*iam.CreateAccountAliasInput) (*iam.CreateAccountAliasOutput, error)) *MockIAMAPI_CreateAccountAlias_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccountAliasRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) CreateAccountAliasRequest(_a0 *iam.CreateAccountAliasInput) (*request.Request, *iam.CreateAccountAliasOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.CreateAccountAliasOutput
	if rf, ok := ret.Get(0).(func(*iam.CreateAccountAliasInput) (*request.Request, *iam.CreateAccountAliasOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.CreateAccountAliasInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.CreateAccountAliasInput) *iam.CreateAccountAliasOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.CreateAccountAliasOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_CreateAccountAliasRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccountAliasRequest'
type MockIAMAPI_CreateAccountAliasRequest_Call struct {
	*mock.Call
}

// CreateAccountAliasRequest is a helper method to define mock.On call
//   - _a0 *iam.CreateAccountAliasInput
func (_e *MockIAMAPI_Expecter) CreateAccountAliasRequest(_a0 interface{}) *MockIAMAPI_CreateAccountAliasRequest_Call {
	return &MockIAMAPI_CreateAccountAliasRequest_Call{Call: _e.mock.On("CreateAccountAliasRequest", _a0)}
}

func (_c *MockIAMAPI_CreateAccountAliasRequest_Call) Run(run func(_a0 *iam.CreateAccountAliasInput)) *MockIAMAPI_CreateAccountAliasRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.CreateAccountAliasInput))
	})
	return _c
}

func (_c *MockIAMAPI_CreateAccountAliasRequest_Call) Return(_a0 *request.Request, _a1 *iam.CreateAccountAliasOutput) *MockIAMAPI_CreateAccountAliasRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateAccountAliasRequest_Call) RunAndReturn(run func(*iam.CreateAccountAliasInput) (*request.Request, *iam.CreateAccountAliasOutput)) *MockIAMAPI_CreateAccountAliasRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccountAliasWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) CreateAccountAliasWithContext(_a0 context.Context, _a1 *iam.CreateAccountAliasInput, _a2 ...request.Option) (*iam.CreateAccountAliasOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.CreateAccountAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.CreateAccountAliasInput, ...request.Option) (*iam.CreateAccountAliasOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.CreateAccountAliasInput, ...request.Option) *iam.CreateAccountAliasOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateAccountAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.CreateAccountAliasInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_CreateAccountAliasWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccountAliasWithContext'
type MockIAMAPI_CreateAccountAliasWithContext_Call struct {
	*mock.Call
}

// CreateAccountAliasWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.CreateAccountAliasInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) CreateAccountAliasWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_CreateAccountAliasWithContext_Call {
	return &MockIAMAPI_CreateAccountAliasWithContext_Call{Call: _e.mock.On("CreateAccountAliasWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_CreateAccountAliasWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.CreateAccountAliasInput, _a2 ...request.Option)) *MockIAMAPI_CreateAccountAliasWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.CreateAccountAliasInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_CreateAccountAliasWithContext_Call) Return(_a0 *iam.CreateAccountAliasOutput, _a1 error) *MockIAMAPI_CreateAccountAliasWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateAccountAliasWithContext_Call) RunAndReturn(run func(context.Context, *iam.CreateAccountAliasInput, ...request.Option) (*iam.CreateAccountAliasOutput, error)) *MockIAMAPI_CreateAccountAliasWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroup provides a mock function with given fields: _a0
func (_m *MockIAMAPI) CreateGroup(_a0 *iam.CreateGroupInput) (*iam.CreateGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.CreateGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.CreateGroupInput) (*iam.CreateGroupOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.CreateGroupInput) *iam.CreateGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.CreateGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_CreateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroup'
type MockIAMAPI_CreateGroup_Call struct {
	*mock.Call
}

// CreateGroup is a helper method to define mock.On call
//   - _a0 *iam.CreateGroupInput
func (_e *MockIAMAPI_Expecter) CreateGroup(_a0 interface{}) *MockIAMAPI_CreateGroup_Call {
	return &MockIAMAPI_CreateGroup_Call{Call: _e.mock.On("CreateGroup", _a0)}
}

func (_c *MockIAMAPI_CreateGroup_Call) Run(run func(_a0 *iam.CreateGroupInput)) *MockIAMAPI_CreateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.CreateGroupInput))
	})
	return _c
}

func (_c *MockIAMAPI_CreateGroup_Call) Return(_a0 *iam.CreateGroupOutput, _a1 error) *MockIAMAPI_CreateGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateGroup_Call) RunAndReturn(run func(*iam.CreateGroupInput) (*iam.CreateGroupOutput, error)) *MockIAMAPI_CreateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) CreateGroupRequest(_a0 *iam.CreateGroupInput) (*request.Request, *iam.CreateGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.CreateGroupOutput
	if rf, ok := ret.Get(0).(func(*iam.CreateGroupInput) (*request.Request, *iam.CreateGroupOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.CreateGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.CreateGroupInput) *iam.CreateGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.CreateGroupOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_CreateGroupRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupRequest'
type MockIAMAPI_CreateGroupRequest_Call struct {
	*mock.Call
}

// CreateGroupRequest is a helper method to define mock.On call
//   - _a0 *iam.CreateGroupInput
func (_e *MockIAMAPI_Expecter) CreateGroupRequest(_a0 interface{}) *MockIAMAPI_CreateGroupRequest_Call {
	return &MockIAMAPI_CreateGroupRequest_Call{Call: _e.mock.On("CreateGroupRequest", _a0)}
}

func (_c *MockIAMAPI_CreateGroupRequest_Call) Run(run func(_a0 *iam.CreateGroupInput)) *MockIAMAPI_CreateGroupRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.CreateGroupInput))
	})
	return _c
}

func (_c *MockIAMAPI_CreateGroupRequest_Call) Return(_a0 *request.Request, _a1 *iam.CreateGroupOutput) *MockIAMAPI_CreateGroupRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateGroupRequest_Call) RunAndReturn(run func(*iam.CreateGroupInput) (*request.Request, *iam.CreateGroupOutput)) *MockIAMAPI_CreateGroupRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) CreateGroupWithContext(_a0 context.Context, _a1 *iam.CreateGroupInput, _a2 ...request.Option) (*iam.CreateGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.CreateGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.CreateGroupInput, ...request.Option) (*iam.CreateGroupOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.CreateGroupInput, ...request.Option) *iam.CreateGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.CreateGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_CreateGroupWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupWithContext'
type MockIAMAPI_CreateGroupWithContext_Call struct {
	*mock.Call
}

// CreateGroupWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.CreateGroupInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) CreateGroupWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_CreateGroupWithContext_Call {
	return &MockIAMAPI_CreateGroupWithContext_Call{Call: _e.mock.On("CreateGroupWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_CreateGroupWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.CreateGroupInput, _a2 ...request.Option)) *MockIAMAPI_CreateGroupWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.CreateGroupInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_CreateGroupWithContext_Call) Return(_a0 *iam.CreateGroupOutput, _a1 error) *MockIAMAPI_CreateGroupWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateGroupWithContext_Call) RunAndReturn(run func(context.Context, *iam.CreateGroupInput, ...request.Option) (*iam.CreateGroupOutput, error)) *MockIAMAPI_CreateGroupWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreateInstanceProfile provides a mock function with given fields: _a0
func (_m *MockIAMAPI) CreateInstanceProfile(_a0 *iam.CreateInstanceProfileInput) (*iam.CreateInstanceProfileOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.CreateInstanceProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.CreateInstanceProfileInput) (*iam.CreateInstanceProfileOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.CreateInstanceProfileInput) *iam.CreateInstanceProfileOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateInstanceProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.CreateInstanceProfileInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_CreateInstanceProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateInstanceProfile'
type MockIAMAPI_CreateInstanceProfile_Call struct {
	*mock.Call
}

// CreateInstanceProfile is a helper method to define mock.On call
//   - _a0 *iam.CreateInstanceProfileInput
func (_e *MockIAMAPI_Expecter) CreateInstanceProfile(_a0 interface{}) *MockIAMAPI_CreateInstanceProfile_Call {
	return &MockIAMAPI_CreateInstanceProfile_Call{Call: _e.mock.On("CreateInstanceProfile", _a0)}
}

func (_c *MockIAMAPI_CreateInstanceProfile_Call) Run(run func(_a0 *iam.CreateInstanceProfileInput)) *MockIAMAPI_CreateInstanceProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.CreateInstanceProfileInput))
	})
	return _c
}

func (_c *MockIAMAPI_CreateInstanceProfile_Call) Return(_a0 *iam.CreateInstanceProfileOutput, _a1 error) *MockIAMAPI_CreateInstanceProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateInstanceProfile_Call) RunAndReturn(run func(*iam.CreateInstanceProfileInput) (*iam.CreateInstanceProfileOutput, error)) *MockIAMAPI_CreateInstanceProfile_Call {
	_c.Call.Return(run)
	return _c
}

// CreateInstanceProfileRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) CreateInstanceProfileRequest(_a0 *iam.CreateInstanceProfileInput) (*request.Request, *iam.CreateInstanceProfileOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.CreateInstanceProfileOutput
	if rf, ok := ret.Get(0).(func(*iam.CreateInstanceProfileInput) (*request.Request, *iam.CreateInstanceProfileOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.CreateInstanceProfileInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.CreateInstanceProfileInput) *iam.CreateInstanceProfileOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.CreateInstanceProfileOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_CreateInstanceProfileRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateInstanceProfileRequest'
type MockIAMAPI_CreateInstanceProfileRequest_Call struct {
	*mock.Call
}

// CreateInstanceProfileRequest is a helper method to define mock.On call
//   - _a0 *iam.CreateInstanceProfileInput
func (_e *MockIAMAPI_Expecter) CreateInstanceProfileRequest(_a0 interface{}) *MockIAMAPI_CreateInstanceProfileRequest_Call {
	return &MockIAMAPI_CreateInstanceProfileRequest_Call{Call: _e.mock.On("CreateInstanceProfileRequest", _a0)}
}

func (_c *MockIAMAPI_CreateInstanceProfileRequest_Call) Run(run func(_a0 *iam.CreateInstanceProfileInput)) *MockIAMAPI_CreateInstanceProfileRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.CreateInstanceProfileInput))
	})
	return _c
}

func (_c *MockIAMAPI_CreateInstanceProfileRequest_Call) Return(_a0 *request.Request, _a1 *iam.CreateInstanceProfileOutput) *MockIAMAPI_CreateInstanceProfileRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateInstanceProfileRequest_Call) RunAndReturn(run func(*iam.CreateInstanceProfileInput) (*request.Request, *iam.CreateInstanceProfileOutput)) *MockIAMAPI_CreateInstanceProfileRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateInstanceProfileWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) CreateInstanceProfileWithContext(_a0 context.Context, _a1 *iam.CreateInstanceProfileInput, _a2 ...request.Option) (*iam.CreateInstanceProfileOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.CreateInstanceProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.CreateInstanceProfileInput, ...request.Option) (*iam.CreateInstanceProfileOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.CreateInstanceProfileInput, ...request.Option) *iam.CreateInstanceProfileOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateInstanceProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.CreateInstanceProfileInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_CreateInstanceProfileWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateInstanceProfileWithContext'
type MockIAMAPI_CreateInstanceProfileWithContext_Call struct {
	*mock.Call
}

// CreateInstanceProfileWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.CreateInstanceProfileInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) CreateInstanceProfileWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_CreateInstanceProfileWithContext_Call {
	return &MockIAMAPI_CreateInstanceProfileWithContext_Call{Call: _e.mock.On("CreateInstanceProfileWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_CreateInstanceProfileWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.CreateInstanceProfileInput, _a2 ...request.Option)) *MockIAMAPI_CreateInstanceProfileWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.CreateInstanceProfileInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_CreateInstanceProfileWithContext_Call) Return(_a0 *iam.CreateInstanceProfileOutput, _a1 error) *MockIAMAPI_CreateInstanceProfileWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateInstanceProfileWithContext_Call) RunAndReturn(run func(context.Context, *iam.CreateInstanceProfileInput, ...request.Option) (*iam.CreateInstanceProfileOutput, error)) *MockIAMAPI_CreateInstanceProfileWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLoginProfile provides a mock function with given fields: _a0
func (_m *MockIAMAPI) CreateLoginProfile(_a0 *iam.CreateLoginProfileInput) (*iam.CreateLoginProfileOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.CreateLoginProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.CreateLoginProfileInput) (*iam.CreateLoginProfileOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.CreateLoginProfileInput) *iam.CreateLoginProfileOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateLoginProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.CreateLoginProfileInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_CreateLoginProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLoginProfile'
type MockIAMAPI_CreateLoginProfile_Call struct {
	*mock.Call
}

// CreateLoginProfile is a helper method to define mock.On call
//   - _a0 *iam.CreateLoginProfileInput
func (_e *MockIAMAPI_Expecter) CreateLoginProfile(_a0 interface{}) *MockIAMAPI_CreateLoginProfile_Call {
	return &MockIAMAPI_CreateLoginProfile_Call{Call: _e.mock.On("CreateLoginProfile", _a0)}
}

func (_c *MockIAMAPI_CreateLoginProfile_Call) Run(run func(_a0 *iam.CreateLoginProfileInput)) *MockIAMAPI_CreateLoginProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.CreateLoginProfileInput))
	})
	return _c
}

func (_c *MockIAMAPI_CreateLoginProfile_Call) Return(_a0 *iam.CreateLoginProfileOutput, _a1 error) *MockIAMAPI_CreateLoginProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateLoginProfile_Call) RunAndReturn(run func(*iam.CreateLoginProfileInput) (*iam.CreateLoginProfileOutput, error)) *MockIAMAPI_CreateLoginProfile_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLoginProfileRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) CreateLoginProfileRequest(_a0 *iam.CreateLoginProfileInput) (*request.Request, *iam.CreateLoginProfileOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.CreateLoginProfileOutput
	if rf, ok := ret.Get(0).(func(*iam.CreateLoginProfileInput) (*request.Request, *iam.CreateLoginProfileOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.CreateLoginProfileInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.CreateLoginProfileInput) *iam.CreateLoginProfileOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.CreateLoginProfileOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_CreateLoginProfileRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLoginProfileRequest'
type MockIAMAPI_CreateLoginProfileRequest_Call struct {
	*mock.Call
}

// CreateLoginProfileRequest is a helper method to define mock.On call
//   - _a0 *iam.CreateLoginProfileInput
func (_e *MockIAMAPI_Expecter) CreateLoginProfileRequest(_a0 interface{}) *MockIAMAPI_CreateLoginProfileRequest_Call {
	return &MockIAMAPI_CreateLoginProfileRequest_Call{Call: _e.mock.On("CreateLoginProfileRequest", _a0)}
}

func (_c *MockIAMAPI_CreateLoginProfileRequest_Call) Run(run func(_a0 *iam.CreateLoginProfileInput)) *MockIAMAPI_CreateLoginProfileRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.CreateLoginProfileInput))
	})
	return _c
}

func (_c *MockIAMAPI_CreateLoginProfileRequest_Call) Return(_a0 *request.Request, _a1 *iam.CreateLoginProfileOutput) *MockIAMAPI_CreateLoginProfileRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateLoginProfileRequest_Call) RunAndReturn(run func(*iam.CreateLoginProfileInput) (*request.Request, *iam.CreateLoginProfileOutput)) *MockIAMAPI_CreateLoginProfileRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLoginProfileWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) CreateLoginProfileWithContext(_a0 context.Context, _a1 *iam.CreateLoginProfileInput, _a2 ...request.Option) (*iam.CreateLoginProfileOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.CreateLoginProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.CreateLoginProfileInput, ...request.Option) (*iam.CreateLoginProfileOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.CreateLoginProfileInput, ...request.Option) *iam.CreateLoginProfileOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateLoginProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.CreateLoginProfileInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_CreateLoginProfileWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLoginProfileWithContext'
type MockIAMAPI_CreateLoginProfileWithContext_Call struct {
	*mock.Call
}

// CreateLoginProfileWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.CreateLoginProfileInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) CreateLoginProfileWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_CreateLoginProfileWithContext_Call {
	return &MockIAMAPI_CreateLoginProfileWithContext_Call{Call: _e.mock.On("CreateLoginProfileWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_CreateLoginProfileWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.CreateLoginProfileInput, _a2 ...request.Option)) *MockIAMAPI_CreateLoginProfileWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.CreateLoginProfileInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_CreateLoginProfileWithContext_Call) Return(_a0 *iam.CreateLoginProfileOutput, _a1 error) *MockIAMAPI_CreateLoginProfileWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateLoginProfileWithContext_Call) RunAndReturn(run func(context.Context, *iam.CreateLoginProfileInput, ...request.Option) (*iam.CreateLoginProfileOutput, error)) *MockIAMAPI_CreateLoginProfileWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOpenIDConnectProvider provides a mock function with given fields: _a0
func (_m *MockIAMAPI) CreateOpenIDConnectProvider(_a0 *iam.CreateOpenIDConnectProviderInput) (*iam.CreateOpenIDConnectProviderOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.CreateOpenIDConnectProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.CreateOpenIDConnectProviderInput) (*iam.CreateOpenIDConnectProviderOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.CreateOpenIDConnectProviderInput) *iam.CreateOpenIDConnectProviderOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateOpenIDConnectProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.CreateOpenIDConnectProviderInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_CreateOpenIDConnectProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOpenIDConnectProvider'
type MockIAMAPI_CreateOpenIDConnectProvider_Call struct {
	*mock.Call
}

// CreateOpenIDConnectProvider is a helper method to define mock.On call
//   - _a0 *iam.CreateOpenIDConnectProviderInput
func (_e *MockIAMAPI_Expecter) CreateOpenIDConnectProvider(_a0 interface{}) *MockIAMAPI_CreateOpenIDConnectProvider_Call {
	return &MockIAMAPI_CreateOpenIDConnectProvider_Call{Call: _e.mock.On("CreateOpenIDConnectProvider", _a0)}
}

func (_c *MockIAMAPI_CreateOpenIDConnectProvider_Call) Run(run func(_a0 *iam.CreateOpenIDConnectProviderInput)) *MockIAMAPI_CreateOpenIDConnectProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.CreateOpenIDConnectProviderInput))
	})
	return _c
}

func (_c *MockIAMAPI_CreateOpenIDConnectProvider_Call) Return(_a0 *iam.CreateOpenIDConnectProviderOutput, _a1 error) *MockIAMAPI_CreateOpenIDConnectProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateOpenIDConnectProvider_Call) RunAndReturn(run func(*iam.CreateOpenIDConnectProviderInput) (*iam.CreateOpenIDConnectProviderOutput, error)) *MockIAMAPI_CreateOpenIDConnectProvider_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOpenIDConnectProviderRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) CreateOpenIDConnectProviderRequest(_a0 *iam.CreateOpenIDConnectProviderInput) (*request.Request, *iam.CreateOpenIDConnectProviderOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.CreateOpenIDConnectProviderOutput
	if rf, ok := ret.Get(0).(func(*iam.CreateOpenIDConnectProviderInput) (*request.Request, *iam.CreateOpenIDConnectProviderOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.CreateOpenIDConnectProviderInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.CreateOpenIDConnectProviderInput) *iam.CreateOpenIDConnectProviderOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.CreateOpenIDConnectProviderOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_CreateOpenIDConnectProviderRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOpenIDConnectProviderRequest'
type MockIAMAPI_CreateOpenIDConnectProviderRequest_Call struct {
	*mock.Call
}

// CreateOpenIDConnectProviderRequest is a helper method to define mock.On call
//   - _a0 *iam.CreateOpenIDConnectProviderInput
func (_e *MockIAMAPI_Expecter) CreateOpenIDConnectProviderRequest(_a0 interface{}) *MockIAMAPI_CreateOpenIDConnectProviderRequest_Call {
	return &MockIAMAPI_CreateOpenIDConnectProviderRequest_Call{Call: _e.mock.On("CreateOpenIDConnectProviderRequest", _a0)}
}

func (_c *MockIAMAPI_CreateOpenIDConnectProviderRequest_Call) Run(run func(_a0 *iam.CreateOpenIDConnectProviderInput)) *MockIAMAPI_CreateOpenIDConnectProviderRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.CreateOpenIDConnectProviderInput))
	})
	return _c
}

func (_c *MockIAMAPI_CreateOpenIDConnectProviderRequest_Call) Return(_a0 *request.Request, _a1 *iam.CreateOpenIDConnectProviderOutput) *MockIAMAPI_CreateOpenIDConnectProviderRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateOpenIDConnectProviderRequest_Call) RunAndReturn(run func(*iam.CreateOpenIDConnectProviderInput) (*request.Request, *iam.CreateOpenIDConnectProviderOutput)) *MockIAMAPI_CreateOpenIDConnectProviderRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOpenIDConnectProviderWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) CreateOpenIDConnectProviderWithContext(_a0 context.Context, _a1 *iam.CreateOpenIDConnectProviderInput, _a2 ...request.Option) (*iam.CreateOpenIDConnectProviderOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.CreateOpenIDConnectProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.CreateOpenIDConnectProviderInput, ...request.Option) (*iam.CreateOpenIDConnectProviderOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.CreateOpenIDConnectProviderInput, ...request.Option) *iam.CreateOpenIDConnectProviderOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateOpenIDConnectProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.CreateOpenIDConnectProviderInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_CreateOpenIDConnectProviderWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOpenIDConnectProviderWithContext'
type MockIAMAPI_CreateOpenIDConnectProviderWithContext_Call struct {
	*mock.Call
}

// CreateOpenIDConnectProviderWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.CreateOpenIDConnectProviderInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) CreateOpenIDConnectProviderWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_CreateOpenIDConnectProviderWithContext_Call {
	return &MockIAMAPI_CreateOpenIDConnectProviderWithContext_Call{Call: _e.mock.On("CreateOpenIDConnectProviderWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_CreateOpenIDConnectProviderWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.CreateOpenIDConnectProviderInput, _a2 ...request.Option)) *MockIAMAPI_CreateOpenIDConnectProviderWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.CreateOpenIDConnectProviderInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_CreateOpenIDConnectProviderWithContext_Call) Return(_a0 *iam.CreateOpenIDConnectProviderOutput, _a1 error) *MockIAMAPI_CreateOpenIDConnectProviderWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateOpenIDConnectProviderWithContext_Call) RunAndReturn(run func(context.Context, *iam.CreateOpenIDConnectProviderInput, ...request.Option) (*iam.CreateOpenIDConnectProviderOutput, error)) *MockIAMAPI_CreateOpenIDConnectProviderWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePolicy provides a mock function with given fields: _a0
func (_m *MockIAMAPI) CreatePolicy(_a0 *iam.CreatePolicyInput) (*iam.CreatePolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.CreatePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.CreatePolicyInput) (*iam.CreatePolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.CreatePolicyInput) *iam.CreatePolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreatePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.CreatePolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_CreatePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePolicy'
type MockIAMAPI_CreatePolicy_Call struct {
	*mock.Call
}

// CreatePolicy is a helper method to define mock.On call
//   - _a0 *iam.CreatePolicyInput
func (_e *MockIAMAPI_Expecter) CreatePolicy(_a0 interface{}) *MockIAMAPI_CreatePolicy_Call {
	return &MockIAMAPI_CreatePolicy_Call{Call: _e.mock.On("CreatePolicy", _a0)}
}

func (_c *MockIAMAPI_CreatePolicy_Call) Run(run func(_a0 *iam.CreatePolicyInput)) *MockIAMAPI_CreatePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.CreatePolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_CreatePolicy_Call) Return(_a0 *iam.CreatePolicyOutput, _a1 error) *MockIAMAPI_CreatePolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreatePolicy_Call) RunAndReturn(run func(*iam.CreatePolicyInput) (*iam.CreatePolicyOutput, error)) *MockIAMAPI_CreatePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePolicyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) CreatePolicyRequest(_a0 *iam.CreatePolicyInput) (*request.Request, *iam.CreatePolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.CreatePolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.CreatePolicyInput) (*request.Request, *iam.CreatePolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.CreatePolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.CreatePolicyInput) *iam.CreatePolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.CreatePolicyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_CreatePolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePolicyRequest'
type MockIAMAPI_CreatePolicyRequest_Call struct {
	*mock.Call
}

// CreatePolicyRequest is a helper method to define mock.On call
//   - _a0 *iam.CreatePolicyInput
func (_e *MockIAMAPI_Expecter) CreatePolicyRequest(_a0 interface{}) *MockIAMAPI_CreatePolicyRequest_Call {
	return &MockIAMAPI_CreatePolicyRequest_Call{Call: _e.mock.On("CreatePolicyRequest", _a0)}
}

func (_c *MockIAMAPI_CreatePolicyRequest_Call) Run(run func(_a0 *iam.CreatePolicyInput)) *MockIAMAPI_CreatePolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.CreatePolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_CreatePolicyRequest_Call) Return(_a0 *request.Request, _a1 *iam.CreatePolicyOutput) *MockIAMAPI_CreatePolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreatePolicyRequest_Call) RunAndReturn(run func(*iam.CreatePolicyInput) (*request.Request, *iam.CreatePolicyOutput)) *MockIAMAPI_CreatePolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePolicyVersion provides a mock function with given fields: _a0
func (_m *MockIAMAPI) CreatePolicyVersion(_a0 *iam.CreatePolicyVersionInput) (*iam.CreatePolicyVersionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.CreatePolicyVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.CreatePolicyVersionInput) (*iam.CreatePolicyVersionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.CreatePolicyVersionInput) *iam.CreatePolicyVersionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreatePolicyVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.CreatePolicyVersionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_CreatePolicyVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePolicyVersion'
type MockIAMAPI_CreatePolicyVersion_Call struct {
	*mock.Call
}

// CreatePolicyVersion is a helper method to define mock.On call
//   - _a0 *iam.CreatePolicyVersionInput
func (_e *MockIAMAPI_Expecter) CreatePolicyVersion(_a0 interface{}) *MockIAMAPI_CreatePolicyVersion_Call {
	return &MockIAMAPI_CreatePolicyVersion_Call{Call: _e.mock.On("CreatePolicyVersion", _a0)}
}

func (_c *MockIAMAPI_CreatePolicyVersion_Call) Run(run func(_a0 *iam.CreatePolicyVersionInput)) *MockIAMAPI_CreatePolicyVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.CreatePolicyVersionInput))
	})
	return _c
}

func (_c *MockIAMAPI_CreatePolicyVersion_Call) Return(_a0 *iam.CreatePolicyVersionOutput, _a1 error) *MockIAMAPI_CreatePolicyVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreatePolicyVersion_Call) RunAndReturn(run func(*iam.CreatePolicyVersionInput) (*iam.CreatePolicyVersionOutput, error)) *MockIAMAPI_CreatePolicyVersion_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePolicyVersionRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) CreatePolicyVersionRequest(_a0 *iam.CreatePolicyVersionInput) (*request.Request, *iam.CreatePolicyVersionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.CreatePolicyVersionOutput
	if rf, ok := ret.Get(0).(func(*iam.CreatePolicyVersionInput) (*request.Request, *iam.CreatePolicyVersionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.CreatePolicyVersionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.CreatePolicyVersionInput) *iam.CreatePolicyVersionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.CreatePolicyVersionOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_CreatePolicyVersionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePolicyVersionRequest'
type MockIAMAPI_CreatePolicyVersionRequest_Call struct {
	*mock.Call
}

// CreatePolicyVersionRequest is a helper method to define mock.On call
//   - _a0 *iam.CreatePolicyVersionInput
func (_e *MockIAMAPI_Expecter) CreatePolicyVersionRequest(_a0 interface{}) *MockIAMAPI_CreatePolicyVersionRequest_Call {
	return &MockIAMAPI_CreatePolicyVersionRequest_Call{Call: _e.mock.On("CreatePolicyVersionRequest", _a0)}
}

func (_c *MockIAMAPI_CreatePolicyVersionRequest_Call) Run(run func(_a0 *iam.CreatePolicyVersionInput)) *MockIAMAPI_CreatePolicyVersionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.CreatePolicyVersionInput))
	})
	return _c
}

func (_c *MockIAMAPI_CreatePolicyVersionRequest_Call) Return(_a0 *request.Request, _a1 *iam.CreatePolicyVersionOutput) *MockIAMAPI_CreatePolicyVersionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreatePolicyVersionRequest_Call) RunAndReturn(run func(*iam.CreatePolicyVersionInput) (*request.Request, *iam.CreatePolicyVersionOutput)) *MockIAMAPI_CreatePolicyVersionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePolicyVersionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) CreatePolicyVersionWithContext(_a0 context.Context, _a1 *iam.CreatePolicyVersionInput, _a2 ...request.Option) (*iam.CreatePolicyVersionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.CreatePolicyVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.CreatePolicyVersionInput, ...request.Option) (*iam.CreatePolicyVersionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.CreatePolicyVersionInput, ...request.Option) *iam.CreatePolicyVersionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreatePolicyVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.CreatePolicyVersionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_CreatePolicyVersionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePolicyVersionWithContext'
type MockIAMAPI_CreatePolicyVersionWithContext_Call struct {
	*mock.Call
}

// CreatePolicyVersionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.CreatePolicyVersionInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) CreatePolicyVersionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_CreatePolicyVersionWithContext_Call {
	return &MockIAMAPI_CreatePolicyVersionWithContext_Call{Call: _e.mock.On("CreatePolicyVersionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_CreatePolicyVersionWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.CreatePolicyVersionInput, _a2 ...request.Option)) *MockIAMAPI_CreatePolicyVersionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.CreatePolicyVersionInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_CreatePolicyVersionWithContext_Call) Return(_a0 *iam.CreatePolicyVersionOutput, _a1 error) *MockIAMAPI_CreatePolicyVersionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreatePolicyVersionWithContext_Call) RunAndReturn(run func(context.Context, *iam.CreatePolicyVersionInput, ...request.Option) (*iam.CreatePolicyVersionOutput, error)) *MockIAMAPI_CreatePolicyVersionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) CreatePolicyWithContext(_a0 context.Context, _a1 *iam.CreatePolicyInput, _a2 ...request.Option) (*iam.CreatePolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.CreatePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.CreatePolicyInput, ...request.Option) (*iam.CreatePolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.CreatePolicyInput, ...request.Option) *iam.CreatePolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreatePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.CreatePolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_CreatePolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePolicyWithContext'
type MockIAMAPI_CreatePolicyWithContext_Call struct {
	*mock.Call
}

// CreatePolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.CreatePolicyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) CreatePolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_CreatePolicyWithContext_Call {
	return &MockIAMAPI_CreatePolicyWithContext_Call{Call: _e.mock.On("CreatePolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_CreatePolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.CreatePolicyInput, _a2 ...request.Option)) *MockIAMAPI_CreatePolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.CreatePolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_CreatePolicyWithContext_Call) Return(_a0 *iam.CreatePolicyOutput, _a1 error) *MockIAMAPI_CreatePolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreatePolicyWithContext_Call) RunAndReturn(run func(context.Context, *iam.CreatePolicyInput, ...request.Option) (*iam.CreatePolicyOutput, error)) *MockIAMAPI_CreatePolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRole provides a mock function with given fields: _a0
func (_m *MockIAMAPI) CreateRole(_a0 *iam.CreateRoleInput) (*iam.CreateRoleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.CreateRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.CreateRoleInput) (*iam.CreateRoleOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.CreateRoleInput) *iam.CreateRoleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.CreateRoleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_CreateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRole'
type MockIAMAPI_CreateRole_Call struct {
	*mock.Call
}

// CreateRole is a helper method to define mock.On call
//   - _a0 *iam.CreateRoleInput
func (_e *MockIAMAPI_Expecter) CreateRole(_a0 interface{}) *MockIAMAPI_CreateRole_Call {
	return &MockIAMAPI_CreateRole_Call{Call: _e.mock.On("CreateRole", _a0)}
}

func (_c *MockIAMAPI_CreateRole_Call) Run(run func(_a0 *iam.CreateRoleInput)) *MockIAMAPI_CreateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.CreateRoleInput))
	})
	return _c
}

func (_c *MockIAMAPI_CreateRole_Call) Return(_a0 *iam.CreateRoleOutput, _a1 error) *MockIAMAPI_CreateRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateRole_Call) RunAndReturn(run func(*iam.CreateRoleInput) (*iam.CreateRoleOutput, error)) *MockIAMAPI_CreateRole_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRoleRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) CreateRoleRequest(_a0 *iam.CreateRoleInput) (*request.Request, *iam.CreateRoleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.CreateRoleOutput
	if rf, ok := ret.Get(0).(func(*iam.CreateRoleInput) (*request.Request, *iam.CreateRoleOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.CreateRoleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.CreateRoleInput) *iam.CreateRoleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.CreateRoleOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_CreateRoleRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRoleRequest'
type MockIAMAPI_CreateRoleRequest_Call struct {
	*mock.Call
}

// CreateRoleRequest is a helper method to define mock.On call
//   - _a0 *iam.CreateRoleInput
func (_e *MockIAMAPI_Expecter) CreateRoleRequest(_a0 interface{}) *MockIAMAPI_CreateRoleRequest_Call {
	return &MockIAMAPI_CreateRoleRequest_Call{Call: _e.mock.On("CreateRoleRequest", _a0)}
}

func (_c *MockIAMAPI_CreateRoleRequest_Call) Run(run func(_a0 *iam.CreateRoleInput)) *MockIAMAPI_CreateRoleRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.CreateRoleInput))
	})
	return _c
}

func (_c *MockIAMAPI_CreateRoleRequest_Call) Return(_a0 *request.Request, _a1 *iam.CreateRoleOutput) *MockIAMAPI_CreateRoleRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateRoleRequest_Call) RunAndReturn(run func(*iam.CreateRoleInput) (*request.Request, *iam.CreateRoleOutput)) *MockIAMAPI_CreateRoleRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRoleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) CreateRoleWithContext(_a0 context.Context, _a1 *iam.CreateRoleInput, _a2 ...request.Option) (*iam.CreateRoleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.CreateRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.CreateRoleInput, ...request.Option) (*iam.CreateRoleOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.CreateRoleInput, ...request.Option) *iam.CreateRoleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.CreateRoleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_CreateRoleWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRoleWithContext'
type MockIAMAPI_CreateRoleWithContext_Call struct {
	*mock.Call
}

// CreateRoleWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.CreateRoleInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) CreateRoleWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_CreateRoleWithContext_Call {
	return &MockIAMAPI_CreateRoleWithContext_Call{Call: _e.mock.On("CreateRoleWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_CreateRoleWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.CreateRoleInput, _a2 ...request.Option)) *MockIAMAPI_CreateRoleWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.CreateRoleInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_CreateRoleWithContext_Call) Return(_a0 *iam.CreateRoleOutput, _a1 error) *MockIAMAPI_CreateRoleWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateRoleWithContext_Call) RunAndReturn(run func(context.Context, *iam.CreateRoleInput, ...request.Option) (*iam.CreateRoleOutput, error)) *MockIAMAPI_CreateRoleWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSAMLProvider provides a mock function with given fields: _a0
func (_m *MockIAMAPI) CreateSAMLProvider(_a0 *iam.CreateSAMLProviderInput) (*iam.CreateSAMLProviderOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.CreateSAMLProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.CreateSAMLProviderInput) (*iam.CreateSAMLProviderOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.CreateSAMLProviderInput) *iam.CreateSAMLProviderOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateSAMLProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.CreateSAMLProviderInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_CreateSAMLProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSAMLProvider'
type MockIAMAPI_CreateSAMLProvider_Call struct {
	*mock.Call
}

// CreateSAMLProvider is a helper method to define mock.On call
//   - _a0 *iam.CreateSAMLProviderInput
func (_e *MockIAMAPI_Expecter) CreateSAMLProvider(_a0 interface{}) *MockIAMAPI_CreateSAMLProvider_Call {
	return &MockIAMAPI_CreateSAMLProvider_Call{Call: _e.mock.On("CreateSAMLProvider", _a0)}
}

func (_c *MockIAMAPI_CreateSAMLProvider_Call) Run(run func(_a0 *iam.CreateSAMLProviderInput)) *MockIAMAPI_CreateSAMLProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.CreateSAMLProviderInput))
	})
	return _c
}

func (_c *MockIAMAPI_CreateSAMLProvider_Call) Return(_a0 *iam.CreateSAMLProviderOutput, _a1 error) *MockIAMAPI_CreateSAMLProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateSAMLProvider_Call) RunAndReturn(run func(*iam.CreateSAMLProviderInput) (*iam.CreateSAMLProviderOutput, error)) *MockIAMAPI_CreateSAMLProvider_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSAMLProviderRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) CreateSAMLProviderRequest(_a0 *iam.CreateSAMLProviderInput) (*request.Request, *iam.CreateSAMLProviderOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.CreateSAMLProviderOutput
	if rf, ok := ret.Get(0).(func(*iam.CreateSAMLProviderInput) (*request.Request, *iam.CreateSAMLProviderOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.CreateSAMLProviderInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.CreateSAMLProviderInput) *iam.CreateSAMLProviderOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.CreateSAMLProviderOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_CreateSAMLProviderRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSAMLProviderRequest'
type MockIAMAPI_CreateSAMLProviderRequest_Call struct {
	*mock.Call
}

// CreateSAMLProviderRequest is a helper method to define mock.On call
//   - _a0 *iam.CreateSAMLProviderInput
func (_e *MockIAMAPI_Expecter) CreateSAMLProviderRequest(_a0 interface{}) *MockIAMAPI_CreateSAMLProviderRequest_Call {
	return &MockIAMAPI_CreateSAMLProviderRequest_Call{Call: _e.mock.On("CreateSAMLProviderRequest", _a0)}
}

func (_c *MockIAMAPI_CreateSAMLProviderRequest_Call) Run(run func(_a0 *iam.CreateSAMLProviderInput)) *MockIAMAPI_CreateSAMLProviderRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.CreateSAMLProviderInput))
	})
	return _c
}

func (_c *MockIAMAPI_CreateSAMLProviderRequest_Call) Return(_a0 *request.Request, _a1 *iam.CreateSAMLProviderOutput) *MockIAMAPI_CreateSAMLProviderRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateSAMLProviderRequest_Call) RunAndReturn(run func(*iam.CreateSAMLProviderInput) (*request.Request, *iam.CreateSAMLProviderOutput)) *MockIAMAPI_CreateSAMLProviderRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSAMLProviderWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) CreateSAMLProviderWithContext(_a0 context.Context, _a1 *iam.CreateSAMLProviderInput, _a2 ...request.Option) (*iam.CreateSAMLProviderOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.CreateSAMLProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.CreateSAMLProviderInput, ...request.Option) (*iam.CreateSAMLProviderOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.CreateSAMLProviderInput, ...request.Option) *iam.CreateSAMLProviderOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateSAMLProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.CreateSAMLProviderInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_CreateSAMLProviderWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSAMLProviderWithContext'
type MockIAMAPI_CreateSAMLProviderWithContext_Call struct {
	*mock.Call
}

// CreateSAMLProviderWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.CreateSAMLProviderInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) CreateSAMLProviderWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_CreateSAMLProviderWithContext_Call {
	return &MockIAMAPI_CreateSAMLProviderWithContext_Call{Call: _e.mock.On("CreateSAMLProviderWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_CreateSAMLProviderWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.CreateSAMLProviderInput, _a2 ...request.Option)) *MockIAMAPI_CreateSAMLProviderWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.CreateSAMLProviderInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_CreateSAMLProviderWithContext_Call) Return(_a0 *iam.CreateSAMLProviderOutput, _a1 error) *MockIAMAPI_CreateSAMLProviderWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateSAMLProviderWithContext_Call) RunAndReturn(run func(context.Context, *iam.CreateSAMLProviderInput, ...request.Option) (*iam.CreateSAMLProviderOutput, error)) *MockIAMAPI_CreateSAMLProviderWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceLinkedRole provides a mock function with given fields: _a0
func (_m *MockIAMAPI) CreateServiceLinkedRole(_a0 *iam.CreateServiceLinkedRoleInput) (*iam.CreateServiceLinkedRoleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.CreateServiceLinkedRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.CreateServiceLinkedRoleInput) (*iam.CreateServiceLinkedRoleOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.CreateServiceLinkedRoleInput) *iam.CreateServiceLinkedRoleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateServiceLinkedRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.CreateServiceLinkedRoleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_CreateServiceLinkedRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceLinkedRole'
type MockIAMAPI_CreateServiceLinkedRole_Call struct {
	*mock.Call
}

// CreateServiceLinkedRole is a helper method to define mock.On call
//   - _a0 *iam.CreateServiceLinkedRoleInput
func (_e *MockIAMAPI_Expecter) CreateServiceLinkedRole(_a0 interface{}) *MockIAMAPI_CreateServiceLinkedRole_Call {
	return &MockIAMAPI_CreateServiceLinkedRole_Call{Call: _e.mock.On("CreateServiceLinkedRole", _a0)}
}

func (_c *MockIAMAPI_CreateServiceLinkedRole_Call) Run(run func(_a0 *iam.CreateServiceLinkedRoleInput)) *MockIAMAPI_CreateServiceLinkedRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.CreateServiceLinkedRoleInput))
	})
	return _c
}

func (_c *MockIAMAPI_CreateServiceLinkedRole_Call) Return(_a0 *iam.CreateServiceLinkedRoleOutput, _a1 error) *MockIAMAPI_CreateServiceLinkedRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateServiceLinkedRole_Call) RunAndReturn(run func(*iam.CreateServiceLinkedRoleInput) (*iam.CreateServiceLinkedRoleOutput, error)) *MockIAMAPI_CreateServiceLinkedRole_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceLinkedRoleRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) CreateServiceLinkedRoleRequest(_a0 *iam.CreateServiceLinkedRoleInput) (*request.Request, *iam.CreateServiceLinkedRoleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.CreateServiceLinkedRoleOutput
	if rf, ok := ret.Get(0).(func(*iam.CreateServiceLinkedRoleInput) (*request.Request, *iam.CreateServiceLinkedRoleOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.CreateServiceLinkedRoleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.CreateServiceLinkedRoleInput) *iam.CreateServiceLinkedRoleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.CreateServiceLinkedRoleOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_CreateServiceLinkedRoleRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceLinkedRoleRequest'
type MockIAMAPI_CreateServiceLinkedRoleRequest_Call struct {
	*mock.Call
}

// CreateServiceLinkedRoleRequest is a helper method to define mock.On call
//   - _a0 *iam.CreateServiceLinkedRoleInput
func (_e *MockIAMAPI_Expecter) CreateServiceLinkedRoleRequest(_a0 interface{}) *MockIAMAPI_CreateServiceLinkedRoleRequest_Call {
	return &MockIAMAPI_CreateServiceLinkedRoleRequest_Call{Call: _e.mock.On("CreateServiceLinkedRoleRequest", _a0)}
}

func (_c *MockIAMAPI_CreateServiceLinkedRoleRequest_Call) Run(run func(_a0 *iam.CreateServiceLinkedRoleInput)) *MockIAMAPI_CreateServiceLinkedRoleRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.CreateServiceLinkedRoleInput))
	})
	return _c
}

func (_c *MockIAMAPI_CreateServiceLinkedRoleRequest_Call) Return(_a0 *request.Request, _a1 *iam.CreateServiceLinkedRoleOutput) *MockIAMAPI_CreateServiceLinkedRoleRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateServiceLinkedRoleRequest_Call) RunAndReturn(run func(*iam.CreateServiceLinkedRoleInput) (*request.Request, *iam.CreateServiceLinkedRoleOutput)) *MockIAMAPI_CreateServiceLinkedRoleRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceLinkedRoleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) CreateServiceLinkedRoleWithContext(_a0 context.Context, _a1 *iam.CreateServiceLinkedRoleInput, _a2 ...request.Option) (*iam.CreateServiceLinkedRoleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.CreateServiceLinkedRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.CreateServiceLinkedRoleInput, ...request.Option) (*iam.CreateServiceLinkedRoleOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.CreateServiceLinkedRoleInput, ...request.Option) *iam.CreateServiceLinkedRoleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateServiceLinkedRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.CreateServiceLinkedRoleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_CreateServiceLinkedRoleWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceLinkedRoleWithContext'
type MockIAMAPI_CreateServiceLinkedRoleWithContext_Call struct {
	*mock.Call
}

// CreateServiceLinkedRoleWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.CreateServiceLinkedRoleInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) CreateServiceLinkedRoleWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_CreateServiceLinkedRoleWithContext_Call {
	return &MockIAMAPI_CreateServiceLinkedRoleWithContext_Call{Call: _e.mock.On("CreateServiceLinkedRoleWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_CreateServiceLinkedRoleWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.CreateServiceLinkedRoleInput, _a2 ...request.Option)) *MockIAMAPI_CreateServiceLinkedRoleWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.CreateServiceLinkedRoleInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_CreateServiceLinkedRoleWithContext_Call) Return(_a0 *iam.CreateServiceLinkedRoleOutput, _a1 error) *MockIAMAPI_CreateServiceLinkedRoleWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateServiceLinkedRoleWithContext_Call) RunAndReturn(run func(context.Context, *iam.CreateServiceLinkedRoleInput, ...request.Option) (*iam.CreateServiceLinkedRoleOutput, error)) *MockIAMAPI_CreateServiceLinkedRoleWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceSpecificCredential provides a mock function with given fields: _a0
func (_m *MockIAMAPI) CreateServiceSpecificCredential(_a0 *iam.CreateServiceSpecificCredentialInput) (*iam.CreateServiceSpecificCredentialOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.CreateServiceSpecificCredentialOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.CreateServiceSpecificCredentialInput) (*iam.CreateServiceSpecificCredentialOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.CreateServiceSpecificCredentialInput) *iam.CreateServiceSpecificCredentialOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateServiceSpecificCredentialOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.CreateServiceSpecificCredentialInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_CreateServiceSpecificCredential_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceSpecificCredential'
type MockIAMAPI_CreateServiceSpecificCredential_Call struct {
	*mock.Call
}

// CreateServiceSpecificCredential is a helper method to define mock.On call
//   - _a0 *iam.CreateServiceSpecificCredentialInput
func (_e *MockIAMAPI_Expecter) CreateServiceSpecificCredential(_a0 interface{}) *MockIAMAPI_CreateServiceSpecificCredential_Call {
	return &MockIAMAPI_CreateServiceSpecificCredential_Call{Call: _e.mock.On("CreateServiceSpecificCredential", _a0)}
}

func (_c *MockIAMAPI_CreateServiceSpecificCredential_Call) Run(run func(_a0 *iam.CreateServiceSpecificCredentialInput)) *MockIAMAPI_CreateServiceSpecificCredential_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.CreateServiceSpecificCredentialInput))
	})
	return _c
}

func (_c *MockIAMAPI_CreateServiceSpecificCredential_Call) Return(_a0 *iam.CreateServiceSpecificCredentialOutput, _a1 error) *MockIAMAPI_CreateServiceSpecificCredential_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateServiceSpecificCredential_Call) RunAndReturn(run func(*iam.CreateServiceSpecificCredentialInput) (*iam.CreateServiceSpecificCredentialOutput, error)) *MockIAMAPI_CreateServiceSpecificCredential_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceSpecificCredentialRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) CreateServiceSpecificCredentialRequest(_a0 *iam.CreateServiceSpecificCredentialInput) (*request.Request, *iam.CreateServiceSpecificCredentialOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.CreateServiceSpecificCredentialOutput
	if rf, ok := ret.Get(0).(func(*iam.CreateServiceSpecificCredentialInput) (*request.Request, *iam.CreateServiceSpecificCredentialOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.CreateServiceSpecificCredentialInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.CreateServiceSpecificCredentialInput) *iam.CreateServiceSpecificCredentialOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.CreateServiceSpecificCredentialOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_CreateServiceSpecificCredentialRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceSpecificCredentialRequest'
type MockIAMAPI_CreateServiceSpecificCredentialRequest_Call struct {
	*mock.Call
}

// CreateServiceSpecificCredentialRequest is a helper method to define mock.On call
//   - _a0 *iam.CreateServiceSpecificCredentialInput
func (_e *MockIAMAPI_Expecter) CreateServiceSpecificCredentialRequest(_a0 interface{}) *MockIAMAPI_CreateServiceSpecificCredentialRequest_Call {
	return &MockIAMAPI_CreateServiceSpecificCredentialRequest_Call{Call: _e.mock.On("CreateServiceSpecificCredentialRequest", _a0)}
}

func (_c *MockIAMAPI_CreateServiceSpecificCredentialRequest_Call) Run(run func(_a0 *iam.CreateServiceSpecificCredentialInput)) *MockIAMAPI_CreateServiceSpecificCredentialRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.CreateServiceSpecificCredentialInput))
	})
	return _c
}

func (_c *MockIAMAPI_CreateServiceSpecificCredentialRequest_Call) Return(_a0 *request.Request, _a1 *iam.CreateServiceSpecificCredentialOutput) *MockIAMAPI_CreateServiceSpecificCredentialRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateServiceSpecificCredentialRequest_Call) RunAndReturn(run func(*iam.CreateServiceSpecificCredentialInput) (*request.Request, *iam.CreateServiceSpecificCredentialOutput)) *MockIAMAPI_CreateServiceSpecificCredentialRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceSpecificCredentialWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) CreateServiceSpecificCredentialWithContext(_a0 context.Context, _a1 *iam.CreateServiceSpecificCredentialInput, _a2 ...request.Option) (*iam.CreateServiceSpecificCredentialOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.CreateServiceSpecificCredentialOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.CreateServiceSpecificCredentialInput, ...request.Option) (*iam.CreateServiceSpecificCredentialOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.CreateServiceSpecificCredentialInput, ...request.Option) *iam.CreateServiceSpecificCredentialOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateServiceSpecificCredentialOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.CreateServiceSpecificCredentialInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_CreateServiceSpecificCredentialWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceSpecificCredentialWithContext'
type MockIAMAPI_CreateServiceSpecificCredentialWithContext_Call struct {
	*mock.Call
}

// CreateServiceSpecificCredentialWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.CreateServiceSpecificCredentialInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) CreateServiceSpecificCredentialWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_CreateServiceSpecificCredentialWithContext_Call {
	return &MockIAMAPI_CreateServiceSpecificCredentialWithContext_Call{Call: _e.mock.On("CreateServiceSpecificCredentialWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_CreateServiceSpecificCredentialWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.CreateServiceSpecificCredentialInput, _a2 ...request.Option)) *MockIAMAPI_CreateServiceSpecificCredentialWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.CreateServiceSpecificCredentialInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_CreateServiceSpecificCredentialWithContext_Call) Return(_a0 *iam.CreateServiceSpecificCredentialOutput, _a1 error) *MockIAMAPI_CreateServiceSpecificCredentialWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateServiceSpecificCredentialWithContext_Call) RunAndReturn(run func(context.Context, *iam.CreateServiceSpecificCredentialInput, ...request.Option) (*iam.CreateServiceSpecificCredentialOutput, error)) *MockIAMAPI_CreateServiceSpecificCredentialWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: _a0
func (_m *MockIAMAPI) CreateUser(_a0 *iam.CreateUserInput) (*iam.CreateUserOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.CreateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.CreateUserInput) (*iam.CreateUserOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.CreateUserInput) *iam.CreateUserOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.CreateUserInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockIAMAPI_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - _a0 *iam.CreateUserInput
func (_e *MockIAMAPI_Expecter) CreateUser(_a0 interface{}) *MockIAMAPI_CreateUser_Call {
	return &MockIAMAPI_CreateUser_Call{Call: _e.mock.On("CreateUser", _a0)}
}

func (_c *MockIAMAPI_CreateUser_Call) Run(run func(_a0 *iam.CreateUserInput)) *MockIAMAPI_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.CreateUserInput))
	})
	return _c
}

func (_c *MockIAMAPI_CreateUser_Call) Return(_a0 *iam.CreateUserOutput, _a1 error) *MockIAMAPI_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateUser_Call) RunAndReturn(run func(*iam.CreateUserInput) (*iam.CreateUserOutput, error)) *MockIAMAPI_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUserRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) CreateUserRequest(_a0 *iam.CreateUserInput) (*request.Request, *iam.CreateUserOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.CreateUserOutput
	if rf, ok := ret.Get(0).(func(*iam.CreateUserInput) (*request.Request, *iam.CreateUserOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.CreateUserInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.CreateUserInput) *iam.CreateUserOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.CreateUserOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_CreateUserRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserRequest'
type MockIAMAPI_CreateUserRequest_Call struct {
	*mock.Call
}

// CreateUserRequest is a helper method to define mock.On call
//   - _a0 *iam.CreateUserInput
func (_e *MockIAMAPI_Expecter) CreateUserRequest(_a0 interface{}) *MockIAMAPI_CreateUserRequest_Call {
	return &MockIAMAPI_CreateUserRequest_Call{Call: _e.mock.On("CreateUserRequest", _a0)}
}

func (_c *MockIAMAPI_CreateUserRequest_Call) Run(run func(_a0 *iam.CreateUserInput)) *MockIAMAPI_CreateUserRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.CreateUserInput))
	})
	return _c
}

func (_c *MockIAMAPI_CreateUserRequest_Call) Return(_a0 *request.Request, _a1 *iam.CreateUserOutput) *MockIAMAPI_CreateUserRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateUserRequest_Call) RunAndReturn(run func(*iam.CreateUserInput) (*request.Request, *iam.CreateUserOutput)) *MockIAMAPI_CreateUserRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUserWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) CreateUserWithContext(_a0 context.Context, _a1 *iam.CreateUserInput, _a2 ...request.Option) (*iam.CreateUserOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.CreateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.CreateUserInput, ...request.Option) (*iam.CreateUserOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.CreateUserInput, ...request.Option) *iam.CreateUserOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.CreateUserInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_CreateUserWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserWithContext'
type MockIAMAPI_CreateUserWithContext_Call struct {
	*mock.Call
}

// CreateUserWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.CreateUserInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) CreateUserWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_CreateUserWithContext_Call {
	return &MockIAMAPI_CreateUserWithContext_Call{Call: _e.mock.On("CreateUserWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_CreateUserWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.CreateUserInput, _a2 ...request.Option)) *MockIAMAPI_CreateUserWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.CreateUserInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_CreateUserWithContext_Call) Return(_a0 *iam.CreateUserOutput, _a1 error) *MockIAMAPI_CreateUserWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateUserWithContext_Call) RunAndReturn(run func(context.Context, *iam.CreateUserInput, ...request.Option) (*iam.CreateUserOutput, error)) *MockIAMAPI_CreateUserWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVirtualMFADevice provides a mock function with given fields: _a0
func (_m *MockIAMAPI) CreateVirtualMFADevice(_a0 *iam.CreateVirtualMFADeviceInput) (*iam.CreateVirtualMFADeviceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.CreateVirtualMFADeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.CreateVirtualMFADeviceInput) (*iam.CreateVirtualMFADeviceOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.CreateVirtualMFADeviceInput) *iam.CreateVirtualMFADeviceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateVirtualMFADeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.CreateVirtualMFADeviceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_CreateVirtualMFADevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVirtualMFADevice'
type MockIAMAPI_CreateVirtualMFADevice_Call struct {
	*mock.Call
}

// CreateVirtualMFADevice is a helper method to define mock.On call
//   - _a0 *iam.CreateVirtualMFADeviceInput
func (_e *MockIAMAPI_Expecter) CreateVirtualMFADevice(_a0 interface{}) *MockIAMAPI_CreateVirtualMFADevice_Call {
	return &MockIAMAPI_CreateVirtualMFADevice_Call{Call: _e.mock.On("CreateVirtualMFADevice", _a0)}
}

func (_c *MockIAMAPI_CreateVirtualMFADevice_Call) Run(run func(_a0 *iam.CreateVirtualMFADeviceInput)) *MockIAMAPI_CreateVirtualMFADevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.CreateVirtualMFADeviceInput))
	})
	return _c
}

func (_c *MockIAMAPI_CreateVirtualMFADevice_Call) Return(_a0 *iam.CreateVirtualMFADeviceOutput, _a1 error) *MockIAMAPI_CreateVirtualMFADevice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateVirtualMFADevice_Call) RunAndReturn(run func(*iam.CreateVirtualMFADeviceInput) (*iam.CreateVirtualMFADeviceOutput, error)) *MockIAMAPI_CreateVirtualMFADevice_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVirtualMFADeviceRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) CreateVirtualMFADeviceRequest(_a0 *iam.CreateVirtualMFADeviceInput) (*request.Request, *iam.CreateVirtualMFADeviceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.CreateVirtualMFADeviceOutput
	if rf, ok := ret.Get(0).(func(*iam.CreateVirtualMFADeviceInput) (*request.Request, *iam.CreateVirtualMFADeviceOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.CreateVirtualMFADeviceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.CreateVirtualMFADeviceInput) *iam.CreateVirtualMFADeviceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.CreateVirtualMFADeviceOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_CreateVirtualMFADeviceRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVirtualMFADeviceRequest'
type MockIAMAPI_CreateVirtualMFADeviceRequest_Call struct {
	*mock.Call
}

// CreateVirtualMFADeviceRequest is a helper method to define mock.On call
//   - _a0 *iam.CreateVirtualMFADeviceInput
func (_e *MockIAMAPI_Expecter) CreateVirtualMFADeviceRequest(_a0 interface{}) *MockIAMAPI_CreateVirtualMFADeviceRequest_Call {
	return &MockIAMAPI_CreateVirtualMFADeviceRequest_Call{Call: _e.mock.On("CreateVirtualMFADeviceRequest", _a0)}
}

func (_c *MockIAMAPI_CreateVirtualMFADeviceRequest_Call) Run(run func(_a0 *iam.CreateVirtualMFADeviceInput)) *MockIAMAPI_CreateVirtualMFADeviceRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.CreateVirtualMFADeviceInput))
	})
	return _c
}

func (_c *MockIAMAPI_CreateVirtualMFADeviceRequest_Call) Return(_a0 *request.Request, _a1 *iam.CreateVirtualMFADeviceOutput) *MockIAMAPI_CreateVirtualMFADeviceRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateVirtualMFADeviceRequest_Call) RunAndReturn(run func(*iam.CreateVirtualMFADeviceInput) (*request.Request, *iam.CreateVirtualMFADeviceOutput)) *MockIAMAPI_CreateVirtualMFADeviceRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVirtualMFADeviceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) CreateVirtualMFADeviceWithContext(_a0 context.Context, _a1 *iam.CreateVirtualMFADeviceInput, _a2 ...request.Option) (*iam.CreateVirtualMFADeviceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.CreateVirtualMFADeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.CreateVirtualMFADeviceInput, ...request.Option) (*iam.CreateVirtualMFADeviceOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.CreateVirtualMFADeviceInput, ...request.Option) *iam.CreateVirtualMFADeviceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.CreateVirtualMFADeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.CreateVirtualMFADeviceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_CreateVirtualMFADeviceWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVirtualMFADeviceWithContext'
type MockIAMAPI_CreateVirtualMFADeviceWithContext_Call struct {
	*mock.Call
}

// CreateVirtualMFADeviceWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.CreateVirtualMFADeviceInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) CreateVirtualMFADeviceWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_CreateVirtualMFADeviceWithContext_Call {
	return &MockIAMAPI_CreateVirtualMFADeviceWithContext_Call{Call: _e.mock.On("CreateVirtualMFADeviceWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_CreateVirtualMFADeviceWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.CreateVirtualMFADeviceInput, _a2 ...request.Option)) *MockIAMAPI_CreateVirtualMFADeviceWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.CreateVirtualMFADeviceInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_CreateVirtualMFADeviceWithContext_Call) Return(_a0 *iam.CreateVirtualMFADeviceOutput, _a1 error) *MockIAMAPI_CreateVirtualMFADeviceWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_CreateVirtualMFADeviceWithContext_Call) RunAndReturn(run func(context.Context, *iam.CreateVirtualMFADeviceInput, ...request.Option) (*iam.CreateVirtualMFADeviceOutput, error)) *MockIAMAPI_CreateVirtualMFADeviceWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeactivateMFADevice provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeactivateMFADevice(_a0 *iam.DeactivateMFADeviceInput) (*iam.DeactivateMFADeviceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DeactivateMFADeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.DeactivateMFADeviceInput) (*iam.DeactivateMFADeviceOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeactivateMFADeviceInput) *iam.DeactivateMFADeviceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeactivateMFADeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeactivateMFADeviceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeactivateMFADevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeactivateMFADevice'
type MockIAMAPI_DeactivateMFADevice_Call struct {
	*mock.Call
}

// DeactivateMFADevice is a helper method to define mock.On call
//   - _a0 *iam.DeactivateMFADeviceInput
func (_e *MockIAMAPI_Expecter) DeactivateMFADevice(_a0 interface{}) *MockIAMAPI_DeactivateMFADevice_Call {
	return &MockIAMAPI_DeactivateMFADevice_Call{Call: _e.mock.On("DeactivateMFADevice", _a0)}
}

func (_c *MockIAMAPI_DeactivateMFADevice_Call) Run(run func(_a0 *iam.DeactivateMFADeviceInput)) *MockIAMAPI_DeactivateMFADevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeactivateMFADeviceInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeactivateMFADevice_Call) Return(_a0 *iam.DeactivateMFADeviceOutput, _a1 error) *MockIAMAPI_DeactivateMFADevice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeactivateMFADevice_Call) RunAndReturn(run func(*iam.DeactivateMFADeviceInput) (*iam.DeactivateMFADeviceOutput, error)) *MockIAMAPI_DeactivateMFADevice_Call {
	_c.Call.Return(run)
	return _c
}

// DeactivateMFADeviceRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeactivateMFADeviceRequest(_a0 *iam.DeactivateMFADeviceInput) (*request.Request, *iam.DeactivateMFADeviceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.DeactivateMFADeviceOutput
	if rf, ok := ret.Get(0).(func(*iam.DeactivateMFADeviceInput) (*request.Request, *iam.DeactivateMFADeviceOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeactivateMFADeviceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeactivateMFADeviceInput) *iam.DeactivateMFADeviceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.DeactivateMFADeviceOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_DeactivateMFADeviceRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeactivateMFADeviceRequest'
type MockIAMAPI_DeactivateMFADeviceRequest_Call struct {
	*mock.Call
}

// DeactivateMFADeviceRequest is a helper method to define mock.On call
//   - _a0 *iam.DeactivateMFADeviceInput
func (_e *MockIAMAPI_Expecter) DeactivateMFADeviceRequest(_a0 interface{}) *MockIAMAPI_DeactivateMFADeviceRequest_Call {
	return &MockIAMAPI_DeactivateMFADeviceRequest_Call{Call: _e.mock.On("DeactivateMFADeviceRequest", _a0)}
}

func (_c *MockIAMAPI_DeactivateMFADeviceRequest_Call) Run(run func(_a0 *iam.DeactivateMFADeviceInput)) *MockIAMAPI_DeactivateMFADeviceRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeactivateMFADeviceInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeactivateMFADeviceRequest_Call) Return(_a0 *request.Request, _a1 *iam.DeactivateMFADeviceOutput) *MockIAMAPI_DeactivateMFADeviceRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeactivateMFADeviceRequest_Call) RunAndReturn(run func(*iam.DeactivateMFADeviceInput) (*request.Request, *iam.DeactivateMFADeviceOutput)) *MockIAMAPI_DeactivateMFADeviceRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeactivateMFADeviceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) DeactivateMFADeviceWithContext(_a0 context.Context, _a1 *iam.DeactivateMFADeviceInput, _a2 ...request.Option) (*iam.DeactivateMFADeviceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.DeactivateMFADeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeactivateMFADeviceInput, ...request.Option) (*iam.DeactivateMFADeviceOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeactivateMFADeviceInput, ...request.Option) *iam.DeactivateMFADeviceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeactivateMFADeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.DeactivateMFADeviceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeactivateMFADeviceWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeactivateMFADeviceWithContext'
type MockIAMAPI_DeactivateMFADeviceWithContext_Call struct {
	*mock.Call
}

// DeactivateMFADeviceWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.DeactivateMFADeviceInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) DeactivateMFADeviceWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_DeactivateMFADeviceWithContext_Call {
	return &MockIAMAPI_DeactivateMFADeviceWithContext_Call{Call: _e.mock.On("DeactivateMFADeviceWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_DeactivateMFADeviceWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.DeactivateMFADeviceInput, _a2 ...request.Option)) *MockIAMAPI_DeactivateMFADeviceWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.DeactivateMFADeviceInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_DeactivateMFADeviceWithContext_Call) Return(_a0 *iam.DeactivateMFADeviceOutput, _a1 error) *MockIAMAPI_DeactivateMFADeviceWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeactivateMFADeviceWithContext_Call) RunAndReturn(run func(context.Context, *iam.DeactivateMFADeviceInput, ...request.Option) (*iam.DeactivateMFADeviceOutput, error)) *MockIAMAPI_DeactivateMFADeviceWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccessKey provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteAccessKey(_a0 *iam.DeleteAccessKeyInput) (*iam.DeleteAccessKeyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DeleteAccessKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.DeleteAccessKeyInput) (*iam.DeleteAccessKeyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteAccessKeyInput) *iam.DeleteAccessKeyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteAccessKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteAccessKeyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteAccessKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccessKey'
type MockIAMAPI_DeleteAccessKey_Call struct {
	*mock.Call
}

// DeleteAccessKey is a helper method to define mock.On call
//   - _a0 *iam.DeleteAccessKeyInput
func (_e *MockIAMAPI_Expecter) DeleteAccessKey(_a0 interface{}) *MockIAMAPI_DeleteAccessKey_Call {
	return &MockIAMAPI_DeleteAccessKey_Call{Call: _e.mock.On("DeleteAccessKey", _a0)}
}

func (_c *MockIAMAPI_DeleteAccessKey_Call) Run(run func(_a0 *iam.DeleteAccessKeyInput)) *MockIAMAPI_DeleteAccessKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteAccessKeyInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteAccessKey_Call) Return(_a0 *iam.DeleteAccessKeyOutput, _a1 error) *MockIAMAPI_DeleteAccessKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteAccessKey_Call) RunAndReturn(run func(*iam.DeleteAccessKeyInput) (*iam.DeleteAccessKeyOutput, error)) *MockIAMAPI_DeleteAccessKey_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccessKeyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteAccessKeyRequest(_a0 *iam.DeleteAccessKeyInput) (*request.Request, *iam.DeleteAccessKeyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.DeleteAccessKeyOutput
	if rf, ok := ret.Get(0).(func(*iam.DeleteAccessKeyInput) (*request.Request, *iam.DeleteAccessKeyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteAccessKeyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteAccessKeyInput) *iam.DeleteAccessKeyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.DeleteAccessKeyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_DeleteAccessKeyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccessKeyRequest'
type MockIAMAPI_DeleteAccessKeyRequest_Call struct {
	*mock.Call
}

// DeleteAccessKeyRequest is a helper method to define mock.On call
//   - _a0 *iam.DeleteAccessKeyInput
func (_e *MockIAMAPI_Expecter) DeleteAccessKeyRequest(_a0 interface{}) *MockIAMAPI_DeleteAccessKeyRequest_Call {
	return &MockIAMAPI_DeleteAccessKeyRequest_Call{Call: _e.mock.On("DeleteAccessKeyRequest", _a0)}
}

func (_c *MockIAMAPI_DeleteAccessKeyRequest_Call) Run(run func(_a0 *iam.DeleteAccessKeyInput)) *MockIAMAPI_DeleteAccessKeyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteAccessKeyInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteAccessKeyRequest_Call) Return(_a0 *request.Request, _a1 *iam.DeleteAccessKeyOutput) *MockIAMAPI_DeleteAccessKeyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteAccessKeyRequest_Call) RunAndReturn(run func(*iam.DeleteAccessKeyInput) (*request.Request, *iam.DeleteAccessKeyOutput)) *MockIAMAPI_DeleteAccessKeyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccessKeyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) DeleteAccessKeyWithContext(_a0 context.Context, _a1 *iam.DeleteAccessKeyInput, _a2 ...request.Option) (*iam.DeleteAccessKeyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.DeleteAccessKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteAccessKeyInput, ...request.Option) (*iam.DeleteAccessKeyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteAccessKeyInput, ...request.Option) *iam.DeleteAccessKeyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteAccessKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.DeleteAccessKeyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteAccessKeyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccessKeyWithContext'
type MockIAMAPI_DeleteAccessKeyWithContext_Call struct {
	*mock.Call
}

// DeleteAccessKeyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.DeleteAccessKeyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) DeleteAccessKeyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_DeleteAccessKeyWithContext_Call {
	return &MockIAMAPI_DeleteAccessKeyWithContext_Call{Call: _e.mock.On("DeleteAccessKeyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_DeleteAccessKeyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.DeleteAccessKeyInput, _a2 ...request.Option)) *MockIAMAPI_DeleteAccessKeyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.DeleteAccessKeyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_DeleteAccessKeyWithContext_Call) Return(_a0 *iam.DeleteAccessKeyOutput, _a1 error) *MockIAMAPI_DeleteAccessKeyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteAccessKeyWithContext_Call) RunAndReturn(run func(context.Context, *iam.DeleteAccessKeyInput, ...request.Option) (*iam.DeleteAccessKeyOutput, error)) *MockIAMAPI_DeleteAccessKeyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccountAlias provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteAccountAlias(_a0 *iam.DeleteAccountAliasInput) (*iam.DeleteAccountAliasOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DeleteAccountAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.DeleteAccountAliasInput) (*iam.DeleteAccountAliasOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteAccountAliasInput) *iam.DeleteAccountAliasOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteAccountAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteAccountAliasInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteAccountAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccountAlias'
type MockIAMAPI_DeleteAccountAlias_Call struct {
	*mock.Call
}

// DeleteAccountAlias is a helper method to define mock.On call
//   - _a0 *iam.DeleteAccountAliasInput
func (_e *MockIAMAPI_Expecter) DeleteAccountAlias(_a0 interface{}) *MockIAMAPI_DeleteAccountAlias_Call {
	return &MockIAMAPI_DeleteAccountAlias_Call{Call: _e.mock.On("DeleteAccountAlias", _a0)}
}

func (_c *MockIAMAPI_DeleteAccountAlias_Call) Run(run func(_a0 *iam.DeleteAccountAliasInput)) *MockIAMAPI_DeleteAccountAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteAccountAliasInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteAccountAlias_Call) Return(_a0 *iam.DeleteAccountAliasOutput, _a1 error) *MockIAMAPI_DeleteAccountAlias_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteAccountAlias_Call) RunAndReturn(run func(*iam.DeleteAccountAliasInput) (*iam.DeleteAccountAliasOutput, error)) *MockIAMAPI_DeleteAccountAlias_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccountAliasRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteAccountAliasRequest(_a0 *iam.DeleteAccountAliasInput) (*request.Request, *iam.DeleteAccountAliasOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.DeleteAccountAliasOutput
	if rf, ok := ret.Get(0).(func(*iam.DeleteAccountAliasInput) (*request.Request, *iam.DeleteAccountAliasOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteAccountAliasInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteAccountAliasInput) *iam.DeleteAccountAliasOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.DeleteAccountAliasOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_DeleteAccountAliasRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccountAliasRequest'
type MockIAMAPI_DeleteAccountAliasRequest_Call struct {
	*mock.Call
}

// DeleteAccountAliasRequest is a helper method to define mock.On call
//   - _a0 *iam.DeleteAccountAliasInput
func (_e *MockIAMAPI_Expecter) DeleteAccountAliasRequest(_a0 interface{}) *MockIAMAPI_DeleteAccountAliasRequest_Call {
	return &MockIAMAPI_DeleteAccountAliasRequest_Call{Call: _e.mock.On("DeleteAccountAliasRequest", _a0)}
}

func (_c *MockIAMAPI_DeleteAccountAliasRequest_Call) Run(run func(_a0 *iam.DeleteAccountAliasInput)) *MockIAMAPI_DeleteAccountAliasRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteAccountAliasInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteAccountAliasRequest_Call) Return(_a0 *request.Request, _a1 *iam.DeleteAccountAliasOutput) *MockIAMAPI_DeleteAccountAliasRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteAccountAliasRequest_Call) RunAndReturn(run func(*iam.DeleteAccountAliasInput) (*request.Request, *iam.DeleteAccountAliasOutput)) *MockIAMAPI_DeleteAccountAliasRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccountAliasWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) DeleteAccountAliasWithContext(_a0 context.Context, _a1 *iam.DeleteAccountAliasInput, _a2 ...request.Option) (*iam.DeleteAccountAliasOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.DeleteAccountAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteAccountAliasInput, ...request.Option) (*iam.DeleteAccountAliasOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteAccountAliasInput, ...request.Option) *iam.DeleteAccountAliasOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteAccountAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.DeleteAccountAliasInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteAccountAliasWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccountAliasWithContext'
type MockIAMAPI_DeleteAccountAliasWithContext_Call struct {
	*mock.Call
}

// DeleteAccountAliasWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.DeleteAccountAliasInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) DeleteAccountAliasWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_DeleteAccountAliasWithContext_Call {
	return &MockIAMAPI_DeleteAccountAliasWithContext_Call{Call: _e.mock.On("DeleteAccountAliasWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_DeleteAccountAliasWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.DeleteAccountAliasInput, _a2 ...request.Option)) *MockIAMAPI_DeleteAccountAliasWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.DeleteAccountAliasInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_DeleteAccountAliasWithContext_Call) Return(_a0 *iam.DeleteAccountAliasOutput, _a1 error) *MockIAMAPI_DeleteAccountAliasWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteAccountAliasWithContext_Call) RunAndReturn(run func(context.Context, *iam.DeleteAccountAliasInput, ...request.Option) (*iam.DeleteAccountAliasOutput, error)) *MockIAMAPI_DeleteAccountAliasWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccountPasswordPolicy provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteAccountPasswordPolicy(_a0 *iam.DeleteAccountPasswordPolicyInput) (*iam.DeleteAccountPasswordPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DeleteAccountPasswordPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.DeleteAccountPasswordPolicyInput) (*iam.DeleteAccountPasswordPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteAccountPasswordPolicyInput) *iam.DeleteAccountPasswordPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteAccountPasswordPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteAccountPasswordPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteAccountPasswordPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccountPasswordPolicy'
type MockIAMAPI_DeleteAccountPasswordPolicy_Call struct {
	*mock.Call
}

// DeleteAccountPasswordPolicy is a helper method to define mock.On call
//   - _a0 *iam.DeleteAccountPasswordPolicyInput
func (_e *MockIAMAPI_Expecter) DeleteAccountPasswordPolicy(_a0 interface{}) *MockIAMAPI_DeleteAccountPasswordPolicy_Call {
	return &MockIAMAPI_DeleteAccountPasswordPolicy_Call{Call: _e.mock.On("DeleteAccountPasswordPolicy", _a0)}
}

func (_c *MockIAMAPI_DeleteAccountPasswordPolicy_Call) Run(run func(_a0 *iam.DeleteAccountPasswordPolicyInput)) *MockIAMAPI_DeleteAccountPasswordPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteAccountPasswordPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteAccountPasswordPolicy_Call) Return(_a0 *iam.DeleteAccountPasswordPolicyOutput, _a1 error) *MockIAMAPI_DeleteAccountPasswordPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteAccountPasswordPolicy_Call) RunAndReturn(run func(*iam.DeleteAccountPasswordPolicyInput) (*iam.DeleteAccountPasswordPolicyOutput, error)) *MockIAMAPI_DeleteAccountPasswordPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccountPasswordPolicyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteAccountPasswordPolicyRequest(_a0 *iam.DeleteAccountPasswordPolicyInput) (*request.Request, *iam.DeleteAccountPasswordPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.DeleteAccountPasswordPolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.DeleteAccountPasswordPolicyInput) (*request.Request, *iam.DeleteAccountPasswordPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteAccountPasswordPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteAccountPasswordPolicyInput) *iam.DeleteAccountPasswordPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.DeleteAccountPasswordPolicyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_DeleteAccountPasswordPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccountPasswordPolicyRequest'
type MockIAMAPI_DeleteAccountPasswordPolicyRequest_Call struct {
	*mock.Call
}

// DeleteAccountPasswordPolicyRequest is a helper method to define mock.On call
//   - _a0 *iam.DeleteAccountPasswordPolicyInput
func (_e *MockIAMAPI_Expecter) DeleteAccountPasswordPolicyRequest(_a0 interface{}) *MockIAMAPI_DeleteAccountPasswordPolicyRequest_Call {
	return &MockIAMAPI_DeleteAccountPasswordPolicyRequest_Call{Call: _e.mock.On("DeleteAccountPasswordPolicyRequest", _a0)}
}

func (_c *MockIAMAPI_DeleteAccountPasswordPolicyRequest_Call) Run(run func(_a0 *iam.DeleteAccountPasswordPolicyInput)) *MockIAMAPI_DeleteAccountPasswordPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteAccountPasswordPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteAccountPasswordPolicyRequest_Call) Return(_a0 *request.Request, _a1 *iam.DeleteAccountPasswordPolicyOutput) *MockIAMAPI_DeleteAccountPasswordPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteAccountPasswordPolicyRequest_Call) RunAndReturn(run func(*iam.DeleteAccountPasswordPolicyInput) (*request.Request, *iam.DeleteAccountPasswordPolicyOutput)) *MockIAMAPI_DeleteAccountPasswordPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccountPasswordPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) DeleteAccountPasswordPolicyWithContext(_a0 context.Context, _a1 *iam.DeleteAccountPasswordPolicyInput, _a2 ...request.Option) (*iam.DeleteAccountPasswordPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.DeleteAccountPasswordPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteAccountPasswordPolicyInput, ...request.Option) (*iam.DeleteAccountPasswordPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteAccountPasswordPolicyInput, ...request.Option) *iam.DeleteAccountPasswordPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteAccountPasswordPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.DeleteAccountPasswordPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteAccountPasswordPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccountPasswordPolicyWithContext'
type MockIAMAPI_DeleteAccountPasswordPolicyWithContext_Call struct {
	*mock.Call
}

// DeleteAccountPasswordPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.DeleteAccountPasswordPolicyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) DeleteAccountPasswordPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_DeleteAccountPasswordPolicyWithContext_Call {
	return &MockIAMAPI_DeleteAccountPasswordPolicyWithContext_Call{Call: _e.mock.On("DeleteAccountPasswordPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_DeleteAccountPasswordPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.DeleteAccountPasswordPolicyInput, _a2 ...request.Option)) *MockIAMAPI_DeleteAccountPasswordPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.DeleteAccountPasswordPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_DeleteAccountPasswordPolicyWithContext_Call) Return(_a0 *iam.DeleteAccountPasswordPolicyOutput, _a1 error) *MockIAMAPI_DeleteAccountPasswordPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteAccountPasswordPolicyWithContext_Call) RunAndReturn(run func(context.Context, *iam.DeleteAccountPasswordPolicyInput, ...request.Option) (*iam.DeleteAccountPasswordPolicyOutput, error)) *MockIAMAPI_DeleteAccountPasswordPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroup provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteGroup(_a0 *iam.DeleteGroupInput) (*iam.DeleteGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DeleteGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.DeleteGroupInput) (*iam.DeleteGroupOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteGroupInput) *iam.DeleteGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroup'
type MockIAMAPI_DeleteGroup_Call struct {
	*mock.Call
}

// DeleteGroup is a helper method to define mock.On call
//   - _a0 *iam.DeleteGroupInput
func (_e *MockIAMAPI_Expecter) DeleteGroup(_a0 interface{}) *MockIAMAPI_DeleteGroup_Call {
	return &MockIAMAPI_DeleteGroup_Call{Call: _e.mock.On("DeleteGroup", _a0)}
}

func (_c *MockIAMAPI_DeleteGroup_Call) Run(run func(_a0 *iam.DeleteGroupInput)) *MockIAMAPI_DeleteGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteGroupInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteGroup_Call) Return(_a0 *iam.DeleteGroupOutput, _a1 error) *MockIAMAPI_DeleteGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteGroup_Call) RunAndReturn(run func(*iam.DeleteGroupInput) (*iam.DeleteGroupOutput, error)) *MockIAMAPI_DeleteGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupPolicy provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteGroupPolicy(_a0 *iam.DeleteGroupPolicyInput) (*iam.DeleteGroupPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DeleteGroupPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.DeleteGroupPolicyInput) (*iam.DeleteGroupPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteGroupPolicyInput) *iam.DeleteGroupPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteGroupPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteGroupPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteGroupPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupPolicy'
type MockIAMAPI_DeleteGroupPolicy_Call struct {
	*mock.Call
}

// DeleteGroupPolicy is a helper method to define mock.On call
//   - _a0 *iam.DeleteGroupPolicyInput
func (_e *MockIAMAPI_Expecter) DeleteGroupPolicy(_a0 interface{}) *MockIAMAPI_DeleteGroupPolicy_Call {
	return &MockIAMAPI_DeleteGroupPolicy_Call{Call: _e.mock.On("DeleteGroupPolicy", _a0)}
}

func (_c *MockIAMAPI_DeleteGroupPolicy_Call) Run(run func(_a0 *iam.DeleteGroupPolicyInput)) *MockIAMAPI_DeleteGroupPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteGroupPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteGroupPolicy_Call) Return(_a0 *iam.DeleteGroupPolicyOutput, _a1 error) *MockIAMAPI_DeleteGroupPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteGroupPolicy_Call) RunAndReturn(run func(*iam.DeleteGroupPolicyInput) (*iam.DeleteGroupPolicyOutput, error)) *MockIAMAPI_DeleteGroupPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupPolicyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteGroupPolicyRequest(_a0 *iam.DeleteGroupPolicyInput) (*request.Request, *iam.DeleteGroupPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.DeleteGroupPolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.DeleteGroupPolicyInput) (*request.Request, *iam.DeleteGroupPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteGroupPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteGroupPolicyInput) *iam.DeleteGroupPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.DeleteGroupPolicyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_DeleteGroupPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupPolicyRequest'
type MockIAMAPI_DeleteGroupPolicyRequest_Call struct {
	*mock.Call
}

// DeleteGroupPolicyRequest is a helper method to define mock.On call
//   - _a0 *iam.DeleteGroupPolicyInput
func (_e *MockIAMAPI_Expecter) DeleteGroupPolicyRequest(_a0 interface{}) *MockIAMAPI_DeleteGroupPolicyRequest_Call {
	return &MockIAMAPI_DeleteGroupPolicyRequest_Call{Call: _e.mock.On("DeleteGroupPolicyRequest", _a0)}
}

func (_c *MockIAMAPI_DeleteGroupPolicyRequest_Call) Run(run func(_a0 *iam.DeleteGroupPolicyInput)) *MockIAMAPI_DeleteGroupPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteGroupPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteGroupPolicyRequest_Call) Return(_a0 *request.Request, _a1 *iam.DeleteGroupPolicyOutput) *MockIAMAPI_DeleteGroupPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteGroupPolicyRequest_Call) RunAndReturn(run func(*iam.DeleteGroupPolicyInput) (*request.Request, *iam.DeleteGroupPolicyOutput)) *MockIAMAPI_DeleteGroupPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) DeleteGroupPolicyWithContext(_a0 context.Context, _a1 *iam.DeleteGroupPolicyInput, _a2 ...request.Option) (*iam.DeleteGroupPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.DeleteGroupPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteGroupPolicyInput, ...request.Option) (*iam.DeleteGroupPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteGroupPolicyInput, ...request.Option) *iam.DeleteGroupPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteGroupPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.DeleteGroupPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteGroupPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupPolicyWithContext'
type MockIAMAPI_DeleteGroupPolicyWithContext_Call struct {
	*mock.Call
}

// DeleteGroupPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.DeleteGroupPolicyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) DeleteGroupPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_DeleteGroupPolicyWithContext_Call {
	return &MockIAMAPI_DeleteGroupPolicyWithContext_Call{Call: _e.mock.On("DeleteGroupPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_DeleteGroupPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.DeleteGroupPolicyInput, _a2 ...request.Option)) *MockIAMAPI_DeleteGroupPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.DeleteGroupPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_DeleteGroupPolicyWithContext_Call) Return(_a0 *iam.DeleteGroupPolicyOutput, _a1 error) *MockIAMAPI_DeleteGroupPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteGroupPolicyWithContext_Call) RunAndReturn(run func(context.Context, *iam.DeleteGroupPolicyInput, ...request.Option) (*iam.DeleteGroupPolicyOutput, error)) *MockIAMAPI_DeleteGroupPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteGroupRequest(_a0 *iam.DeleteGroupInput) (*request.Request, *iam.DeleteGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.DeleteGroupOutput
	if rf, ok := ret.Get(0).(func(*iam.DeleteGroupInput) (*request.Request, *iam.DeleteGroupOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteGroupInput) *iam.DeleteGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.DeleteGroupOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_DeleteGroupRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupRequest'
type MockIAMAPI_DeleteGroupRequest_Call struct {
	*mock.Call
}

// DeleteGroupRequest is a helper method to define mock.On call
//   - _a0 *iam.DeleteGroupInput
func (_e *MockIAMAPI_Expecter) DeleteGroupRequest(_a0 interface{}) *MockIAMAPI_DeleteGroupRequest_Call {
	return &MockIAMAPI_DeleteGroupRequest_Call{Call: _e.mock.On("DeleteGroupRequest", _a0)}
}

func (_c *MockIAMAPI_DeleteGroupRequest_Call) Run(run func(_a0 *iam.DeleteGroupInput)) *MockIAMAPI_DeleteGroupRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteGroupInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteGroupRequest_Call) Return(_a0 *request.Request, _a1 *iam.DeleteGroupOutput) *MockIAMAPI_DeleteGroupRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteGroupRequest_Call) RunAndReturn(run func(*iam.DeleteGroupInput) (*request.Request, *iam.DeleteGroupOutput)) *MockIAMAPI_DeleteGroupRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) DeleteGroupWithContext(_a0 context.Context, _a1 *iam.DeleteGroupInput, _a2 ...request.Option) (*iam.DeleteGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.DeleteGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteGroupInput, ...request.Option) (*iam.DeleteGroupOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteGroupInput, ...request.Option) *iam.DeleteGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.DeleteGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteGroupWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupWithContext'
type MockIAMAPI_DeleteGroupWithContext_Call struct {
	*mock.Call
}

// DeleteGroupWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.DeleteGroupInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) DeleteGroupWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_DeleteGroupWithContext_Call {
	return &MockIAMAPI_DeleteGroupWithContext_Call{Call: _e.mock.On("DeleteGroupWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_DeleteGroupWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.DeleteGroupInput, _a2 ...request.Option)) *MockIAMAPI_DeleteGroupWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.DeleteGroupInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_DeleteGroupWithContext_Call) Return(_a0 *iam.DeleteGroupOutput, _a1 error) *MockIAMAPI_DeleteGroupWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteGroupWithContext_Call) RunAndReturn(run func(context.Context, *iam.DeleteGroupInput, ...request.Option) (*iam.DeleteGroupOutput, error)) *MockIAMAPI_DeleteGroupWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInstanceProfile provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteInstanceProfile(_a0 *iam.DeleteInstanceProfileInput) (*iam.DeleteInstanceProfileOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DeleteInstanceProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.DeleteInstanceProfileInput) (*iam.DeleteInstanceProfileOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteInstanceProfileInput) *iam.DeleteInstanceProfileOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteInstanceProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteInstanceProfileInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteInstanceProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInstanceProfile'
type MockIAMAPI_DeleteInstanceProfile_Call struct {
	*mock.Call
}

// DeleteInstanceProfile is a helper method to define mock.On call
//   - _a0 *iam.DeleteInstanceProfileInput
func (_e *MockIAMAPI_Expecter) DeleteInstanceProfile(_a0 interface{}) *MockIAMAPI_DeleteInstanceProfile_Call {
	return &MockIAMAPI_DeleteInstanceProfile_Call{Call: _e.mock.On("DeleteInstanceProfile", _a0)}
}

func (_c *MockIAMAPI_DeleteInstanceProfile_Call) Run(run func(_a0 *iam.DeleteInstanceProfileInput)) *MockIAMAPI_DeleteInstanceProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteInstanceProfileInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteInstanceProfile_Call) Return(_a0 *iam.DeleteInstanceProfileOutput, _a1 error) *MockIAMAPI_DeleteInstanceProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteInstanceProfile_Call) RunAndReturn(run func(*iam.DeleteInstanceProfileInput) (*iam.DeleteInstanceProfileOutput, error)) *MockIAMAPI_DeleteInstanceProfile_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInstanceProfileRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteInstanceProfileRequest(_a0 *iam.DeleteInstanceProfileInput) (*request.Request, *iam.DeleteInstanceProfileOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.DeleteInstanceProfileOutput
	if rf, ok := ret.Get(0).(func(*iam.DeleteInstanceProfileInput) (*request.Request, *iam.DeleteInstanceProfileOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteInstanceProfileInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteInstanceProfileInput) *iam.DeleteInstanceProfileOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.DeleteInstanceProfileOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_DeleteInstanceProfileRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInstanceProfileRequest'
type MockIAMAPI_DeleteInstanceProfileRequest_Call struct {
	*mock.Call
}

// DeleteInstanceProfileRequest is a helper method to define mock.On call
//   - _a0 *iam.DeleteInstanceProfileInput
func (_e *MockIAMAPI_Expecter) DeleteInstanceProfileRequest(_a0 interface{}) *MockIAMAPI_DeleteInstanceProfileRequest_Call {
	return &MockIAMAPI_DeleteInstanceProfileRequest_Call{Call: _e.mock.On("DeleteInstanceProfileRequest", _a0)}
}

func (_c *MockIAMAPI_DeleteInstanceProfileRequest_Call) Run(run func(_a0 *iam.DeleteInstanceProfileInput)) *MockIAMAPI_DeleteInstanceProfileRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteInstanceProfileInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteInstanceProfileRequest_Call) Return(_a0 *request.Request, _a1 *iam.DeleteInstanceProfileOutput) *MockIAMAPI_DeleteInstanceProfileRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteInstanceProfileRequest_Call) RunAndReturn(run func(*iam.DeleteInstanceProfileInput) (*request.Request, *iam.DeleteInstanceProfileOutput)) *MockIAMAPI_DeleteInstanceProfileRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInstanceProfileWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) DeleteInstanceProfileWithContext(_a0 context.Context, _a1 *iam.DeleteInstanceProfileInput, _a2 ...request.Option) (*iam.DeleteInstanceProfileOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.DeleteInstanceProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteInstanceProfileInput, ...request.Option) (*iam.DeleteInstanceProfileOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteInstanceProfileInput, ...request.Option) *iam.DeleteInstanceProfileOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteInstanceProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.DeleteInstanceProfileInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteInstanceProfileWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInstanceProfileWithContext'
type MockIAMAPI_DeleteInstanceProfileWithContext_Call struct {
	*mock.Call
}

// DeleteInstanceProfileWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.DeleteInstanceProfileInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) DeleteInstanceProfileWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_DeleteInstanceProfileWithContext_Call {
	return &MockIAMAPI_DeleteInstanceProfileWithContext_Call{Call: _e.mock.On("DeleteInstanceProfileWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_DeleteInstanceProfileWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.DeleteInstanceProfileInput, _a2 ...request.Option)) *MockIAMAPI_DeleteInstanceProfileWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.DeleteInstanceProfileInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_DeleteInstanceProfileWithContext_Call) Return(_a0 *iam.DeleteInstanceProfileOutput, _a1 error) *MockIAMAPI_DeleteInstanceProfileWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteInstanceProfileWithContext_Call) RunAndReturn(run func(context.Context, *iam.DeleteInstanceProfileInput, ...request.Option) (*iam.DeleteInstanceProfileOutput, error)) *MockIAMAPI_DeleteInstanceProfileWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLoginProfile provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteLoginProfile(_a0 *iam.DeleteLoginProfileInput) (*iam.DeleteLoginProfileOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DeleteLoginProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.DeleteLoginProfileInput) (*iam.DeleteLoginProfileOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteLoginProfileInput) *iam.DeleteLoginProfileOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteLoginProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteLoginProfileInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteLoginProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLoginProfile'
type MockIAMAPI_DeleteLoginProfile_Call struct {
	*mock.Call
}

// DeleteLoginProfile is a helper method to define mock.On call
//   - _a0 *iam.DeleteLoginProfileInput
func (_e *MockIAMAPI_Expecter) DeleteLoginProfile(_a0 interface{}) *MockIAMAPI_DeleteLoginProfile_Call {
	return &MockIAMAPI_DeleteLoginProfile_Call{Call: _e.mock.On("DeleteLoginProfile", _a0)}
}

func (_c *MockIAMAPI_DeleteLoginProfile_Call) Run(run func(_a0 *iam.DeleteLoginProfileInput)) *MockIAMAPI_DeleteLoginProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteLoginProfileInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteLoginProfile_Call) Return(_a0 *iam.DeleteLoginProfileOutput, _a1 error) *MockIAMAPI_DeleteLoginProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteLoginProfile_Call) RunAndReturn(run func(*iam.DeleteLoginProfileInput) (*iam.DeleteLoginProfileOutput, error)) *MockIAMAPI_DeleteLoginProfile_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLoginProfileRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteLoginProfileRequest(_a0 *iam.DeleteLoginProfileInput) (*request.Request, *iam.DeleteLoginProfileOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.DeleteLoginProfileOutput
	if rf, ok := ret.Get(0).(func(*iam.DeleteLoginProfileInput) (*request.Request, *iam.DeleteLoginProfileOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteLoginProfileInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteLoginProfileInput) *iam.DeleteLoginProfileOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.DeleteLoginProfileOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_DeleteLoginProfileRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLoginProfileRequest'
type MockIAMAPI_DeleteLoginProfileRequest_Call struct {
	*mock.Call
}

// DeleteLoginProfileRequest is a helper method to define mock.On call
//   - _a0 *iam.DeleteLoginProfileInput
func (_e *MockIAMAPI_Expecter) DeleteLoginProfileRequest(_a0 interface{}) *MockIAMAPI_DeleteLoginProfileRequest_Call {
	return &MockIAMAPI_DeleteLoginProfileRequest_Call{Call: _e.mock.On("DeleteLoginProfileRequest", _a0)}
}

func (_c *MockIAMAPI_DeleteLoginProfileRequest_Call) Run(run func(_a0 *iam.DeleteLoginProfileInput)) *MockIAMAPI_DeleteLoginProfileRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteLoginProfileInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteLoginProfileRequest_Call) Return(_a0 *request.Request, _a1 *iam.DeleteLoginProfileOutput) *MockIAMAPI_DeleteLoginProfileRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteLoginProfileRequest_Call) RunAndReturn(run func(*iam.DeleteLoginProfileInput) (*request.Request, *iam.DeleteLoginProfileOutput)) *MockIAMAPI_DeleteLoginProfileRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLoginProfileWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) DeleteLoginProfileWithContext(_a0 context.Context, _a1 *iam.DeleteLoginProfileInput, _a2 ...request.Option) (*iam.DeleteLoginProfileOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.DeleteLoginProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteLoginProfileInput, ...request.Option) (*iam.DeleteLoginProfileOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteLoginProfileInput, ...request.Option) *iam.DeleteLoginProfileOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteLoginProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.DeleteLoginProfileInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteLoginProfileWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLoginProfileWithContext'
type MockIAMAPI_DeleteLoginProfileWithContext_Call struct {
	*mock.Call
}

// DeleteLoginProfileWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.DeleteLoginProfileInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) DeleteLoginProfileWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_DeleteLoginProfileWithContext_Call {
	return &MockIAMAPI_DeleteLoginProfileWithContext_Call{Call: _e.mock.On("DeleteLoginProfileWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_DeleteLoginProfileWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.DeleteLoginProfileInput, _a2 ...request.Option)) *MockIAMAPI_DeleteLoginProfileWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.DeleteLoginProfileInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_DeleteLoginProfileWithContext_Call) Return(_a0 *iam.DeleteLoginProfileOutput, _a1 error) *MockIAMAPI_DeleteLoginProfileWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteLoginProfileWithContext_Call) RunAndReturn(run func(context.Context, *iam.DeleteLoginProfileInput, ...request.Option) (*iam.DeleteLoginProfileOutput, error)) *MockIAMAPI_DeleteLoginProfileWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOpenIDConnectProvider provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteOpenIDConnectProvider(_a0 *iam.DeleteOpenIDConnectProviderInput) (*iam.DeleteOpenIDConnectProviderOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DeleteOpenIDConnectProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.DeleteOpenIDConnectProviderInput) (*iam.DeleteOpenIDConnectProviderOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteOpenIDConnectProviderInput) *iam.DeleteOpenIDConnectProviderOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteOpenIDConnectProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteOpenIDConnectProviderInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteOpenIDConnectProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOpenIDConnectProvider'
type MockIAMAPI_DeleteOpenIDConnectProvider_Call struct {
	*mock.Call
}

// DeleteOpenIDConnectProvider is a helper method to define mock.On call
//   - _a0 *iam.DeleteOpenIDConnectProviderInput
func (_e *MockIAMAPI_Expecter) DeleteOpenIDConnectProvider(_a0 interface{}) *MockIAMAPI_DeleteOpenIDConnectProvider_Call {
	return &MockIAMAPI_DeleteOpenIDConnectProvider_Call{Call: _e.mock.On("DeleteOpenIDConnectProvider", _a0)}
}

func (_c *MockIAMAPI_DeleteOpenIDConnectProvider_Call) Run(run func(_a0 *iam.DeleteOpenIDConnectProviderInput)) *MockIAMAPI_DeleteOpenIDConnectProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteOpenIDConnectProviderInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteOpenIDConnectProvider_Call) Return(_a0 *iam.DeleteOpenIDConnectProviderOutput, _a1 error) *MockIAMAPI_DeleteOpenIDConnectProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteOpenIDConnectProvider_Call) RunAndReturn(run func(*iam.DeleteOpenIDConnectProviderInput) (*iam.DeleteOpenIDConnectProviderOutput, error)) *MockIAMAPI_DeleteOpenIDConnectProvider_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOpenIDConnectProviderRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteOpenIDConnectProviderRequest(_a0 *iam.DeleteOpenIDConnectProviderInput) (*request.Request, *iam.DeleteOpenIDConnectProviderOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.DeleteOpenIDConnectProviderOutput
	if rf, ok := ret.Get(0).(func(*iam.DeleteOpenIDConnectProviderInput) (*request.Request, *iam.DeleteOpenIDConnectProviderOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteOpenIDConnectProviderInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteOpenIDConnectProviderInput) *iam.DeleteOpenIDConnectProviderOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.DeleteOpenIDConnectProviderOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_DeleteOpenIDConnectProviderRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOpenIDConnectProviderRequest'
type MockIAMAPI_DeleteOpenIDConnectProviderRequest_Call struct {
	*mock.Call
}

// DeleteOpenIDConnectProviderRequest is a helper method to define mock.On call
//   - _a0 *iam.DeleteOpenIDConnectProviderInput
func (_e *MockIAMAPI_Expecter) DeleteOpenIDConnectProviderRequest(_a0 interface{}) *MockIAMAPI_DeleteOpenIDConnectProviderRequest_Call {
	return &MockIAMAPI_DeleteOpenIDConnectProviderRequest_Call{Call: _e.mock.On("DeleteOpenIDConnectProviderRequest", _a0)}
}

func (_c *MockIAMAPI_DeleteOpenIDConnectProviderRequest_Call) Run(run func(_a0 *iam.DeleteOpenIDConnectProviderInput)) *MockIAMAPI_DeleteOpenIDConnectProviderRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteOpenIDConnectProviderInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteOpenIDConnectProviderRequest_Call) Return(_a0 *request.Request, _a1 *iam.DeleteOpenIDConnectProviderOutput) *MockIAMAPI_DeleteOpenIDConnectProviderRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteOpenIDConnectProviderRequest_Call) RunAndReturn(run func(*iam.DeleteOpenIDConnectProviderInput) (*request.Request, *iam.DeleteOpenIDConnectProviderOutput)) *MockIAMAPI_DeleteOpenIDConnectProviderRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOpenIDConnectProviderWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) DeleteOpenIDConnectProviderWithContext(_a0 context.Context, _a1 *iam.DeleteOpenIDConnectProviderInput, _a2 ...request.Option) (*iam.DeleteOpenIDConnectProviderOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.DeleteOpenIDConnectProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteOpenIDConnectProviderInput, ...request.Option) (*iam.DeleteOpenIDConnectProviderOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteOpenIDConnectProviderInput, ...request.Option) *iam.DeleteOpenIDConnectProviderOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteOpenIDConnectProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.DeleteOpenIDConnectProviderInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteOpenIDConnectProviderWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOpenIDConnectProviderWithContext'
type MockIAMAPI_DeleteOpenIDConnectProviderWithContext_Call struct {
	*mock.Call
}

// DeleteOpenIDConnectProviderWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.DeleteOpenIDConnectProviderInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) DeleteOpenIDConnectProviderWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_DeleteOpenIDConnectProviderWithContext_Call {
	return &MockIAMAPI_DeleteOpenIDConnectProviderWithContext_Call{Call: _e.mock.On("DeleteOpenIDConnectProviderWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_DeleteOpenIDConnectProviderWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.DeleteOpenIDConnectProviderInput, _a2 ...request.Option)) *MockIAMAPI_DeleteOpenIDConnectProviderWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.DeleteOpenIDConnectProviderInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_DeleteOpenIDConnectProviderWithContext_Call) Return(_a0 *iam.DeleteOpenIDConnectProviderOutput, _a1 error) *MockIAMAPI_DeleteOpenIDConnectProviderWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteOpenIDConnectProviderWithContext_Call) RunAndReturn(run func(context.Context, *iam.DeleteOpenIDConnectProviderInput, ...request.Option) (*iam.DeleteOpenIDConnectProviderOutput, error)) *MockIAMAPI_DeleteOpenIDConnectProviderWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePolicy provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeletePolicy(_a0 *iam.DeletePolicyInput) (*iam.DeletePolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DeletePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.DeletePolicyInput) (*iam.DeletePolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeletePolicyInput) *iam.DeletePolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeletePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeletePolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeletePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePolicy'
type MockIAMAPI_DeletePolicy_Call struct {
	*mock.Call
}

// DeletePolicy is a helper method to define mock.On call
//   - _a0 *iam.DeletePolicyInput
func (_e *MockIAMAPI_Expecter) DeletePolicy(_a0 interface{}) *MockIAMAPI_DeletePolicy_Call {
	return &MockIAMAPI_DeletePolicy_Call{Call: _e.mock.On("DeletePolicy", _a0)}
}

func (_c *MockIAMAPI_DeletePolicy_Call) Run(run func(_a0 *iam.DeletePolicyInput)) *MockIAMAPI_DeletePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeletePolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeletePolicy_Call) Return(_a0 *iam.DeletePolicyOutput, _a1 error) *MockIAMAPI_DeletePolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeletePolicy_Call) RunAndReturn(run func(*iam.DeletePolicyInput) (*iam.DeletePolicyOutput, error)) *MockIAMAPI_DeletePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePolicyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeletePolicyRequest(_a0 *iam.DeletePolicyInput) (*request.Request, *iam.DeletePolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.DeletePolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.DeletePolicyInput) (*request.Request, *iam.DeletePolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeletePolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeletePolicyInput) *iam.DeletePolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.DeletePolicyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_DeletePolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePolicyRequest'
type MockIAMAPI_DeletePolicyRequest_Call struct {
	*mock.Call
}

// DeletePolicyRequest is a helper method to define mock.On call
//   - _a0 *iam.DeletePolicyInput
func (_e *MockIAMAPI_Expecter) DeletePolicyRequest(_a0 interface{}) *MockIAMAPI_DeletePolicyRequest_Call {
	return &MockIAMAPI_DeletePolicyRequest_Call{Call: _e.mock.On("DeletePolicyRequest", _a0)}
}

func (_c *MockIAMAPI_DeletePolicyRequest_Call) Run(run func(_a0 *iam.DeletePolicyInput)) *MockIAMAPI_DeletePolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeletePolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeletePolicyRequest_Call) Return(_a0 *request.Request, _a1 *iam.DeletePolicyOutput) *MockIAMAPI_DeletePolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeletePolicyRequest_Call) RunAndReturn(run func(*iam.DeletePolicyInput) (*request.Request, *iam.DeletePolicyOutput)) *MockIAMAPI_DeletePolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePolicyVersion provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeletePolicyVersion(_a0 *iam.DeletePolicyVersionInput) (*iam.DeletePolicyVersionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DeletePolicyVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.DeletePolicyVersionInput) (*iam.DeletePolicyVersionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeletePolicyVersionInput) *iam.DeletePolicyVersionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeletePolicyVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeletePolicyVersionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeletePolicyVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePolicyVersion'
type MockIAMAPI_DeletePolicyVersion_Call struct {
	*mock.Call
}

// DeletePolicyVersion is a helper method to define mock.On call
//   - _a0 *iam.DeletePolicyVersionInput
func (_e *MockIAMAPI_Expecter) DeletePolicyVersion(_a0 interface{}) *MockIAMAPI_DeletePolicyVersion_Call {
	return &MockIAMAPI_DeletePolicyVersion_Call{Call: _e.mock.On("DeletePolicyVersion", _a0)}
}

func (_c *MockIAMAPI_DeletePolicyVersion_Call) Run(run func(_a0 *iam.DeletePolicyVersionInput)) *MockIAMAPI_DeletePolicyVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeletePolicyVersionInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeletePolicyVersion_Call) Return(_a0 *iam.DeletePolicyVersionOutput, _a1 error) *MockIAMAPI_DeletePolicyVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeletePolicyVersion_Call) RunAndReturn(run func(*iam.DeletePolicyVersionInput) (*iam.DeletePolicyVersionOutput, error)) *MockIAMAPI_DeletePolicyVersion_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePolicyVersionRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeletePolicyVersionRequest(_a0 *iam.DeletePolicyVersionInput) (*request.Request, *iam.DeletePolicyVersionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.DeletePolicyVersionOutput
	if rf, ok := ret.Get(0).(func(*iam.DeletePolicyVersionInput) (*request.Request, *iam.DeletePolicyVersionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeletePolicyVersionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeletePolicyVersionInput) *iam.DeletePolicyVersionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.DeletePolicyVersionOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_DeletePolicyVersionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePolicyVersionRequest'
type MockIAMAPI_DeletePolicyVersionRequest_Call struct {
	*mock.Call
}

// DeletePolicyVersionRequest is a helper method to define mock.On call
//   - _a0 *iam.DeletePolicyVersionInput
func (_e *MockIAMAPI_Expecter) DeletePolicyVersionRequest(_a0 interface{}) *MockIAMAPI_DeletePolicyVersionRequest_Call {
	return &MockIAMAPI_DeletePolicyVersionRequest_Call{Call: _e.mock.On("DeletePolicyVersionRequest", _a0)}
}

func (_c *MockIAMAPI_DeletePolicyVersionRequest_Call) Run(run func(_a0 *iam.DeletePolicyVersionInput)) *MockIAMAPI_DeletePolicyVersionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeletePolicyVersionInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeletePolicyVersionRequest_Call) Return(_a0 *request.Request, _a1 *iam.DeletePolicyVersionOutput) *MockIAMAPI_DeletePolicyVersionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeletePolicyVersionRequest_Call) RunAndReturn(run func(*iam.DeletePolicyVersionInput) (*request.Request, *iam.DeletePolicyVersionOutput)) *MockIAMAPI_DeletePolicyVersionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePolicyVersionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) DeletePolicyVersionWithContext(_a0 context.Context, _a1 *iam.DeletePolicyVersionInput, _a2 ...request.Option) (*iam.DeletePolicyVersionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.DeletePolicyVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeletePolicyVersionInput, ...request.Option) (*iam.DeletePolicyVersionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeletePolicyVersionInput, ...request.Option) *iam.DeletePolicyVersionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeletePolicyVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.DeletePolicyVersionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeletePolicyVersionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePolicyVersionWithContext'
type MockIAMAPI_DeletePolicyVersionWithContext_Call struct {
	*mock.Call
}

// DeletePolicyVersionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.DeletePolicyVersionInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) DeletePolicyVersionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_DeletePolicyVersionWithContext_Call {
	return &MockIAMAPI_DeletePolicyVersionWithContext_Call{Call: _e.mock.On("DeletePolicyVersionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_DeletePolicyVersionWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.DeletePolicyVersionInput, _a2 ...request.Option)) *MockIAMAPI_DeletePolicyVersionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.DeletePolicyVersionInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_DeletePolicyVersionWithContext_Call) Return(_a0 *iam.DeletePolicyVersionOutput, _a1 error) *MockIAMAPI_DeletePolicyVersionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeletePolicyVersionWithContext_Call) RunAndReturn(run func(context.Context, *iam.DeletePolicyVersionInput, ...request.Option) (*iam.DeletePolicyVersionOutput, error)) *MockIAMAPI_DeletePolicyVersionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) DeletePolicyWithContext(_a0 context.Context, _a1 *iam.DeletePolicyInput, _a2 ...request.Option) (*iam.DeletePolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.DeletePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeletePolicyInput, ...request.Option) (*iam.DeletePolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeletePolicyInput, ...request.Option) *iam.DeletePolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeletePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.DeletePolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeletePolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePolicyWithContext'
type MockIAMAPI_DeletePolicyWithContext_Call struct {
	*mock.Call
}

// DeletePolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.DeletePolicyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) DeletePolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_DeletePolicyWithContext_Call {
	return &MockIAMAPI_DeletePolicyWithContext_Call{Call: _e.mock.On("DeletePolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_DeletePolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.DeletePolicyInput, _a2 ...request.Option)) *MockIAMAPI_DeletePolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.DeletePolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_DeletePolicyWithContext_Call) Return(_a0 *iam.DeletePolicyOutput, _a1 error) *MockIAMAPI_DeletePolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeletePolicyWithContext_Call) RunAndReturn(run func(context.Context, *iam.DeletePolicyInput, ...request.Option) (*iam.DeletePolicyOutput, error)) *MockIAMAPI_DeletePolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRole provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteRole(_a0 *iam.DeleteRoleInput) (*iam.DeleteRoleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DeleteRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.DeleteRoleInput) (*iam.DeleteRoleOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteRoleInput) *iam.DeleteRoleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteRoleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRole'
type MockIAMAPI_DeleteRole_Call struct {
	*mock.Call
}

// DeleteRole is a helper method to define mock.On call
//   - _a0 *iam.DeleteRoleInput
func (_e *MockIAMAPI_Expecter) DeleteRole(_a0 interface{}) *MockIAMAPI_DeleteRole_Call {
	return &MockIAMAPI_DeleteRole_Call{Call: _e.mock.On("DeleteRole", _a0)}
}

func (_c *MockIAMAPI_DeleteRole_Call) Run(run func(_a0 *iam.DeleteRoleInput)) *MockIAMAPI_DeleteRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteRoleInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteRole_Call) Return(_a0 *iam.DeleteRoleOutput, _a1 error) *MockIAMAPI_DeleteRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteRole_Call) RunAndReturn(run func(*iam.DeleteRoleInput) (*iam.DeleteRoleOutput, error)) *MockIAMAPI_DeleteRole_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRolePermissionsBoundary provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteRolePermissionsBoundary(_a0 *iam.DeleteRolePermissionsBoundaryInput) (*iam.DeleteRolePermissionsBoundaryOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DeleteRolePermissionsBoundaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.DeleteRolePermissionsBoundaryInput) (*iam.DeleteRolePermissionsBoundaryOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteRolePermissionsBoundaryInput) *iam.DeleteRolePermissionsBoundaryOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteRolePermissionsBoundaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteRolePermissionsBoundaryInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteRolePermissionsBoundary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRolePermissionsBoundary'
type MockIAMAPI_DeleteRolePermissionsBoundary_Call struct {
	*mock.Call
}

// DeleteRolePermissionsBoundary is a helper method to define mock.On call
//   - _a0 *iam.DeleteRolePermissionsBoundaryInput
func (_e *MockIAMAPI_Expecter) DeleteRolePermissionsBoundary(_a0 interface{}) *MockIAMAPI_DeleteRolePermissionsBoundary_Call {
	return &MockIAMAPI_DeleteRolePermissionsBoundary_Call{Call: _e.mock.On("DeleteRolePermissionsBoundary", _a0)}
}

func (_c *MockIAMAPI_DeleteRolePermissionsBoundary_Call) Run(run func(_a0 *iam.DeleteRolePermissionsBoundaryInput)) *MockIAMAPI_DeleteRolePermissionsBoundary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteRolePermissionsBoundaryInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteRolePermissionsBoundary_Call) Return(_a0 *iam.DeleteRolePermissionsBoundaryOutput, _a1 error) *MockIAMAPI_DeleteRolePermissionsBoundary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteRolePermissionsBoundary_Call) RunAndReturn(run func(*iam.DeleteRolePermissionsBoundaryInput) (*iam.DeleteRolePermissionsBoundaryOutput, error)) *MockIAMAPI_DeleteRolePermissionsBoundary_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRolePermissionsBoundaryRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteRolePermissionsBoundaryRequest(_a0 *iam.DeleteRolePermissionsBoundaryInput) (*request.Request, *iam.DeleteRolePermissionsBoundaryOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.DeleteRolePermissionsBoundaryOutput
	if rf, ok := ret.Get(0).(func(*iam.DeleteRolePermissionsBoundaryInput) (*request.Request, *iam.DeleteRolePermissionsBoundaryOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteRolePermissionsBoundaryInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteRolePermissionsBoundaryInput) *iam.DeleteRolePermissionsBoundaryOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.DeleteRolePermissionsBoundaryOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_DeleteRolePermissionsBoundaryRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRolePermissionsBoundaryRequest'
type MockIAMAPI_DeleteRolePermissionsBoundaryRequest_Call struct {
	*mock.Call
}

// DeleteRolePermissionsBoundaryRequest is a helper method to define mock.On call
//   - _a0 *iam.DeleteRolePermissionsBoundaryInput
func (_e *MockIAMAPI_Expecter) DeleteRolePermissionsBoundaryRequest(_a0 interface{}) *MockIAMAPI_DeleteRolePermissionsBoundaryRequest_Call {
	return &MockIAMAPI_DeleteRolePermissionsBoundaryRequest_Call{Call: _e.mock.On("DeleteRolePermissionsBoundaryRequest", _a0)}
}

func (_c *MockIAMAPI_DeleteRolePermissionsBoundaryRequest_Call) Run(run func(_a0 *iam.DeleteRolePermissionsBoundaryInput)) *MockIAMAPI_DeleteRolePermissionsBoundaryRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteRolePermissionsBoundaryInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteRolePermissionsBoundaryRequest_Call) Return(_a0 *request.Request, _a1 *iam.DeleteRolePermissionsBoundaryOutput) *MockIAMAPI_DeleteRolePermissionsBoundaryRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteRolePermissionsBoundaryRequest_Call) RunAndReturn(run func(*iam.DeleteRolePermissionsBoundaryInput) (*request.Request, *iam.DeleteRolePermissionsBoundaryOutput)) *MockIAMAPI_DeleteRolePermissionsBoundaryRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRolePermissionsBoundaryWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) DeleteRolePermissionsBoundaryWithContext(_a0 context.Context, _a1 *iam.DeleteRolePermissionsBoundaryInput, _a2 ...request.Option) (*iam.DeleteRolePermissionsBoundaryOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.DeleteRolePermissionsBoundaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteRolePermissionsBoundaryInput, ...request.Option) (*iam.DeleteRolePermissionsBoundaryOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteRolePermissionsBoundaryInput, ...request.Option) *iam.DeleteRolePermissionsBoundaryOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteRolePermissionsBoundaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.DeleteRolePermissionsBoundaryInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteRolePermissionsBoundaryWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRolePermissionsBoundaryWithContext'
type MockIAMAPI_DeleteRolePermissionsBoundaryWithContext_Call struct {
	*mock.Call
}

// DeleteRolePermissionsBoundaryWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.DeleteRolePermissionsBoundaryInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) DeleteRolePermissionsBoundaryWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_DeleteRolePermissionsBoundaryWithContext_Call {
	return &MockIAMAPI_DeleteRolePermissionsBoundaryWithContext_Call{Call: _e.mock.On("DeleteRolePermissionsBoundaryWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_DeleteRolePermissionsBoundaryWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.DeleteRolePermissionsBoundaryInput, _a2 ...request.Option)) *MockIAMAPI_DeleteRolePermissionsBoundaryWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.DeleteRolePermissionsBoundaryInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_DeleteRolePermissionsBoundaryWithContext_Call) Return(_a0 *iam.DeleteRolePermissionsBoundaryOutput, _a1 error) *MockIAMAPI_DeleteRolePermissionsBoundaryWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteRolePermissionsBoundaryWithContext_Call) RunAndReturn(run func(context.Context, *iam.DeleteRolePermissionsBoundaryInput, ...request.Option) (*iam.DeleteRolePermissionsBoundaryOutput, error)) *MockIAMAPI_DeleteRolePermissionsBoundaryWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRolePolicy provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteRolePolicy(_a0 *iam.DeleteRolePolicyInput) (*iam.DeleteRolePolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DeleteRolePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.DeleteRolePolicyInput) (*iam.DeleteRolePolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteRolePolicyInput) *iam.DeleteRolePolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteRolePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteRolePolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteRolePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRolePolicy'
type MockIAMAPI_DeleteRolePolicy_Call struct {
	*mock.Call
}

// DeleteRolePolicy is a helper method to define mock.On call
//   - _a0 *iam.DeleteRolePolicyInput
func (_e *MockIAMAPI_Expecter) DeleteRolePolicy(_a0 interface{}) *MockIAMAPI_DeleteRolePolicy_Call {
	return &MockIAMAPI_DeleteRolePolicy_Call{Call: _e.mock.On("DeleteRolePolicy", _a0)}
}

func (_c *MockIAMAPI_DeleteRolePolicy_Call) Run(run func(_a0 *iam.DeleteRolePolicyInput)) *MockIAMAPI_DeleteRolePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteRolePolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteRolePolicy_Call) Return(_a0 *iam.DeleteRolePolicyOutput, _a1 error) *MockIAMAPI_DeleteRolePolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteRolePolicy_Call) RunAndReturn(run func(*iam.DeleteRolePolicyInput) (*iam.DeleteRolePolicyOutput, error)) *MockIAMAPI_DeleteRolePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRolePolicyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteRolePolicyRequest(_a0 *iam.DeleteRolePolicyInput) (*request.Request, *iam.DeleteRolePolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.DeleteRolePolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.DeleteRolePolicyInput) (*request.Request, *iam.DeleteRolePolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteRolePolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteRolePolicyInput) *iam.DeleteRolePolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.DeleteRolePolicyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_DeleteRolePolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRolePolicyRequest'
type MockIAMAPI_DeleteRolePolicyRequest_Call struct {
	*mock.Call
}

// DeleteRolePolicyRequest is a helper method to define mock.On call
//   - _a0 *iam.DeleteRolePolicyInput
func (_e *MockIAMAPI_Expecter) DeleteRolePolicyRequest(_a0 interface{}) *MockIAMAPI_DeleteRolePolicyRequest_Call {
	return &MockIAMAPI_DeleteRolePolicyRequest_Call{Call: _e.mock.On("DeleteRolePolicyRequest", _a0)}
}

func (_c *MockIAMAPI_DeleteRolePolicyRequest_Call) Run(run func(_a0 *iam.DeleteRolePolicyInput)) *MockIAMAPI_DeleteRolePolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteRolePolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteRolePolicyRequest_Call) Return(_a0 *request.Request, _a1 *iam.DeleteRolePolicyOutput) *MockIAMAPI_DeleteRolePolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteRolePolicyRequest_Call) RunAndReturn(run func(*iam.DeleteRolePolicyInput) (*request.Request, *iam.DeleteRolePolicyOutput)) *MockIAMAPI_DeleteRolePolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRolePolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) DeleteRolePolicyWithContext(_a0 context.Context, _a1 *iam.DeleteRolePolicyInput, _a2 ...request.Option) (*iam.DeleteRolePolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.DeleteRolePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteRolePolicyInput, ...request.Option) (*iam.DeleteRolePolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteRolePolicyInput, ...request.Option) *iam.DeleteRolePolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteRolePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.DeleteRolePolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteRolePolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRolePolicyWithContext'
type MockIAMAPI_DeleteRolePolicyWithContext_Call struct {
	*mock.Call
}

// DeleteRolePolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.DeleteRolePolicyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) DeleteRolePolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_DeleteRolePolicyWithContext_Call {
	return &MockIAMAPI_DeleteRolePolicyWithContext_Call{Call: _e.mock.On("DeleteRolePolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_DeleteRolePolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.DeleteRolePolicyInput, _a2 ...request.Option)) *MockIAMAPI_DeleteRolePolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.DeleteRolePolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_DeleteRolePolicyWithContext_Call) Return(_a0 *iam.DeleteRolePolicyOutput, _a1 error) *MockIAMAPI_DeleteRolePolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteRolePolicyWithContext_Call) RunAndReturn(run func(context.Context, *iam.DeleteRolePolicyInput, ...request.Option) (*iam.DeleteRolePolicyOutput, error)) *MockIAMAPI_DeleteRolePolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRoleRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteRoleRequest(_a0 *iam.DeleteRoleInput) (*request.Request, *iam.DeleteRoleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.DeleteRoleOutput
	if rf, ok := ret.Get(0).(func(*iam.DeleteRoleInput) (*request.Request, *iam.DeleteRoleOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteRoleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteRoleInput) *iam.DeleteRoleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.DeleteRoleOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_DeleteRoleRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRoleRequest'
type MockIAMAPI_DeleteRoleRequest_Call struct {
	*mock.Call
}

// DeleteRoleRequest is a helper method to define mock.On call
//   - _a0 *iam.DeleteRoleInput
func (_e *MockIAMAPI_Expecter) DeleteRoleRequest(_a0 interface{}) *MockIAMAPI_DeleteRoleRequest_Call {
	return &MockIAMAPI_DeleteRoleRequest_Call{Call: _e.mock.On("DeleteRoleRequest", _a0)}
}

func (_c *MockIAMAPI_DeleteRoleRequest_Call) Run(run func(_a0 *iam.DeleteRoleInput)) *MockIAMAPI_DeleteRoleRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteRoleInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteRoleRequest_Call) Return(_a0 *request.Request, _a1 *iam.DeleteRoleOutput) *MockIAMAPI_DeleteRoleRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteRoleRequest_Call) RunAndReturn(run func(*iam.DeleteRoleInput) (*request.Request, *iam.DeleteRoleOutput)) *MockIAMAPI_DeleteRoleRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRoleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) DeleteRoleWithContext(_a0 context.Context, _a1 *iam.DeleteRoleInput, _a2 ...request.Option) (*iam.DeleteRoleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.DeleteRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteRoleInput, ...request.Option) (*iam.DeleteRoleOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteRoleInput, ...request.Option) *iam.DeleteRoleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.DeleteRoleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteRoleWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRoleWithContext'
type MockIAMAPI_DeleteRoleWithContext_Call struct {
	*mock.Call
}

// DeleteRoleWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.DeleteRoleInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) DeleteRoleWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_DeleteRoleWithContext_Call {
	return &MockIAMAPI_DeleteRoleWithContext_Call{Call: _e.mock.On("DeleteRoleWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_DeleteRoleWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.DeleteRoleInput, _a2 ...request.Option)) *MockIAMAPI_DeleteRoleWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.DeleteRoleInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_DeleteRoleWithContext_Call) Return(_a0 *iam.DeleteRoleOutput, _a1 error) *MockIAMAPI_DeleteRoleWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteRoleWithContext_Call) RunAndReturn(run func(context.Context, *iam.DeleteRoleInput, ...request.Option) (*iam.DeleteRoleOutput, error)) *MockIAMAPI_DeleteRoleWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSAMLProvider provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteSAMLProvider(_a0 *iam.DeleteSAMLProviderInput) (*iam.DeleteSAMLProviderOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DeleteSAMLProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.DeleteSAMLProviderInput) (*iam.DeleteSAMLProviderOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteSAMLProviderInput) *iam.DeleteSAMLProviderOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteSAMLProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteSAMLProviderInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteSAMLProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSAMLProvider'
type MockIAMAPI_DeleteSAMLProvider_Call struct {
	*mock.Call
}

// DeleteSAMLProvider is a helper method to define mock.On call
//   - _a0 *iam.DeleteSAMLProviderInput
func (_e *MockIAMAPI_Expecter) DeleteSAMLProvider(_a0 interface{}) *MockIAMAPI_DeleteSAMLProvider_Call {
	return &MockIAMAPI_DeleteSAMLProvider_Call{Call: _e.mock.On("DeleteSAMLProvider", _a0)}
}

func (_c *MockIAMAPI_DeleteSAMLProvider_Call) Run(run func(_a0 *iam.DeleteSAMLProviderInput)) *MockIAMAPI_DeleteSAMLProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteSAMLProviderInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteSAMLProvider_Call) Return(_a0 *iam.DeleteSAMLProviderOutput, _a1 error) *MockIAMAPI_DeleteSAMLProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteSAMLProvider_Call) RunAndReturn(run func(*iam.DeleteSAMLProviderInput) (*iam.DeleteSAMLProviderOutput, error)) *MockIAMAPI_DeleteSAMLProvider_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSAMLProviderRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteSAMLProviderRequest(_a0 *iam.DeleteSAMLProviderInput) (*request.Request, *iam.DeleteSAMLProviderOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.DeleteSAMLProviderOutput
	if rf, ok := ret.Get(0).(func(*iam.DeleteSAMLProviderInput) (*request.Request, *iam.DeleteSAMLProviderOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteSAMLProviderInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteSAMLProviderInput) *iam.DeleteSAMLProviderOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.DeleteSAMLProviderOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_DeleteSAMLProviderRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSAMLProviderRequest'
type MockIAMAPI_DeleteSAMLProviderRequest_Call struct {
	*mock.Call
}

// DeleteSAMLProviderRequest is a helper method to define mock.On call
//   - _a0 *iam.DeleteSAMLProviderInput
func (_e *MockIAMAPI_Expecter) DeleteSAMLProviderRequest(_a0 interface{}) *MockIAMAPI_DeleteSAMLProviderRequest_Call {
	return &MockIAMAPI_DeleteSAMLProviderRequest_Call{Call: _e.mock.On("DeleteSAMLProviderRequest", _a0)}
}

func (_c *MockIAMAPI_DeleteSAMLProviderRequest_Call) Run(run func(_a0 *iam.DeleteSAMLProviderInput)) *MockIAMAPI_DeleteSAMLProviderRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteSAMLProviderInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteSAMLProviderRequest_Call) Return(_a0 *request.Request, _a1 *iam.DeleteSAMLProviderOutput) *MockIAMAPI_DeleteSAMLProviderRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteSAMLProviderRequest_Call) RunAndReturn(run func(*iam.DeleteSAMLProviderInput) (*request.Request, *iam.DeleteSAMLProviderOutput)) *MockIAMAPI_DeleteSAMLProviderRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSAMLProviderWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) DeleteSAMLProviderWithContext(_a0 context.Context, _a1 *iam.DeleteSAMLProviderInput, _a2 ...request.Option) (*iam.DeleteSAMLProviderOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.DeleteSAMLProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteSAMLProviderInput, ...request.Option) (*iam.DeleteSAMLProviderOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteSAMLProviderInput, ...request.Option) *iam.DeleteSAMLProviderOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteSAMLProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.DeleteSAMLProviderInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteSAMLProviderWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSAMLProviderWithContext'
type MockIAMAPI_DeleteSAMLProviderWithContext_Call struct {
	*mock.Call
}

// DeleteSAMLProviderWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.DeleteSAMLProviderInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) DeleteSAMLProviderWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_DeleteSAMLProviderWithContext_Call {
	return &MockIAMAPI_DeleteSAMLProviderWithContext_Call{Call: _e.mock.On("DeleteSAMLProviderWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_DeleteSAMLProviderWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.DeleteSAMLProviderInput, _a2 ...request.Option)) *MockIAMAPI_DeleteSAMLProviderWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.DeleteSAMLProviderInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_DeleteSAMLProviderWithContext_Call) Return(_a0 *iam.DeleteSAMLProviderOutput, _a1 error) *MockIAMAPI_DeleteSAMLProviderWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteSAMLProviderWithContext_Call) RunAndReturn(run func(context.Context, *iam.DeleteSAMLProviderInput, ...request.Option) (*iam.DeleteSAMLProviderOutput, error)) *MockIAMAPI_DeleteSAMLProviderWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSSHPublicKey provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteSSHPublicKey(_a0 *iam.DeleteSSHPublicKeyInput) (*iam.DeleteSSHPublicKeyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DeleteSSHPublicKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.DeleteSSHPublicKeyInput) (*iam.DeleteSSHPublicKeyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteSSHPublicKeyInput) *iam.DeleteSSHPublicKeyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteSSHPublicKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteSSHPublicKeyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteSSHPublicKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSSHPublicKey'
type MockIAMAPI_DeleteSSHPublicKey_Call struct {
	*mock.Call
}

// DeleteSSHPublicKey is a helper method to define mock.On call
//   - _a0 *iam.DeleteSSHPublicKeyInput
func (_e *MockIAMAPI_Expecter) DeleteSSHPublicKey(_a0 interface{}) *MockIAMAPI_DeleteSSHPublicKey_Call {
	return &MockIAMAPI_DeleteSSHPublicKey_Call{Call: _e.mock.On("DeleteSSHPublicKey", _a0)}
}

func (_c *MockIAMAPI_DeleteSSHPublicKey_Call) Run(run func(_a0 *iam.DeleteSSHPublicKeyInput)) *MockIAMAPI_DeleteSSHPublicKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteSSHPublicKeyInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteSSHPublicKey_Call) Return(_a0 *iam.DeleteSSHPublicKeyOutput, _a1 error) *MockIAMAPI_DeleteSSHPublicKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteSSHPublicKey_Call) RunAndReturn(run func(*iam.DeleteSSHPublicKeyInput) (*iam.DeleteSSHPublicKeyOutput, error)) *MockIAMAPI_DeleteSSHPublicKey_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSSHPublicKeyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteSSHPublicKeyRequest(_a0 *iam.DeleteSSHPublicKeyInput) (*request.Request, *iam.DeleteSSHPublicKeyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.DeleteSSHPublicKeyOutput
	if rf, ok := ret.Get(0).(func(*iam.DeleteSSHPublicKeyInput) (*request.Request, *iam.DeleteSSHPublicKeyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteSSHPublicKeyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteSSHPublicKeyInput) *iam.DeleteSSHPublicKeyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.DeleteSSHPublicKeyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_DeleteSSHPublicKeyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSSHPublicKeyRequest'
type MockIAMAPI_DeleteSSHPublicKeyRequest_Call struct {
	*mock.Call
}

// DeleteSSHPublicKeyRequest is a helper method to define mock.On call
//   - _a0 *iam.DeleteSSHPublicKeyInput
func (_e *MockIAMAPI_Expecter) DeleteSSHPublicKeyRequest(_a0 interface{}) *MockIAMAPI_DeleteSSHPublicKeyRequest_Call {
	return &MockIAMAPI_DeleteSSHPublicKeyRequest_Call{Call: _e.mock.On("DeleteSSHPublicKeyRequest", _a0)}
}

func (_c *MockIAMAPI_DeleteSSHPublicKeyRequest_Call) Run(run func(_a0 *iam.DeleteSSHPublicKeyInput)) *MockIAMAPI_DeleteSSHPublicKeyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteSSHPublicKeyInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteSSHPublicKeyRequest_Call) Return(_a0 *request.Request, _a1 *iam.DeleteSSHPublicKeyOutput) *MockIAMAPI_DeleteSSHPublicKeyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteSSHPublicKeyRequest_Call) RunAndReturn(run func(*iam.DeleteSSHPublicKeyInput) (*request.Request, *iam.DeleteSSHPublicKeyOutput)) *MockIAMAPI_DeleteSSHPublicKeyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSSHPublicKeyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) DeleteSSHPublicKeyWithContext(_a0 context.Context, _a1 *iam.DeleteSSHPublicKeyInput, _a2 ...request.Option) (*iam.DeleteSSHPublicKeyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.DeleteSSHPublicKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteSSHPublicKeyInput, ...request.Option) (*iam.DeleteSSHPublicKeyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteSSHPublicKeyInput, ...request.Option) *iam.DeleteSSHPublicKeyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteSSHPublicKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.DeleteSSHPublicKeyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteSSHPublicKeyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSSHPublicKeyWithContext'
type MockIAMAPI_DeleteSSHPublicKeyWithContext_Call struct {
	*mock.Call
}

// DeleteSSHPublicKeyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.DeleteSSHPublicKeyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) DeleteSSHPublicKeyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_DeleteSSHPublicKeyWithContext_Call {
	return &MockIAMAPI_DeleteSSHPublicKeyWithContext_Call{Call: _e.mock.On("DeleteSSHPublicKeyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_DeleteSSHPublicKeyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.DeleteSSHPublicKeyInput, _a2 ...request.Option)) *MockIAMAPI_DeleteSSHPublicKeyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.DeleteSSHPublicKeyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_DeleteSSHPublicKeyWithContext_Call) Return(_a0 *iam.DeleteSSHPublicKeyOutput, _a1 error) *MockIAMAPI_DeleteSSHPublicKeyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteSSHPublicKeyWithContext_Call) RunAndReturn(run func(context.Context, *iam.DeleteSSHPublicKeyInput, ...request.Option) (*iam.DeleteSSHPublicKeyOutput, error)) *MockIAMAPI_DeleteSSHPublicKeyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServerCertificate provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteServerCertificate(_a0 *iam.DeleteServerCertificateInput) (*iam.DeleteServerCertificateOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DeleteServerCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.DeleteServerCertificateInput) (*iam.DeleteServerCertificateOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteServerCertificateInput) *iam.DeleteServerCertificateOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteServerCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteServerCertificateInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteServerCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServerCertificate'
type MockIAMAPI_DeleteServerCertificate_Call struct {
	*mock.Call
}

// DeleteServerCertificate is a helper method to define mock.On call
//   - _a0 *iam.DeleteServerCertificateInput
func (_e *MockIAMAPI_Expecter) DeleteServerCertificate(_a0 interface{}) *MockIAMAPI_DeleteServerCertificate_Call {
	return &MockIAMAPI_DeleteServerCertificate_Call{Call: _e.mock.On("DeleteServerCertificate", _a0)}
}

func (_c *MockIAMAPI_DeleteServerCertificate_Call) Run(run func(_a0 *iam.DeleteServerCertificateInput)) *MockIAMAPI_DeleteServerCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteServerCertificateInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteServerCertificate_Call) Return(_a0 *iam.DeleteServerCertificateOutput, _a1 error) *MockIAMAPI_DeleteServerCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteServerCertificate_Call) RunAndReturn(run func(*iam.DeleteServerCertificateInput) (*iam.DeleteServerCertificateOutput, error)) *MockIAMAPI_DeleteServerCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServerCertificateRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteServerCertificateRequest(_a0 *iam.DeleteServerCertificateInput) (*request.Request, *iam.DeleteServerCertificateOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.DeleteServerCertificateOutput
	if rf, ok := ret.Get(0).(func(*iam.DeleteServerCertificateInput) (*request.Request, *iam.DeleteServerCertificateOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteServerCertificateInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteServerCertificateInput) *iam.DeleteServerCertificateOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.DeleteServerCertificateOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_DeleteServerCertificateRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServerCertificateRequest'
type MockIAMAPI_DeleteServerCertificateRequest_Call struct {
	*mock.Call
}

// DeleteServerCertificateRequest is a helper method to define mock.On call
//   - _a0 *iam.DeleteServerCertificateInput
func (_e *MockIAMAPI_Expecter) DeleteServerCertificateRequest(_a0 interface{}) *MockIAMAPI_DeleteServerCertificateRequest_Call {
	return &MockIAMAPI_DeleteServerCertificateRequest_Call{Call: _e.mock.On("DeleteServerCertificateRequest", _a0)}
}

func (_c *MockIAMAPI_DeleteServerCertificateRequest_Call) Run(run func(_a0 *iam.DeleteServerCertificateInput)) *MockIAMAPI_DeleteServerCertificateRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteServerCertificateInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteServerCertificateRequest_Call) Return(_a0 *request.Request, _a1 *iam.DeleteServerCertificateOutput) *MockIAMAPI_DeleteServerCertificateRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteServerCertificateRequest_Call) RunAndReturn(run func(*iam.DeleteServerCertificateInput) (*request.Request, *iam.DeleteServerCertificateOutput)) *MockIAMAPI_DeleteServerCertificateRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServerCertificateWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) DeleteServerCertificateWithContext(_a0 context.Context, _a1 *iam.DeleteServerCertificateInput, _a2 ...request.Option) (*iam.DeleteServerCertificateOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.DeleteServerCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteServerCertificateInput, ...request.Option) (*iam.DeleteServerCertificateOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteServerCertificateInput, ...request.Option) *iam.DeleteServerCertificateOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteServerCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.DeleteServerCertificateInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteServerCertificateWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServerCertificateWithContext'
type MockIAMAPI_DeleteServerCertificateWithContext_Call struct {
	*mock.Call
}

// DeleteServerCertificateWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.DeleteServerCertificateInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) DeleteServerCertificateWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_DeleteServerCertificateWithContext_Call {
	return &MockIAMAPI_DeleteServerCertificateWithContext_Call{Call: _e.mock.On("DeleteServerCertificateWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_DeleteServerCertificateWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.DeleteServerCertificateInput, _a2 ...request.Option)) *MockIAMAPI_DeleteServerCertificateWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.DeleteServerCertificateInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_DeleteServerCertificateWithContext_Call) Return(_a0 *iam.DeleteServerCertificateOutput, _a1 error) *MockIAMAPI_DeleteServerCertificateWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteServerCertificateWithContext_Call) RunAndReturn(run func(context.Context, *iam.DeleteServerCertificateInput, ...request.Option) (*iam.DeleteServerCertificateOutput, error)) *MockIAMAPI_DeleteServerCertificateWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceLinkedRole provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteServiceLinkedRole(_a0 *iam.DeleteServiceLinkedRoleInput) (*iam.DeleteServiceLinkedRoleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DeleteServiceLinkedRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.DeleteServiceLinkedRoleInput) (*iam.DeleteServiceLinkedRoleOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteServiceLinkedRoleInput) *iam.DeleteServiceLinkedRoleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteServiceLinkedRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteServiceLinkedRoleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteServiceLinkedRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceLinkedRole'
type MockIAMAPI_DeleteServiceLinkedRole_Call struct {
	*mock.Call
}

// DeleteServiceLinkedRole is a helper method to define mock.On call
//   - _a0 *iam.DeleteServiceLinkedRoleInput
func (_e *MockIAMAPI_Expecter) DeleteServiceLinkedRole(_a0 interface{}) *MockIAMAPI_DeleteServiceLinkedRole_Call {
	return &MockIAMAPI_DeleteServiceLinkedRole_Call{Call: _e.mock.On("DeleteServiceLinkedRole", _a0)}
}

func (_c *MockIAMAPI_DeleteServiceLinkedRole_Call) Run(run func(_a0 *iam.DeleteServiceLinkedRoleInput)) *MockIAMAPI_DeleteServiceLinkedRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteServiceLinkedRoleInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteServiceLinkedRole_Call) Return(_a0 *iam.DeleteServiceLinkedRoleOutput, _a1 error) *MockIAMAPI_DeleteServiceLinkedRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteServiceLinkedRole_Call) RunAndReturn(run func(*iam.DeleteServiceLinkedRoleInput) (*iam.DeleteServiceLinkedRoleOutput, error)) *MockIAMAPI_DeleteServiceLinkedRole_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceLinkedRoleRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteServiceLinkedRoleRequest(_a0 *iam.DeleteServiceLinkedRoleInput) (*request.Request, *iam.DeleteServiceLinkedRoleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.DeleteServiceLinkedRoleOutput
	if rf, ok := ret.Get(0).(func(*iam.DeleteServiceLinkedRoleInput) (*request.Request, *iam.DeleteServiceLinkedRoleOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteServiceLinkedRoleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteServiceLinkedRoleInput) *iam.DeleteServiceLinkedRoleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.DeleteServiceLinkedRoleOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_DeleteServiceLinkedRoleRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceLinkedRoleRequest'
type MockIAMAPI_DeleteServiceLinkedRoleRequest_Call struct {
	*mock.Call
}

// DeleteServiceLinkedRoleRequest is a helper method to define mock.On call
//   - _a0 *iam.DeleteServiceLinkedRoleInput
func (_e *MockIAMAPI_Expecter) DeleteServiceLinkedRoleRequest(_a0 interface{}) *MockIAMAPI_DeleteServiceLinkedRoleRequest_Call {
	return &MockIAMAPI_DeleteServiceLinkedRoleRequest_Call{Call: _e.mock.On("DeleteServiceLinkedRoleRequest", _a0)}
}

func (_c *MockIAMAPI_DeleteServiceLinkedRoleRequest_Call) Run(run func(_a0 *iam.DeleteServiceLinkedRoleInput)) *MockIAMAPI_DeleteServiceLinkedRoleRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteServiceLinkedRoleInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteServiceLinkedRoleRequest_Call) Return(_a0 *request.Request, _a1 *iam.DeleteServiceLinkedRoleOutput) *MockIAMAPI_DeleteServiceLinkedRoleRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteServiceLinkedRoleRequest_Call) RunAndReturn(run func(*iam.DeleteServiceLinkedRoleInput) (*request.Request, *iam.DeleteServiceLinkedRoleOutput)) *MockIAMAPI_DeleteServiceLinkedRoleRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceLinkedRoleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) DeleteServiceLinkedRoleWithContext(_a0 context.Context, _a1 *iam.DeleteServiceLinkedRoleInput, _a2 ...request.Option) (*iam.DeleteServiceLinkedRoleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.DeleteServiceLinkedRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteServiceLinkedRoleInput, ...request.Option) (*iam.DeleteServiceLinkedRoleOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteServiceLinkedRoleInput, ...request.Option) *iam.DeleteServiceLinkedRoleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteServiceLinkedRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.DeleteServiceLinkedRoleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteServiceLinkedRoleWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceLinkedRoleWithContext'
type MockIAMAPI_DeleteServiceLinkedRoleWithContext_Call struct {
	*mock.Call
}

// DeleteServiceLinkedRoleWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.DeleteServiceLinkedRoleInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) DeleteServiceLinkedRoleWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_DeleteServiceLinkedRoleWithContext_Call {
	return &MockIAMAPI_DeleteServiceLinkedRoleWithContext_Call{Call: _e.mock.On("DeleteServiceLinkedRoleWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_DeleteServiceLinkedRoleWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.DeleteServiceLinkedRoleInput, _a2 ...request.Option)) *MockIAMAPI_DeleteServiceLinkedRoleWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.DeleteServiceLinkedRoleInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_DeleteServiceLinkedRoleWithContext_Call) Return(_a0 *iam.DeleteServiceLinkedRoleOutput, _a1 error) *MockIAMAPI_DeleteServiceLinkedRoleWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteServiceLinkedRoleWithContext_Call) RunAndReturn(run func(context.Context, *iam.DeleteServiceLinkedRoleInput, ...request.Option) (*iam.DeleteServiceLinkedRoleOutput, error)) *MockIAMAPI_DeleteServiceLinkedRoleWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceSpecificCredential provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteServiceSpecificCredential(_a0 *iam.DeleteServiceSpecificCredentialInput) (*iam.DeleteServiceSpecificCredentialOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DeleteServiceSpecificCredentialOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.DeleteServiceSpecificCredentialInput) (*iam.DeleteServiceSpecificCredentialOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteServiceSpecificCredentialInput) *iam.DeleteServiceSpecificCredentialOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteServiceSpecificCredentialOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteServiceSpecificCredentialInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteServiceSpecificCredential_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceSpecificCredential'
type MockIAMAPI_DeleteServiceSpecificCredential_Call struct {
	*mock.Call
}

// DeleteServiceSpecificCredential is a helper method to define mock.On call
//   - _a0 *iam.DeleteServiceSpecificCredentialInput
func (_e *MockIAMAPI_Expecter) DeleteServiceSpecificCredential(_a0 interface{}) *MockIAMAPI_DeleteServiceSpecificCredential_Call {
	return &MockIAMAPI_DeleteServiceSpecificCredential_Call{Call: _e.mock.On("DeleteServiceSpecificCredential", _a0)}
}

func (_c *MockIAMAPI_DeleteServiceSpecificCredential_Call) Run(run func(_a0 *iam.DeleteServiceSpecificCredentialInput)) *MockIAMAPI_DeleteServiceSpecificCredential_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteServiceSpecificCredentialInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteServiceSpecificCredential_Call) Return(_a0 *iam.DeleteServiceSpecificCredentialOutput, _a1 error) *MockIAMAPI_DeleteServiceSpecificCredential_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteServiceSpecificCredential_Call) RunAndReturn(run func(*iam.DeleteServiceSpecificCredentialInput) (*iam.DeleteServiceSpecificCredentialOutput, error)) *MockIAMAPI_DeleteServiceSpecificCredential_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceSpecificCredentialRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteServiceSpecificCredentialRequest(_a0 *iam.DeleteServiceSpecificCredentialInput) (*request.Request, *iam.DeleteServiceSpecificCredentialOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.DeleteServiceSpecificCredentialOutput
	if rf, ok := ret.Get(0).(func(*iam.DeleteServiceSpecificCredentialInput) (*request.Request, *iam.DeleteServiceSpecificCredentialOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteServiceSpecificCredentialInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteServiceSpecificCredentialInput) *iam.DeleteServiceSpecificCredentialOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.DeleteServiceSpecificCredentialOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_DeleteServiceSpecificCredentialRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceSpecificCredentialRequest'
type MockIAMAPI_DeleteServiceSpecificCredentialRequest_Call struct {
	*mock.Call
}

// DeleteServiceSpecificCredentialRequest is a helper method to define mock.On call
//   - _a0 *iam.DeleteServiceSpecificCredentialInput
func (_e *MockIAMAPI_Expecter) DeleteServiceSpecificCredentialRequest(_a0 interface{}) *MockIAMAPI_DeleteServiceSpecificCredentialRequest_Call {
	return &MockIAMAPI_DeleteServiceSpecificCredentialRequest_Call{Call: _e.mock.On("DeleteServiceSpecificCredentialRequest", _a0)}
}

func (_c *MockIAMAPI_DeleteServiceSpecificCredentialRequest_Call) Run(run func(_a0 *iam.DeleteServiceSpecificCredentialInput)) *MockIAMAPI_DeleteServiceSpecificCredentialRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteServiceSpecificCredentialInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteServiceSpecificCredentialRequest_Call) Return(_a0 *request.Request, _a1 *iam.DeleteServiceSpecificCredentialOutput) *MockIAMAPI_DeleteServiceSpecificCredentialRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteServiceSpecificCredentialRequest_Call) RunAndReturn(run func(*iam.DeleteServiceSpecificCredentialInput) (*request.Request, *iam.DeleteServiceSpecificCredentialOutput)) *MockIAMAPI_DeleteServiceSpecificCredentialRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceSpecificCredentialWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) DeleteServiceSpecificCredentialWithContext(_a0 context.Context, _a1 *iam.DeleteServiceSpecificCredentialInput, _a2 ...request.Option) (*iam.DeleteServiceSpecificCredentialOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.DeleteServiceSpecificCredentialOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteServiceSpecificCredentialInput, ...request.Option) (*iam.DeleteServiceSpecificCredentialOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteServiceSpecificCredentialInput, ...request.Option) *iam.DeleteServiceSpecificCredentialOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteServiceSpecificCredentialOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.DeleteServiceSpecificCredentialInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteServiceSpecificCredentialWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceSpecificCredentialWithContext'
type MockIAMAPI_DeleteServiceSpecificCredentialWithContext_Call struct {
	*mock.Call
}

// DeleteServiceSpecificCredentialWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.DeleteServiceSpecificCredentialInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) DeleteServiceSpecificCredentialWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_DeleteServiceSpecificCredentialWithContext_Call {
	return &MockIAMAPI_DeleteServiceSpecificCredentialWithContext_Call{Call: _e.mock.On("DeleteServiceSpecificCredentialWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_DeleteServiceSpecificCredentialWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.DeleteServiceSpecificCredentialInput, _a2 ...request.Option)) *MockIAMAPI_DeleteServiceSpecificCredentialWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.DeleteServiceSpecificCredentialInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_DeleteServiceSpecificCredentialWithContext_Call) Return(_a0 *iam.DeleteServiceSpecificCredentialOutput, _a1 error) *MockIAMAPI_DeleteServiceSpecificCredentialWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteServiceSpecificCredentialWithContext_Call) RunAndReturn(run func(context.Context, *iam.DeleteServiceSpecificCredentialInput, ...request.Option) (*iam.DeleteServiceSpecificCredentialOutput, error)) *MockIAMAPI_DeleteServiceSpecificCredentialWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSigningCertificate provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteSigningCertificate(_a0 *iam.DeleteSigningCertificateInput) (*iam.DeleteSigningCertificateOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DeleteSigningCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.DeleteSigningCertificateInput) (*iam.DeleteSigningCertificateOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteSigningCertificateInput) *iam.DeleteSigningCertificateOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteSigningCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteSigningCertificateInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteSigningCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSigningCertificate'
type MockIAMAPI_DeleteSigningCertificate_Call struct {
	*mock.Call
}

// DeleteSigningCertificate is a helper method to define mock.On call
//   - _a0 *iam.DeleteSigningCertificateInput
func (_e *MockIAMAPI_Expecter) DeleteSigningCertificate(_a0 interface{}) *MockIAMAPI_DeleteSigningCertificate_Call {
	return &MockIAMAPI_DeleteSigningCertificate_Call{Call: _e.mock.On("DeleteSigningCertificate", _a0)}
}

func (_c *MockIAMAPI_DeleteSigningCertificate_Call) Run(run func(_a0 *iam.DeleteSigningCertificateInput)) *MockIAMAPI_DeleteSigningCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteSigningCertificateInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteSigningCertificate_Call) Return(_a0 *iam.DeleteSigningCertificateOutput, _a1 error) *MockIAMAPI_DeleteSigningCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteSigningCertificate_Call) RunAndReturn(run func(*iam.DeleteSigningCertificateInput) (*iam.DeleteSigningCertificateOutput, error)) *MockIAMAPI_DeleteSigningCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSigningCertificateRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteSigningCertificateRequest(_a0 *iam.DeleteSigningCertificateInput) (*request.Request, *iam.DeleteSigningCertificateOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.DeleteSigningCertificateOutput
	if rf, ok := ret.Get(0).(func(*iam.DeleteSigningCertificateInput) (*request.Request, *iam.DeleteSigningCertificateOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteSigningCertificateInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteSigningCertificateInput) *iam.DeleteSigningCertificateOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.DeleteSigningCertificateOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_DeleteSigningCertificateRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSigningCertificateRequest'
type MockIAMAPI_DeleteSigningCertificateRequest_Call struct {
	*mock.Call
}

// DeleteSigningCertificateRequest is a helper method to define mock.On call
//   - _a0 *iam.DeleteSigningCertificateInput
func (_e *MockIAMAPI_Expecter) DeleteSigningCertificateRequest(_a0 interface{}) *MockIAMAPI_DeleteSigningCertificateRequest_Call {
	return &MockIAMAPI_DeleteSigningCertificateRequest_Call{Call: _e.mock.On("DeleteSigningCertificateRequest", _a0)}
}

func (_c *MockIAMAPI_DeleteSigningCertificateRequest_Call) Run(run func(_a0 *iam.DeleteSigningCertificateInput)) *MockIAMAPI_DeleteSigningCertificateRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteSigningCertificateInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteSigningCertificateRequest_Call) Return(_a0 *request.Request, _a1 *iam.DeleteSigningCertificateOutput) *MockIAMAPI_DeleteSigningCertificateRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteSigningCertificateRequest_Call) RunAndReturn(run func(*iam.DeleteSigningCertificateInput) (*request.Request, *iam.DeleteSigningCertificateOutput)) *MockIAMAPI_DeleteSigningCertificateRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSigningCertificateWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) DeleteSigningCertificateWithContext(_a0 context.Context, _a1 *iam.DeleteSigningCertificateInput, _a2 ...request.Option) (*iam.DeleteSigningCertificateOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.DeleteSigningCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteSigningCertificateInput, ...request.Option) (*iam.DeleteSigningCertificateOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteSigningCertificateInput, ...request.Option) *iam.DeleteSigningCertificateOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteSigningCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.DeleteSigningCertificateInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteSigningCertificateWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSigningCertificateWithContext'
type MockIAMAPI_DeleteSigningCertificateWithContext_Call struct {
	*mock.Call
}

// DeleteSigningCertificateWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.DeleteSigningCertificateInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) DeleteSigningCertificateWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_DeleteSigningCertificateWithContext_Call {
	return &MockIAMAPI_DeleteSigningCertificateWithContext_Call{Call: _e.mock.On("DeleteSigningCertificateWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_DeleteSigningCertificateWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.DeleteSigningCertificateInput, _a2 ...request.Option)) *MockIAMAPI_DeleteSigningCertificateWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.DeleteSigningCertificateInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_DeleteSigningCertificateWithContext_Call) Return(_a0 *iam.DeleteSigningCertificateOutput, _a1 error) *MockIAMAPI_DeleteSigningCertificateWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteSigningCertificateWithContext_Call) RunAndReturn(run func(context.Context, *iam.DeleteSigningCertificateInput, ...request.Option) (*iam.DeleteSigningCertificateOutput, error)) *MockIAMAPI_DeleteSigningCertificateWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteUser(_a0 *iam.DeleteUserInput) (*iam.DeleteUserOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DeleteUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.DeleteUserInput) (*iam.DeleteUserOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteUserInput) *iam.DeleteUserOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteUserInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockIAMAPI_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - _a0 *iam.DeleteUserInput
func (_e *MockIAMAPI_Expecter) DeleteUser(_a0 interface{}) *MockIAMAPI_DeleteUser_Call {
	return &MockIAMAPI_DeleteUser_Call{Call: _e.mock.On("DeleteUser", _a0)}
}

func (_c *MockIAMAPI_DeleteUser_Call) Run(run func(_a0 *iam.DeleteUserInput)) *MockIAMAPI_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteUserInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteUser_Call) Return(_a0 *iam.DeleteUserOutput, _a1 error) *MockIAMAPI_DeleteUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteUser_Call) RunAndReturn(run func(*iam.DeleteUserInput) (*iam.DeleteUserOutput, error)) *MockIAMAPI_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserPermissionsBoundary provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteUserPermissionsBoundary(_a0 *iam.DeleteUserPermissionsBoundaryInput) (*iam.DeleteUserPermissionsBoundaryOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DeleteUserPermissionsBoundaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.DeleteUserPermissionsBoundaryInput) (*iam.DeleteUserPermissionsBoundaryOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteUserPermissionsBoundaryInput) *iam.DeleteUserPermissionsBoundaryOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteUserPermissionsBoundaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteUserPermissionsBoundaryInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteUserPermissionsBoundary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserPermissionsBoundary'
type MockIAMAPI_DeleteUserPermissionsBoundary_Call struct {
	*mock.Call
}

// DeleteUserPermissionsBoundary is a helper method to define mock.On call
//   - _a0 *iam.DeleteUserPermissionsBoundaryInput
func (_e *MockIAMAPI_Expecter) DeleteUserPermissionsBoundary(_a0 interface{}) *MockIAMAPI_DeleteUserPermissionsBoundary_Call {
	return &MockIAMAPI_DeleteUserPermissionsBoundary_Call{Call: _e.mock.On("DeleteUserPermissionsBoundary", _a0)}
}

func (_c *MockIAMAPI_DeleteUserPermissionsBoundary_Call) Run(run func(_a0 *iam.DeleteUserPermissionsBoundaryInput)) *MockIAMAPI_DeleteUserPermissionsBoundary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteUserPermissionsBoundaryInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteUserPermissionsBoundary_Call) Return(_a0 *iam.DeleteUserPermissionsBoundaryOutput, _a1 error) *MockIAMAPI_DeleteUserPermissionsBoundary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteUserPermissionsBoundary_Call) RunAndReturn(run func(*iam.DeleteUserPermissionsBoundaryInput) (*iam.DeleteUserPermissionsBoundaryOutput, error)) *MockIAMAPI_DeleteUserPermissionsBoundary_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserPermissionsBoundaryRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteUserPermissionsBoundaryRequest(_a0 *iam.DeleteUserPermissionsBoundaryInput) (*request.Request, *iam.DeleteUserPermissionsBoundaryOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.DeleteUserPermissionsBoundaryOutput
	if rf, ok := ret.Get(0).(func(*iam.DeleteUserPermissionsBoundaryInput) (*request.Request, *iam.DeleteUserPermissionsBoundaryOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteUserPermissionsBoundaryInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteUserPermissionsBoundaryInput) *iam.DeleteUserPermissionsBoundaryOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.DeleteUserPermissionsBoundaryOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_DeleteUserPermissionsBoundaryRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserPermissionsBoundaryRequest'
type MockIAMAPI_DeleteUserPermissionsBoundaryRequest_Call struct {
	*mock.Call
}

// DeleteUserPermissionsBoundaryRequest is a helper method to define mock.On call
//   - _a0 *iam.DeleteUserPermissionsBoundaryInput
func (_e *MockIAMAPI_Expecter) DeleteUserPermissionsBoundaryRequest(_a0 interface{}) *MockIAMAPI_DeleteUserPermissionsBoundaryRequest_Call {
	return &MockIAMAPI_DeleteUserPermissionsBoundaryRequest_Call{Call: _e.mock.On("DeleteUserPermissionsBoundaryRequest", _a0)}
}

func (_c *MockIAMAPI_DeleteUserPermissionsBoundaryRequest_Call) Run(run func(_a0 *iam.DeleteUserPermissionsBoundaryInput)) *MockIAMAPI_DeleteUserPermissionsBoundaryRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteUserPermissionsBoundaryInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteUserPermissionsBoundaryRequest_Call) Return(_a0 *request.Request, _a1 *iam.DeleteUserPermissionsBoundaryOutput) *MockIAMAPI_DeleteUserPermissionsBoundaryRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteUserPermissionsBoundaryRequest_Call) RunAndReturn(run func(*iam.DeleteUserPermissionsBoundaryInput) (*request.Request, *iam.DeleteUserPermissionsBoundaryOutput)) *MockIAMAPI_DeleteUserPermissionsBoundaryRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserPermissionsBoundaryWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) DeleteUserPermissionsBoundaryWithContext(_a0 context.Context, _a1 *iam.DeleteUserPermissionsBoundaryInput, _a2 ...request.Option) (*iam.DeleteUserPermissionsBoundaryOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.DeleteUserPermissionsBoundaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteUserPermissionsBoundaryInput, ...request.Option) (*iam.DeleteUserPermissionsBoundaryOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteUserPermissionsBoundaryInput, ...request.Option) *iam.DeleteUserPermissionsBoundaryOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteUserPermissionsBoundaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.DeleteUserPermissionsBoundaryInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteUserPermissionsBoundaryWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserPermissionsBoundaryWithContext'
type MockIAMAPI_DeleteUserPermissionsBoundaryWithContext_Call struct {
	*mock.Call
}

// DeleteUserPermissionsBoundaryWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.DeleteUserPermissionsBoundaryInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) DeleteUserPermissionsBoundaryWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_DeleteUserPermissionsBoundaryWithContext_Call {
	return &MockIAMAPI_DeleteUserPermissionsBoundaryWithContext_Call{Call: _e.mock.On("DeleteUserPermissionsBoundaryWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_DeleteUserPermissionsBoundaryWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.DeleteUserPermissionsBoundaryInput, _a2 ...request.Option)) *MockIAMAPI_DeleteUserPermissionsBoundaryWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.DeleteUserPermissionsBoundaryInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_DeleteUserPermissionsBoundaryWithContext_Call) Return(_a0 *iam.DeleteUserPermissionsBoundaryOutput, _a1 error) *MockIAMAPI_DeleteUserPermissionsBoundaryWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteUserPermissionsBoundaryWithContext_Call) RunAndReturn(run func(context.Context, *iam.DeleteUserPermissionsBoundaryInput, ...request.Option) (*iam.DeleteUserPermissionsBoundaryOutput, error)) *MockIAMAPI_DeleteUserPermissionsBoundaryWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserPolicy provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteUserPolicy(_a0 *iam.DeleteUserPolicyInput) (*iam.DeleteUserPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DeleteUserPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.DeleteUserPolicyInput) (*iam.DeleteUserPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteUserPolicyInput) *iam.DeleteUserPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteUserPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteUserPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteUserPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserPolicy'
type MockIAMAPI_DeleteUserPolicy_Call struct {
	*mock.Call
}

// DeleteUserPolicy is a helper method to define mock.On call
//   - _a0 *iam.DeleteUserPolicyInput
func (_e *MockIAMAPI_Expecter) DeleteUserPolicy(_a0 interface{}) *MockIAMAPI_DeleteUserPolicy_Call {
	return &MockIAMAPI_DeleteUserPolicy_Call{Call: _e.mock.On("DeleteUserPolicy", _a0)}
}

func (_c *MockIAMAPI_DeleteUserPolicy_Call) Run(run func(_a0 *iam.DeleteUserPolicyInput)) *MockIAMAPI_DeleteUserPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteUserPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteUserPolicy_Call) Return(_a0 *iam.DeleteUserPolicyOutput, _a1 error) *MockIAMAPI_DeleteUserPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteUserPolicy_Call) RunAndReturn(run func(*iam.DeleteUserPolicyInput) (*iam.DeleteUserPolicyOutput, error)) *MockIAMAPI_DeleteUserPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserPolicyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteUserPolicyRequest(_a0 *iam.DeleteUserPolicyInput) (*request.Request, *iam.DeleteUserPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.DeleteUserPolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.DeleteUserPolicyInput) (*request.Request, *iam.DeleteUserPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteUserPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteUserPolicyInput) *iam.DeleteUserPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.DeleteUserPolicyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_DeleteUserPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserPolicyRequest'
type MockIAMAPI_DeleteUserPolicyRequest_Call struct {
	*mock.Call
}

// DeleteUserPolicyRequest is a helper method to define mock.On call
//   - _a0 *iam.DeleteUserPolicyInput
func (_e *MockIAMAPI_Expecter) DeleteUserPolicyRequest(_a0 interface{}) *MockIAMAPI_DeleteUserPolicyRequest_Call {
	return &MockIAMAPI_DeleteUserPolicyRequest_Call{Call: _e.mock.On("DeleteUserPolicyRequest", _a0)}
}

func (_c *MockIAMAPI_DeleteUserPolicyRequest_Call) Run(run func(_a0 *iam.DeleteUserPolicyInput)) *MockIAMAPI_DeleteUserPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteUserPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteUserPolicyRequest_Call) Return(_a0 *request.Request, _a1 *iam.DeleteUserPolicyOutput) *MockIAMAPI_DeleteUserPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteUserPolicyRequest_Call) RunAndReturn(run func(*iam.DeleteUserPolicyInput) (*request.Request, *iam.DeleteUserPolicyOutput)) *MockIAMAPI_DeleteUserPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) DeleteUserPolicyWithContext(_a0 context.Context, _a1 *iam.DeleteUserPolicyInput, _a2 ...request.Option) (*iam.DeleteUserPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.DeleteUserPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteUserPolicyInput, ...request.Option) (*iam.DeleteUserPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteUserPolicyInput, ...request.Option) *iam.DeleteUserPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteUserPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.DeleteUserPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteUserPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserPolicyWithContext'
type MockIAMAPI_DeleteUserPolicyWithContext_Call struct {
	*mock.Call
}

// DeleteUserPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.DeleteUserPolicyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) DeleteUserPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_DeleteUserPolicyWithContext_Call {
	return &MockIAMAPI_DeleteUserPolicyWithContext_Call{Call: _e.mock.On("DeleteUserPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_DeleteUserPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.DeleteUserPolicyInput, _a2 ...request.Option)) *MockIAMAPI_DeleteUserPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.DeleteUserPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_DeleteUserPolicyWithContext_Call) Return(_a0 *iam.DeleteUserPolicyOutput, _a1 error) *MockIAMAPI_DeleteUserPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteUserPolicyWithContext_Call) RunAndReturn(run func(context.Context, *iam.DeleteUserPolicyInput, ...request.Option) (*iam.DeleteUserPolicyOutput, error)) *MockIAMAPI_DeleteUserPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteUserRequest(_a0 *iam.DeleteUserInput) (*request.Request, *iam.DeleteUserOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.DeleteUserOutput
	if rf, ok := ret.Get(0).(func(*iam.DeleteUserInput) (*request.Request, *iam.DeleteUserOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteUserInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteUserInput) *iam.DeleteUserOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.DeleteUserOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_DeleteUserRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserRequest'
type MockIAMAPI_DeleteUserRequest_Call struct {
	*mock.Call
}

// DeleteUserRequest is a helper method to define mock.On call
//   - _a0 *iam.DeleteUserInput
func (_e *MockIAMAPI_Expecter) DeleteUserRequest(_a0 interface{}) *MockIAMAPI_DeleteUserRequest_Call {
	return &MockIAMAPI_DeleteUserRequest_Call{Call: _e.mock.On("DeleteUserRequest", _a0)}
}

func (_c *MockIAMAPI_DeleteUserRequest_Call) Run(run func(_a0 *iam.DeleteUserInput)) *MockIAMAPI_DeleteUserRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteUserInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteUserRequest_Call) Return(_a0 *request.Request, _a1 *iam.DeleteUserOutput) *MockIAMAPI_DeleteUserRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteUserRequest_Call) RunAndReturn(run func(*iam.DeleteUserInput) (*request.Request, *iam.DeleteUserOutput)) *MockIAMAPI_DeleteUserRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) DeleteUserWithContext(_a0 context.Context, _a1 *iam.DeleteUserInput, _a2 ...request.Option) (*iam.DeleteUserOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.DeleteUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteUserInput, ...request.Option) (*iam.DeleteUserOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteUserInput, ...request.Option) *iam.DeleteUserOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.DeleteUserInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteUserWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserWithContext'
type MockIAMAPI_DeleteUserWithContext_Call struct {
	*mock.Call
}

// DeleteUserWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.DeleteUserInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) DeleteUserWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_DeleteUserWithContext_Call {
	return &MockIAMAPI_DeleteUserWithContext_Call{Call: _e.mock.On("DeleteUserWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_DeleteUserWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.DeleteUserInput, _a2 ...request.Option)) *MockIAMAPI_DeleteUserWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.DeleteUserInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_DeleteUserWithContext_Call) Return(_a0 *iam.DeleteUserOutput, _a1 error) *MockIAMAPI_DeleteUserWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteUserWithContext_Call) RunAndReturn(run func(context.Context, *iam.DeleteUserInput, ...request.Option) (*iam.DeleteUserOutput, error)) *MockIAMAPI_DeleteUserWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVirtualMFADevice provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteVirtualMFADevice(_a0 *iam.DeleteVirtualMFADeviceInput) (*iam.DeleteVirtualMFADeviceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DeleteVirtualMFADeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.DeleteVirtualMFADeviceInput) (*iam.DeleteVirtualMFADeviceOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteVirtualMFADeviceInput) *iam.DeleteVirtualMFADeviceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteVirtualMFADeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteVirtualMFADeviceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteVirtualMFADevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVirtualMFADevice'
type MockIAMAPI_DeleteVirtualMFADevice_Call struct {
	*mock.Call
}

// DeleteVirtualMFADevice is a helper method to define mock.On call
//   - _a0 *iam.DeleteVirtualMFADeviceInput
func (_e *MockIAMAPI_Expecter) DeleteVirtualMFADevice(_a0 interface{}) *MockIAMAPI_DeleteVirtualMFADevice_Call {
	return &MockIAMAPI_DeleteVirtualMFADevice_Call{Call: _e.mock.On("DeleteVirtualMFADevice", _a0)}
}

func (_c *MockIAMAPI_DeleteVirtualMFADevice_Call) Run(run func(_a0 *iam.DeleteVirtualMFADeviceInput)) *MockIAMAPI_DeleteVirtualMFADevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteVirtualMFADeviceInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteVirtualMFADevice_Call) Return(_a0 *iam.DeleteVirtualMFADeviceOutput, _a1 error) *MockIAMAPI_DeleteVirtualMFADevice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteVirtualMFADevice_Call) RunAndReturn(run func(*iam.DeleteVirtualMFADeviceInput) (*iam.DeleteVirtualMFADeviceOutput, error)) *MockIAMAPI_DeleteVirtualMFADevice_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVirtualMFADeviceRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DeleteVirtualMFADeviceRequest(_a0 *iam.DeleteVirtualMFADeviceInput) (*request.Request, *iam.DeleteVirtualMFADeviceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.DeleteVirtualMFADeviceOutput
	if rf, ok := ret.Get(0).(func(*iam.DeleteVirtualMFADeviceInput) (*request.Request, *iam.DeleteVirtualMFADeviceOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DeleteVirtualMFADeviceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DeleteVirtualMFADeviceInput) *iam.DeleteVirtualMFADeviceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.DeleteVirtualMFADeviceOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_DeleteVirtualMFADeviceRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVirtualMFADeviceRequest'
type MockIAMAPI_DeleteVirtualMFADeviceRequest_Call struct {
	*mock.Call
}

// DeleteVirtualMFADeviceRequest is a helper method to define mock.On call
//   - _a0 *iam.DeleteVirtualMFADeviceInput
func (_e *MockIAMAPI_Expecter) DeleteVirtualMFADeviceRequest(_a0 interface{}) *MockIAMAPI_DeleteVirtualMFADeviceRequest_Call {
	return &MockIAMAPI_DeleteVirtualMFADeviceRequest_Call{Call: _e.mock.On("DeleteVirtualMFADeviceRequest", _a0)}
}

func (_c *MockIAMAPI_DeleteVirtualMFADeviceRequest_Call) Run(run func(_a0 *iam.DeleteVirtualMFADeviceInput)) *MockIAMAPI_DeleteVirtualMFADeviceRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DeleteVirtualMFADeviceInput))
	})
	return _c
}

func (_c *MockIAMAPI_DeleteVirtualMFADeviceRequest_Call) Return(_a0 *request.Request, _a1 *iam.DeleteVirtualMFADeviceOutput) *MockIAMAPI_DeleteVirtualMFADeviceRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteVirtualMFADeviceRequest_Call) RunAndReturn(run func(*iam.DeleteVirtualMFADeviceInput) (*request.Request, *iam.DeleteVirtualMFADeviceOutput)) *MockIAMAPI_DeleteVirtualMFADeviceRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVirtualMFADeviceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) DeleteVirtualMFADeviceWithContext(_a0 context.Context, _a1 *iam.DeleteVirtualMFADeviceInput, _a2 ...request.Option) (*iam.DeleteVirtualMFADeviceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.DeleteVirtualMFADeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteVirtualMFADeviceInput, ...request.Option) (*iam.DeleteVirtualMFADeviceOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DeleteVirtualMFADeviceInput, ...request.Option) *iam.DeleteVirtualMFADeviceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DeleteVirtualMFADeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.DeleteVirtualMFADeviceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DeleteVirtualMFADeviceWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVirtualMFADeviceWithContext'
type MockIAMAPI_DeleteVirtualMFADeviceWithContext_Call struct {
	*mock.Call
}

// DeleteVirtualMFADeviceWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.DeleteVirtualMFADeviceInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) DeleteVirtualMFADeviceWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_DeleteVirtualMFADeviceWithContext_Call {
	return &MockIAMAPI_DeleteVirtualMFADeviceWithContext_Call{Call: _e.mock.On("DeleteVirtualMFADeviceWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_DeleteVirtualMFADeviceWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.DeleteVirtualMFADeviceInput, _a2 ...request.Option)) *MockIAMAPI_DeleteVirtualMFADeviceWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.DeleteVirtualMFADeviceInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_DeleteVirtualMFADeviceWithContext_Call) Return(_a0 *iam.DeleteVirtualMFADeviceOutput, _a1 error) *MockIAMAPI_DeleteVirtualMFADeviceWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DeleteVirtualMFADeviceWithContext_Call) RunAndReturn(run func(context.Context, *iam.DeleteVirtualMFADeviceInput, ...request.Option) (*iam.DeleteVirtualMFADeviceOutput, error)) *MockIAMAPI_DeleteVirtualMFADeviceWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DetachGroupPolicy provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DetachGroupPolicy(_a0 *iam.DetachGroupPolicyInput) (*iam.DetachGroupPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DetachGroupPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.DetachGroupPolicyInput) (*iam.DetachGroupPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DetachGroupPolicyInput) *iam.DetachGroupPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DetachGroupPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DetachGroupPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DetachGroupPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachGroupPolicy'
type MockIAMAPI_DetachGroupPolicy_Call struct {
	*mock.Call
}

// DetachGroupPolicy is a helper method to define mock.On call
//   - _a0 *iam.DetachGroupPolicyInput
func (_e *MockIAMAPI_Expecter) DetachGroupPolicy(_a0 interface{}) *MockIAMAPI_DetachGroupPolicy_Call {
	return &MockIAMAPI_DetachGroupPolicy_Call{Call: _e.mock.On("DetachGroupPolicy", _a0)}
}

func (_c *MockIAMAPI_DetachGroupPolicy_Call) Run(run func(_a0 *iam.DetachGroupPolicyInput)) *MockIAMAPI_DetachGroupPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DetachGroupPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_DetachGroupPolicy_Call) Return(_a0 *iam.DetachGroupPolicyOutput, _a1 error) *MockIAMAPI_DetachGroupPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DetachGroupPolicy_Call) RunAndReturn(run func(*iam.DetachGroupPolicyInput) (*iam.DetachGroupPolicyOutput, error)) *MockIAMAPI_DetachGroupPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DetachGroupPolicyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DetachGroupPolicyRequest(_a0 *iam.DetachGroupPolicyInput) (*request.Request, *iam.DetachGroupPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.DetachGroupPolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.DetachGroupPolicyInput) (*request.Request, *iam.DetachGroupPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DetachGroupPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DetachGroupPolicyInput) *iam.DetachGroupPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.DetachGroupPolicyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_DetachGroupPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachGroupPolicyRequest'
type MockIAMAPI_DetachGroupPolicyRequest_Call struct {
	*mock.Call
}

// DetachGroupPolicyRequest is a helper method to define mock.On call
//   - _a0 *iam.DetachGroupPolicyInput
func (_e *MockIAMAPI_Expecter) DetachGroupPolicyRequest(_a0 interface{}) *MockIAMAPI_DetachGroupPolicyRequest_Call {
	return &MockIAMAPI_DetachGroupPolicyRequest_Call{Call: _e.mock.On("DetachGroupPolicyRequest", _a0)}
}

func (_c *MockIAMAPI_DetachGroupPolicyRequest_Call) Run(run func(_a0 *iam.DetachGroupPolicyInput)) *MockIAMAPI_DetachGroupPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DetachGroupPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_DetachGroupPolicyRequest_Call) Return(_a0 *request.Request, _a1 *iam.DetachGroupPolicyOutput) *MockIAMAPI_DetachGroupPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DetachGroupPolicyRequest_Call) RunAndReturn(run func(*iam.DetachGroupPolicyInput) (*request.Request, *iam.DetachGroupPolicyOutput)) *MockIAMAPI_DetachGroupPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DetachGroupPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) DetachGroupPolicyWithContext(_a0 context.Context, _a1 *iam.DetachGroupPolicyInput, _a2 ...request.Option) (*iam.DetachGroupPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.DetachGroupPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DetachGroupPolicyInput, ...request.Option) (*iam.DetachGroupPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DetachGroupPolicyInput, ...request.Option) *iam.DetachGroupPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DetachGroupPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.DetachGroupPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DetachGroupPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachGroupPolicyWithContext'
type MockIAMAPI_DetachGroupPolicyWithContext_Call struct {
	*mock.Call
}

// DetachGroupPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.DetachGroupPolicyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) DetachGroupPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_DetachGroupPolicyWithContext_Call {
	return &MockIAMAPI_DetachGroupPolicyWithContext_Call{Call: _e.mock.On("DetachGroupPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_DetachGroupPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.DetachGroupPolicyInput, _a2 ...request.Option)) *MockIAMAPI_DetachGroupPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.DetachGroupPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_DetachGroupPolicyWithContext_Call) Return(_a0 *iam.DetachGroupPolicyOutput, _a1 error) *MockIAMAPI_DetachGroupPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DetachGroupPolicyWithContext_Call) RunAndReturn(run func(context.Context, *iam.DetachGroupPolicyInput, ...request.Option) (*iam.DetachGroupPolicyOutput, error)) *MockIAMAPI_DetachGroupPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DetachRolePolicy provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DetachRolePolicy(_a0 *iam.DetachRolePolicyInput) (*iam.DetachRolePolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DetachRolePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.DetachRolePolicyInput) (*iam.DetachRolePolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DetachRolePolicyInput) *iam.DetachRolePolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DetachRolePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DetachRolePolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DetachRolePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachRolePolicy'
type MockIAMAPI_DetachRolePolicy_Call struct {
	*mock.Call
}

// DetachRolePolicy is a helper method to define mock.On call
//   - _a0 *iam.DetachRolePolicyInput
func (_e *MockIAMAPI_Expecter) DetachRolePolicy(_a0 interface{}) *MockIAMAPI_DetachRolePolicy_Call {
	return &MockIAMAPI_DetachRolePolicy_Call{Call: _e.mock.On("DetachRolePolicy", _a0)}
}

func (_c *MockIAMAPI_DetachRolePolicy_Call) Run(run func(_a0 *iam.DetachRolePolicyInput)) *MockIAMAPI_DetachRolePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DetachRolePolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_DetachRolePolicy_Call) Return(_a0 *iam.DetachRolePolicyOutput, _a1 error) *MockIAMAPI_DetachRolePolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DetachRolePolicy_Call) RunAndReturn(run func(*iam.DetachRolePolicyInput) (*iam.DetachRolePolicyOutput, error)) *MockIAMAPI_DetachRolePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DetachRolePolicyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DetachRolePolicyRequest(_a0 *iam.DetachRolePolicyInput) (*request.Request, *iam.DetachRolePolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.DetachRolePolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.DetachRolePolicyInput) (*request.Request, *iam.DetachRolePolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DetachRolePolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DetachRolePolicyInput) *iam.DetachRolePolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.DetachRolePolicyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_DetachRolePolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachRolePolicyRequest'
type MockIAMAPI_DetachRolePolicyRequest_Call struct {
	*mock.Call
}

// DetachRolePolicyRequest is a helper method to define mock.On call
//   - _a0 *iam.DetachRolePolicyInput
func (_e *MockIAMAPI_Expecter) DetachRolePolicyRequest(_a0 interface{}) *MockIAMAPI_DetachRolePolicyRequest_Call {
	return &MockIAMAPI_DetachRolePolicyRequest_Call{Call: _e.mock.On("DetachRolePolicyRequest", _a0)}
}

func (_c *MockIAMAPI_DetachRolePolicyRequest_Call) Run(run func(_a0 *iam.DetachRolePolicyInput)) *MockIAMAPI_DetachRolePolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DetachRolePolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_DetachRolePolicyRequest_Call) Return(_a0 *request.Request, _a1 *iam.DetachRolePolicyOutput) *MockIAMAPI_DetachRolePolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DetachRolePolicyRequest_Call) RunAndReturn(run func(*iam.DetachRolePolicyInput) (*request.Request, *iam.DetachRolePolicyOutput)) *MockIAMAPI_DetachRolePolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DetachRolePolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) DetachRolePolicyWithContext(_a0 context.Context, _a1 *iam.DetachRolePolicyInput, _a2 ...request.Option) (*iam.DetachRolePolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.DetachRolePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DetachRolePolicyInput, ...request.Option) (*iam.DetachRolePolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DetachRolePolicyInput, ...request.Option) *iam.DetachRolePolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DetachRolePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.DetachRolePolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DetachRolePolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachRolePolicyWithContext'
type MockIAMAPI_DetachRolePolicyWithContext_Call struct {
	*mock.Call
}

// DetachRolePolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.DetachRolePolicyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) DetachRolePolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_DetachRolePolicyWithContext_Call {
	return &MockIAMAPI_DetachRolePolicyWithContext_Call{Call: _e.mock.On("DetachRolePolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_DetachRolePolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.DetachRolePolicyInput, _a2 ...request.Option)) *MockIAMAPI_DetachRolePolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.DetachRolePolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_DetachRolePolicyWithContext_Call) Return(_a0 *iam.DetachRolePolicyOutput, _a1 error) *MockIAMAPI_DetachRolePolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DetachRolePolicyWithContext_Call) RunAndReturn(run func(context.Context, *iam.DetachRolePolicyInput, ...request.Option) (*iam.DetachRolePolicyOutput, error)) *MockIAMAPI_DetachRolePolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DetachUserPolicy provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DetachUserPolicy(_a0 *iam.DetachUserPolicyInput) (*iam.DetachUserPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.DetachUserPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.DetachUserPolicyInput) (*iam.DetachUserPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DetachUserPolicyInput) *iam.DetachUserPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DetachUserPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DetachUserPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DetachUserPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachUserPolicy'
type MockIAMAPI_DetachUserPolicy_Call struct {
	*mock.Call
}

// DetachUserPolicy is a helper method to define mock.On call
//   - _a0 *iam.DetachUserPolicyInput
func (_e *MockIAMAPI_Expecter) DetachUserPolicy(_a0 interface{}) *MockIAMAPI_DetachUserPolicy_Call {
	return &MockIAMAPI_DetachUserPolicy_Call{Call: _e.mock.On("DetachUserPolicy", _a0)}
}

func (_c *MockIAMAPI_DetachUserPolicy_Call) Run(run func(_a0 *iam.DetachUserPolicyInput)) *MockIAMAPI_DetachUserPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DetachUserPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_DetachUserPolicy_Call) Return(_a0 *iam.DetachUserPolicyOutput, _a1 error) *MockIAMAPI_DetachUserPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DetachUserPolicy_Call) RunAndReturn(run func(*iam.DetachUserPolicyInput) (*iam.DetachUserPolicyOutput, error)) *MockIAMAPI_DetachUserPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DetachUserPolicyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) DetachUserPolicyRequest(_a0 *iam.DetachUserPolicyInput) (*request.Request, *iam.DetachUserPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.DetachUserPolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.DetachUserPolicyInput) (*request.Request, *iam.DetachUserPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.DetachUserPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.DetachUserPolicyInput) *iam.DetachUserPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.DetachUserPolicyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_DetachUserPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachUserPolicyRequest'
type MockIAMAPI_DetachUserPolicyRequest_Call struct {
	*mock.Call
}

// DetachUserPolicyRequest is a helper method to define mock.On call
//   - _a0 *iam.DetachUserPolicyInput
func (_e *MockIAMAPI_Expecter) DetachUserPolicyRequest(_a0 interface{}) *MockIAMAPI_DetachUserPolicyRequest_Call {
	return &MockIAMAPI_DetachUserPolicyRequest_Call{Call: _e.mock.On("DetachUserPolicyRequest", _a0)}
}

func (_c *MockIAMAPI_DetachUserPolicyRequest_Call) Run(run func(_a0 *iam.DetachUserPolicyInput)) *MockIAMAPI_DetachUserPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.DetachUserPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_DetachUserPolicyRequest_Call) Return(_a0 *request.Request, _a1 *iam.DetachUserPolicyOutput) *MockIAMAPI_DetachUserPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DetachUserPolicyRequest_Call) RunAndReturn(run func(*iam.DetachUserPolicyInput) (*request.Request, *iam.DetachUserPolicyOutput)) *MockIAMAPI_DetachUserPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DetachUserPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) DetachUserPolicyWithContext(_a0 context.Context, _a1 *iam.DetachUserPolicyInput, _a2 ...request.Option) (*iam.DetachUserPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.DetachUserPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DetachUserPolicyInput, ...request.Option) (*iam.DetachUserPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.DetachUserPolicyInput, ...request.Option) *iam.DetachUserPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.DetachUserPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.DetachUserPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_DetachUserPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachUserPolicyWithContext'
type MockIAMAPI_DetachUserPolicyWithContext_Call struct {
	*mock.Call
}

// DetachUserPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.DetachUserPolicyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) DetachUserPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_DetachUserPolicyWithContext_Call {
	return &MockIAMAPI_DetachUserPolicyWithContext_Call{Call: _e.mock.On("DetachUserPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_DetachUserPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.DetachUserPolicyInput, _a2 ...request.Option)) *MockIAMAPI_DetachUserPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.DetachUserPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_DetachUserPolicyWithContext_Call) Return(_a0 *iam.DetachUserPolicyOutput, _a1 error) *MockIAMAPI_DetachUserPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_DetachUserPolicyWithContext_Call) RunAndReturn(run func(context.Context, *iam.DetachUserPolicyInput, ...request.Option) (*iam.DetachUserPolicyOutput, error)) *MockIAMAPI_DetachUserPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// EnableMFADevice provides a mock function with given fields: _a0
func (_m *MockIAMAPI) EnableMFADevice(_a0 *iam.EnableMFADeviceInput) (*iam.EnableMFADeviceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.EnableMFADeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.EnableMFADeviceInput) (*iam.EnableMFADeviceOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.EnableMFADeviceInput) *iam.EnableMFADeviceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.EnableMFADeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.EnableMFADeviceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_EnableMFADevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableMFADevice'
type MockIAMAPI_EnableMFADevice_Call struct {
	*mock.Call
}

// EnableMFADevice is a helper method to define mock.On call
//   - _a0 *iam.EnableMFADeviceInput
func (_e *MockIAMAPI_Expecter) EnableMFADevice(_a0 interface{}) *MockIAMAPI_EnableMFADevice_Call {
	return &MockIAMAPI_EnableMFADevice_Call{Call: _e.mock.On("EnableMFADevice", _a0)}
}

func (_c *MockIAMAPI_EnableMFADevice_Call) Run(run func(_a0 *iam.EnableMFADeviceInput)) *MockIAMAPI_EnableMFADevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.EnableMFADeviceInput))
	})
	return _c
}

func (_c *MockIAMAPI_EnableMFADevice_Call) Return(_a0 *iam.EnableMFADeviceOutput, _a1 error) *MockIAMAPI_EnableMFADevice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_EnableMFADevice_Call) RunAndReturn(run func(*iam.EnableMFADeviceInput) (*iam.EnableMFADeviceOutput, error)) *MockIAMAPI_EnableMFADevice_Call {
	_c.Call.Return(run)
	return _c
}

// EnableMFADeviceRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) EnableMFADeviceRequest(_a0 *iam.EnableMFADeviceInput) (*request.Request, *iam.EnableMFADeviceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.EnableMFADeviceOutput
	if rf, ok := ret.Get(0).(func(*iam.EnableMFADeviceInput) (*request.Request, *iam.EnableMFADeviceOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.EnableMFADeviceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.EnableMFADeviceInput) *iam.EnableMFADeviceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.EnableMFADeviceOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_EnableMFADeviceRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableMFADeviceRequest'
type MockIAMAPI_EnableMFADeviceRequest_Call struct {
	*mock.Call
}

// EnableMFADeviceRequest is a helper method to define mock.On call
//   - _a0 *iam.EnableMFADeviceInput
func (_e *MockIAMAPI_Expecter) EnableMFADeviceRequest(_a0 interface{}) *MockIAMAPI_EnableMFADeviceRequest_Call {
	return &MockIAMAPI_EnableMFADeviceRequest_Call{Call: _e.mock.On("EnableMFADeviceRequest", _a0)}
}

func (_c *MockIAMAPI_EnableMFADeviceRequest_Call) Run(run func(_a0 *iam.EnableMFADeviceInput)) *MockIAMAPI_EnableMFADeviceRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.EnableMFADeviceInput))
	})
	return _c
}

func (_c *MockIAMAPI_EnableMFADeviceRequest_Call) Return(_a0 *request.Request, _a1 *iam.EnableMFADeviceOutput) *MockIAMAPI_EnableMFADeviceRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_EnableMFADeviceRequest_Call) RunAndReturn(run func(*iam.EnableMFADeviceInput) (*request.Request, *iam.EnableMFADeviceOutput)) *MockIAMAPI_EnableMFADeviceRequest_Call {
	_c.Call.Return(run)
	return _c
}

// EnableMFADeviceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) EnableMFADeviceWithContext(_a0 context.Context, _a1 *iam.EnableMFADeviceInput, _a2 ...request.Option) (*iam.EnableMFADeviceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.EnableMFADeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.EnableMFADeviceInput, ...request.Option) (*iam.EnableMFADeviceOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.EnableMFADeviceInput, ...request.Option) *iam.EnableMFADeviceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.EnableMFADeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.EnableMFADeviceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_EnableMFADeviceWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableMFADeviceWithContext'
type MockIAMAPI_EnableMFADeviceWithContext_Call struct {
	*mock.Call
}

// EnableMFADeviceWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.EnableMFADeviceInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) EnableMFADeviceWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_EnableMFADeviceWithContext_Call {
	return &MockIAMAPI_EnableMFADeviceWithContext_Call{Call: _e.mock.On("EnableMFADeviceWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_EnableMFADeviceWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.EnableMFADeviceInput, _a2 ...request.Option)) *MockIAMAPI_EnableMFADeviceWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.EnableMFADeviceInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_EnableMFADeviceWithContext_Call) Return(_a0 *iam.EnableMFADeviceOutput, _a1 error) *MockIAMAPI_EnableMFADeviceWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_EnableMFADeviceWithContext_Call) RunAndReturn(run func(context.Context, *iam.EnableMFADeviceInput, ...request.Option) (*iam.EnableMFADeviceOutput, error)) *MockIAMAPI_EnableMFADeviceWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateCredentialReport provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GenerateCredentialReport(_a0 *iam.GenerateCredentialReportInput) (*iam.GenerateCredentialReportOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GenerateCredentialReportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.GenerateCredentialReportInput) (*iam.GenerateCredentialReportOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GenerateCredentialReportInput) *iam.GenerateCredentialReportOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GenerateCredentialReportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GenerateCredentialReportInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GenerateCredentialReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateCredentialReport'
type MockIAMAPI_GenerateCredentialReport_Call struct {
	*mock.Call
}

// GenerateCredentialReport is a helper method to define mock.On call
//   - _a0 *iam.GenerateCredentialReportInput
func (_e *MockIAMAPI_Expecter) GenerateCredentialReport(_a0 interface{}) *MockIAMAPI_GenerateCredentialReport_Call {
	return &MockIAMAPI_GenerateCredentialReport_Call{Call: _e.mock.On("GenerateCredentialReport", _a0)}
}

func (_c *MockIAMAPI_GenerateCredentialReport_Call) Run(run func(_a0 *iam.GenerateCredentialReportInput)) *MockIAMAPI_GenerateCredentialReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GenerateCredentialReportInput))
	})
	return _c
}

func (_c *MockIAMAPI_GenerateCredentialReport_Call) Return(_a0 *iam.GenerateCredentialReportOutput, _a1 error) *MockIAMAPI_GenerateCredentialReport_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GenerateCredentialReport_Call) RunAndReturn(run func(*iam.GenerateCredentialReportInput) (*iam.GenerateCredentialReportOutput, error)) *MockIAMAPI_GenerateCredentialReport_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateCredentialReportRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GenerateCredentialReportRequest(_a0 *iam.GenerateCredentialReportInput) (*request.Request, *iam.GenerateCredentialReportOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.GenerateCredentialReportOutput
	if rf, ok := ret.Get(0).(func(*iam.GenerateCredentialReportInput) (*request.Request, *iam.GenerateCredentialReportOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GenerateCredentialReportInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GenerateCredentialReportInput) *iam.GenerateCredentialReportOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.GenerateCredentialReportOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_GenerateCredentialReportRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateCredentialReportRequest'
type MockIAMAPI_GenerateCredentialReportRequest_Call struct {
	*mock.Call
}

// GenerateCredentialReportRequest is a helper method to define mock.On call
//   - _a0 *iam.GenerateCredentialReportInput
func (_e *MockIAMAPI_Expecter) GenerateCredentialReportRequest(_a0 interface{}) *MockIAMAPI_GenerateCredentialReportRequest_Call {
	return &MockIAMAPI_GenerateCredentialReportRequest_Call{Call: _e.mock.On("GenerateCredentialReportRequest", _a0)}
}

func (_c *MockIAMAPI_GenerateCredentialReportRequest_Call) Run(run func(_a0 *iam.GenerateCredentialReportInput)) *MockIAMAPI_GenerateCredentialReportRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GenerateCredentialReportInput))
	})
	return _c
}

func (_c *MockIAMAPI_GenerateCredentialReportRequest_Call) Return(_a0 *request.Request, _a1 *iam.GenerateCredentialReportOutput) *MockIAMAPI_GenerateCredentialReportRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GenerateCredentialReportRequest_Call) RunAndReturn(run func(*iam.GenerateCredentialReportInput) (*request.Request, *iam.GenerateCredentialReportOutput)) *MockIAMAPI_GenerateCredentialReportRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateCredentialReportWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) GenerateCredentialReportWithContext(_a0 context.Context, _a1 *iam.GenerateCredentialReportInput, _a2 ...request.Option) (*iam.GenerateCredentialReportOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.GenerateCredentialReportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GenerateCredentialReportInput, ...request.Option) (*iam.GenerateCredentialReportOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GenerateCredentialReportInput, ...request.Option) *iam.GenerateCredentialReportOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GenerateCredentialReportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.GenerateCredentialReportInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GenerateCredentialReportWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateCredentialReportWithContext'
type MockIAMAPI_GenerateCredentialReportWithContext_Call struct {
	*mock.Call
}

// GenerateCredentialReportWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GenerateCredentialReportInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) GenerateCredentialReportWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_GenerateCredentialReportWithContext_Call {
	return &MockIAMAPI_GenerateCredentialReportWithContext_Call{Call: _e.mock.On("GenerateCredentialReportWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_GenerateCredentialReportWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GenerateCredentialReportInput, _a2 ...request.Option)) *MockIAMAPI_GenerateCredentialReportWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GenerateCredentialReportInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GenerateCredentialReportWithContext_Call) Return(_a0 *iam.GenerateCredentialReportOutput, _a1 error) *MockIAMAPI_GenerateCredentialReportWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GenerateCredentialReportWithContext_Call) RunAndReturn(run func(context.Context, *iam.GenerateCredentialReportInput, ...request.Option) (*iam.GenerateCredentialReportOutput, error)) *MockIAMAPI_GenerateCredentialReportWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateOrganizationsAccessReport provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GenerateOrganizationsAccessReport(_a0 *iam.GenerateOrganizationsAccessReportInput) (*iam.GenerateOrganizationsAccessReportOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GenerateOrganizationsAccessReportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.GenerateOrganizationsAccessReportInput) (*iam.GenerateOrganizationsAccessReportOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GenerateOrganizationsAccessReportInput) *iam.GenerateOrganizationsAccessReportOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GenerateOrganizationsAccessReportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GenerateOrganizationsAccessReportInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GenerateOrganizationsAccessReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateOrganizationsAccessReport'
type MockIAMAPI_GenerateOrganizationsAccessReport_Call struct {
	*mock.Call
}

// GenerateOrganizationsAccessReport is a helper method to define mock.On call
//   - _a0 *iam.GenerateOrganizationsAccessReportInput
func (_e *MockIAMAPI_Expecter) GenerateOrganizationsAccessReport(_a0 interface{}) *MockIAMAPI_GenerateOrganizationsAccessReport_Call {
	return &MockIAMAPI_GenerateOrganizationsAccessReport_Call{Call: _e.mock.On("GenerateOrganizationsAccessReport", _a0)}
}

func (_c *MockIAMAPI_GenerateOrganizationsAccessReport_Call) Run(run func(_a0 *iam.GenerateOrganizationsAccessReportInput)) *MockIAMAPI_GenerateOrganizationsAccessReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GenerateOrganizationsAccessReportInput))
	})
	return _c
}

func (_c *MockIAMAPI_GenerateOrganizationsAccessReport_Call) Return(_a0 *iam.GenerateOrganizationsAccessReportOutput, _a1 error) *MockIAMAPI_GenerateOrganizationsAccessReport_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GenerateOrganizationsAccessReport_Call) RunAndReturn(run func(*iam.GenerateOrganizationsAccessReportInput) (*iam.GenerateOrganizationsAccessReportOutput, error)) *MockIAMAPI_GenerateOrganizationsAccessReport_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateOrganizationsAccessReportRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GenerateOrganizationsAccessReportRequest(_a0 *iam.GenerateOrganizationsAccessReportInput) (*request.Request, *iam.GenerateOrganizationsAccessReportOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.GenerateOrganizationsAccessReportOutput
	if rf, ok := ret.Get(0).(func(*iam.GenerateOrganizationsAccessReportInput) (*request.Request, *iam.GenerateOrganizationsAccessReportOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GenerateOrganizationsAccessReportInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GenerateOrganizationsAccessReportInput) *iam.GenerateOrganizationsAccessReportOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.GenerateOrganizationsAccessReportOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_GenerateOrganizationsAccessReportRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateOrganizationsAccessReportRequest'
type MockIAMAPI_GenerateOrganizationsAccessReportRequest_Call struct {
	*mock.Call
}

// GenerateOrganizationsAccessReportRequest is a helper method to define mock.On call
//   - _a0 *iam.GenerateOrganizationsAccessReportInput
func (_e *MockIAMAPI_Expecter) GenerateOrganizationsAccessReportRequest(_a0 interface{}) *MockIAMAPI_GenerateOrganizationsAccessReportRequest_Call {
	return &MockIAMAPI_GenerateOrganizationsAccessReportRequest_Call{Call: _e.mock.On("GenerateOrganizationsAccessReportRequest", _a0)}
}

func (_c *MockIAMAPI_GenerateOrganizationsAccessReportRequest_Call) Run(run func(_a0 *iam.GenerateOrganizationsAccessReportInput)) *MockIAMAPI_GenerateOrganizationsAccessReportRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GenerateOrganizationsAccessReportInput))
	})
	return _c
}

func (_c *MockIAMAPI_GenerateOrganizationsAccessReportRequest_Call) Return(_a0 *request.Request, _a1 *iam.GenerateOrganizationsAccessReportOutput) *MockIAMAPI_GenerateOrganizationsAccessReportRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GenerateOrganizationsAccessReportRequest_Call) RunAndReturn(run func(*iam.GenerateOrganizationsAccessReportInput) (*request.Request, *iam.GenerateOrganizationsAccessReportOutput)) *MockIAMAPI_GenerateOrganizationsAccessReportRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateOrganizationsAccessReportWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) GenerateOrganizationsAccessReportWithContext(_a0 context.Context, _a1 *iam.GenerateOrganizationsAccessReportInput, _a2 ...request.Option) (*iam.GenerateOrganizationsAccessReportOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.GenerateOrganizationsAccessReportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GenerateOrganizationsAccessReportInput, ...request.Option) (*iam.GenerateOrganizationsAccessReportOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GenerateOrganizationsAccessReportInput, ...request.Option) *iam.GenerateOrganizationsAccessReportOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GenerateOrganizationsAccessReportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.GenerateOrganizationsAccessReportInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GenerateOrganizationsAccessReportWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateOrganizationsAccessReportWithContext'
type MockIAMAPI_GenerateOrganizationsAccessReportWithContext_Call struct {
	*mock.Call
}

// GenerateOrganizationsAccessReportWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GenerateOrganizationsAccessReportInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) GenerateOrganizationsAccessReportWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_GenerateOrganizationsAccessReportWithContext_Call {
	return &MockIAMAPI_GenerateOrganizationsAccessReportWithContext_Call{Call: _e.mock.On("GenerateOrganizationsAccessReportWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_GenerateOrganizationsAccessReportWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GenerateOrganizationsAccessReportInput, _a2 ...request.Option)) *MockIAMAPI_GenerateOrganizationsAccessReportWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GenerateOrganizationsAccessReportInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GenerateOrganizationsAccessReportWithContext_Call) Return(_a0 *iam.GenerateOrganizationsAccessReportOutput, _a1 error) *MockIAMAPI_GenerateOrganizationsAccessReportWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GenerateOrganizationsAccessReportWithContext_Call) RunAndReturn(run func(context.Context, *iam.GenerateOrganizationsAccessReportInput, ...request.Option) (*iam.GenerateOrganizationsAccessReportOutput, error)) *MockIAMAPI_GenerateOrganizationsAccessReportWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateServiceLastAccessedDetails provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GenerateServiceLastAccessedDetails(_a0 *iam.GenerateServiceLastAccessedDetailsInput) (*iam.GenerateServiceLastAccessedDetailsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GenerateServiceLastAccessedDetailsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.GenerateServiceLastAccessedDetailsInput) (*iam.GenerateServiceLastAccessedDetailsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GenerateServiceLastAccessedDetailsInput) *iam.GenerateServiceLastAccessedDetailsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GenerateServiceLastAccessedDetailsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GenerateServiceLastAccessedDetailsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GenerateServiceLastAccessedDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateServiceLastAccessedDetails'
type MockIAMAPI_GenerateServiceLastAccessedDetails_Call struct {
	*mock.Call
}

// GenerateServiceLastAccessedDetails is a helper method to define mock.On call
//   - _a0 *iam.GenerateServiceLastAccessedDetailsInput
func (_e *MockIAMAPI_Expecter) GenerateServiceLastAccessedDetails(_a0 interface{}) *MockIAMAPI_GenerateServiceLastAccessedDetails_Call {
	return &MockIAMAPI_GenerateServiceLastAccessedDetails_Call{Call: _e.mock.On("GenerateServiceLastAccessedDetails", _a0)}
}

func (_c *MockIAMAPI_GenerateServiceLastAccessedDetails_Call) Run(run func(_a0 *iam.GenerateServiceLastAccessedDetailsInput)) *MockIAMAPI_GenerateServiceLastAccessedDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GenerateServiceLastAccessedDetailsInput))
	})
	return _c
}

func (_c *MockIAMAPI_GenerateServiceLastAccessedDetails_Call) Return(_a0 *iam.GenerateServiceLastAccessedDetailsOutput, _a1 error) *MockIAMAPI_GenerateServiceLastAccessedDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GenerateServiceLastAccessedDetails_Call) RunAndReturn(run func(*iam.GenerateServiceLastAccessedDetailsInput) (*iam.GenerateServiceLastAccessedDetailsOutput, error)) *MockIAMAPI_GenerateServiceLastAccessedDetails_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateServiceLastAccessedDetailsRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GenerateServiceLastAccessedDetailsRequest(_a0 *iam.GenerateServiceLastAccessedDetailsInput) (*request.Request, *iam.GenerateServiceLastAccessedDetailsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.GenerateServiceLastAccessedDetailsOutput
	if rf, ok := ret.Get(0).(func(*iam.GenerateServiceLastAccessedDetailsInput) (*request.Request, *iam.GenerateServiceLastAccessedDetailsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GenerateServiceLastAccessedDetailsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GenerateServiceLastAccessedDetailsInput) *iam.GenerateServiceLastAccessedDetailsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.GenerateServiceLastAccessedDetailsOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_GenerateServiceLastAccessedDetailsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateServiceLastAccessedDetailsRequest'
type MockIAMAPI_GenerateServiceLastAccessedDetailsRequest_Call struct {
	*mock.Call
}

// GenerateServiceLastAccessedDetailsRequest is a helper method to define mock.On call
//   - _a0 *iam.GenerateServiceLastAccessedDetailsInput
func (_e *MockIAMAPI_Expecter) GenerateServiceLastAccessedDetailsRequest(_a0 interface{}) *MockIAMAPI_GenerateServiceLastAccessedDetailsRequest_Call {
	return &MockIAMAPI_GenerateServiceLastAccessedDetailsRequest_Call{Call: _e.mock.On("GenerateServiceLastAccessedDetailsRequest", _a0)}
}

func (_c *MockIAMAPI_GenerateServiceLastAccessedDetailsRequest_Call) Run(run func(_a0 *iam.GenerateServiceLastAccessedDetailsInput)) *MockIAMAPI_GenerateServiceLastAccessedDetailsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GenerateServiceLastAccessedDetailsInput))
	})
	return _c
}

func (_c *MockIAMAPI_GenerateServiceLastAccessedDetailsRequest_Call) Return(_a0 *request.Request, _a1 *iam.GenerateServiceLastAccessedDetailsOutput) *MockIAMAPI_GenerateServiceLastAccessedDetailsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GenerateServiceLastAccessedDetailsRequest_Call) RunAndReturn(run func(*iam.GenerateServiceLastAccessedDetailsInput) (*request.Request, *iam.GenerateServiceLastAccessedDetailsOutput)) *MockIAMAPI_GenerateServiceLastAccessedDetailsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateServiceLastAccessedDetailsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) GenerateServiceLastAccessedDetailsWithContext(_a0 context.Context, _a1 *iam.GenerateServiceLastAccessedDetailsInput, _a2 ...request.Option) (*iam.GenerateServiceLastAccessedDetailsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.GenerateServiceLastAccessedDetailsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GenerateServiceLastAccessedDetailsInput, ...request.Option) (*iam.GenerateServiceLastAccessedDetailsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GenerateServiceLastAccessedDetailsInput, ...request.Option) *iam.GenerateServiceLastAccessedDetailsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GenerateServiceLastAccessedDetailsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.GenerateServiceLastAccessedDetailsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GenerateServiceLastAccessedDetailsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateServiceLastAccessedDetailsWithContext'
type MockIAMAPI_GenerateServiceLastAccessedDetailsWithContext_Call struct {
	*mock.Call
}

// GenerateServiceLastAccessedDetailsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GenerateServiceLastAccessedDetailsInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) GenerateServiceLastAccessedDetailsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_GenerateServiceLastAccessedDetailsWithContext_Call {
	return &MockIAMAPI_GenerateServiceLastAccessedDetailsWithContext_Call{Call: _e.mock.On("GenerateServiceLastAccessedDetailsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_GenerateServiceLastAccessedDetailsWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GenerateServiceLastAccessedDetailsInput, _a2 ...request.Option)) *MockIAMAPI_GenerateServiceLastAccessedDetailsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GenerateServiceLastAccessedDetailsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GenerateServiceLastAccessedDetailsWithContext_Call) Return(_a0 *iam.GenerateServiceLastAccessedDetailsOutput, _a1 error) *MockIAMAPI_GenerateServiceLastAccessedDetailsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GenerateServiceLastAccessedDetailsWithContext_Call) RunAndReturn(run func(context.Context, *iam.GenerateServiceLastAccessedDetailsInput, ...request.Option) (*iam.GenerateServiceLastAccessedDetailsOutput, error)) *MockIAMAPI_GenerateServiceLastAccessedDetailsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessKeyLastUsed provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetAccessKeyLastUsed(_a0 *iam.GetAccessKeyLastUsedInput) (*iam.GetAccessKeyLastUsedOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GetAccessKeyLastUsedOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.GetAccessKeyLastUsedInput) (*iam.GetAccessKeyLastUsedOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetAccessKeyLastUsedInput) *iam.GetAccessKeyLastUsedOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetAccessKeyLastUsedOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetAccessKeyLastUsedInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetAccessKeyLastUsed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessKeyLastUsed'
type MockIAMAPI_GetAccessKeyLastUsed_Call struct {
	*mock.Call
}

// GetAccessKeyLastUsed is a helper method to define mock.On call
//   - _a0 *iam.GetAccessKeyLastUsedInput
func (_e *MockIAMAPI_Expecter) GetAccessKeyLastUsed(_a0 interface{}) *MockIAMAPI_GetAccessKeyLastUsed_Call {
	return &MockIAMAPI_GetAccessKeyLastUsed_Call{Call: _e.mock.On("GetAccessKeyLastUsed", _a0)}
}

func (_c *MockIAMAPI_GetAccessKeyLastUsed_Call) Run(run func(_a0 *iam.GetAccessKeyLastUsedInput)) *MockIAMAPI_GetAccessKeyLastUsed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetAccessKeyLastUsedInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetAccessKeyLastUsed_Call) Return(_a0 *iam.GetAccessKeyLastUsedOutput, _a1 error) *MockIAMAPI_GetAccessKeyLastUsed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetAccessKeyLastUsed_Call) RunAndReturn(run func(*iam.GetAccessKeyLastUsedInput) (*iam.GetAccessKeyLastUsedOutput, error)) *MockIAMAPI_GetAccessKeyLastUsed_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessKeyLastUsedRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetAccessKeyLastUsedRequest(_a0 *iam.GetAccessKeyLastUsedInput) (*request.Request, *iam.GetAccessKeyLastUsedOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.GetAccessKeyLastUsedOutput
	if rf, ok := ret.Get(0).(func(*iam.GetAccessKeyLastUsedInput) (*request.Request, *iam.GetAccessKeyLastUsedOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetAccessKeyLastUsedInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetAccessKeyLastUsedInput) *iam.GetAccessKeyLastUsedOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.GetAccessKeyLastUsedOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_GetAccessKeyLastUsedRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessKeyLastUsedRequest'
type MockIAMAPI_GetAccessKeyLastUsedRequest_Call struct {
	*mock.Call
}

// GetAccessKeyLastUsedRequest is a helper method to define mock.On call
//   - _a0 *iam.GetAccessKeyLastUsedInput
func (_e *MockIAMAPI_Expecter) GetAccessKeyLastUsedRequest(_a0 interface{}) *MockIAMAPI_GetAccessKeyLastUsedRequest_Call {
	return &MockIAMAPI_GetAccessKeyLastUsedRequest_Call{Call: _e.mock.On("GetAccessKeyLastUsedRequest", _a0)}
}

func (_c *MockIAMAPI_GetAccessKeyLastUsedRequest_Call) Run(run func(_a0 *iam.GetAccessKeyLastUsedInput)) *MockIAMAPI_GetAccessKeyLastUsedRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetAccessKeyLastUsedInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetAccessKeyLastUsedRequest_Call) Return(_a0 *request.Request, _a1 *iam.GetAccessKeyLastUsedOutput) *MockIAMAPI_GetAccessKeyLastUsedRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetAccessKeyLastUsedRequest_Call) RunAndReturn(run func(*iam.GetAccessKeyLastUsedInput) (*request.Request, *iam.GetAccessKeyLastUsedOutput)) *MockIAMAPI_GetAccessKeyLastUsedRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessKeyLastUsedWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) GetAccessKeyLastUsedWithContext(_a0 context.Context, _a1 *iam.GetAccessKeyLastUsedInput, _a2 ...request.Option) (*iam.GetAccessKeyLastUsedOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.GetAccessKeyLastUsedOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetAccessKeyLastUsedInput, ...request.Option) (*iam.GetAccessKeyLastUsedOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetAccessKeyLastUsedInput, ...request.Option) *iam.GetAccessKeyLastUsedOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetAccessKeyLastUsedOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.GetAccessKeyLastUsedInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetAccessKeyLastUsedWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessKeyLastUsedWithContext'
type MockIAMAPI_GetAccessKeyLastUsedWithContext_Call struct {
	*mock.Call
}

// GetAccessKeyLastUsedWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetAccessKeyLastUsedInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) GetAccessKeyLastUsedWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_GetAccessKeyLastUsedWithContext_Call {
	return &MockIAMAPI_GetAccessKeyLastUsedWithContext_Call{Call: _e.mock.On("GetAccessKeyLastUsedWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_GetAccessKeyLastUsedWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetAccessKeyLastUsedInput, _a2 ...request.Option)) *MockIAMAPI_GetAccessKeyLastUsedWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetAccessKeyLastUsedInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GetAccessKeyLastUsedWithContext_Call) Return(_a0 *iam.GetAccessKeyLastUsedOutput, _a1 error) *MockIAMAPI_GetAccessKeyLastUsedWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetAccessKeyLastUsedWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetAccessKeyLastUsedInput, ...request.Option) (*iam.GetAccessKeyLastUsedOutput, error)) *MockIAMAPI_GetAccessKeyLastUsedWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountAuthorizationDetails provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetAccountAuthorizationDetails(_a0 *iam.GetAccountAuthorizationDetailsInput) (*iam.GetAccountAuthorizationDetailsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GetAccountAuthorizationDetailsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.GetAccountAuthorizationDetailsInput) (*iam.GetAccountAuthorizationDetailsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetAccountAuthorizationDetailsInput) *iam.GetAccountAuthorizationDetailsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetAccountAuthorizationDetailsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetAccountAuthorizationDetailsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetAccountAuthorizationDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountAuthorizationDetails'
type MockIAMAPI_GetAccountAuthorizationDetails_Call struct {
	*mock.Call
}

// GetAccountAuthorizationDetails is a helper method to define mock.On call
//   - _a0 *iam.GetAccountAuthorizationDetailsInput
func (_e *MockIAMAPI_Expecter) GetAccountAuthorizationDetails(_a0 interface{}) *MockIAMAPI_GetAccountAuthorizationDetails_Call {
	return &MockIAMAPI_GetAccountAuthorizationDetails_Call{Call: _e.mock.On("GetAccountAuthorizationDetails", _a0)}
}

func (_c *MockIAMAPI_GetAccountAuthorizationDetails_Call) Run(run func(_a0 *iam.GetAccountAuthorizationDetailsInput)) *MockIAMAPI_GetAccountAuthorizationDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetAccountAuthorizationDetailsInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetAccountAuthorizationDetails_Call) Return(_a0 *iam.GetAccountAuthorizationDetailsOutput, _a1 error) *MockIAMAPI_GetAccountAuthorizationDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetAccountAuthorizationDetails_Call) RunAndReturn(run func(*iam.GetAccountAuthorizationDetailsInput) (*iam.GetAccountAuthorizationDetailsOutput, error)) *MockIAMAPI_GetAccountAuthorizationDetails_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountAuthorizationDetailsPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) GetAccountAuthorizationDetailsPages(_a0 *iam.GetAccountAuthorizationDetailsInput, _a1 func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.GetAccountAuthorizationDetailsInput, func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_GetAccountAuthorizationDetailsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountAuthorizationDetailsPages'
type MockIAMAPI_GetAccountAuthorizationDetailsPages_Call struct {
	*mock.Call
}

// GetAccountAuthorizationDetailsPages is a helper method to define mock.On call
//   - _a0 *iam.GetAccountAuthorizationDetailsInput
//   - _a1 func(*iam.GetAccountAuthorizationDetailsOutput , bool) bool
func (_e *MockIAMAPI_Expecter) GetAccountAuthorizationDetailsPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_GetAccountAuthorizationDetailsPages_Call {
	return &MockIAMAPI_GetAccountAuthorizationDetailsPages_Call{Call: _e.mock.On("GetAccountAuthorizationDetailsPages", _a0, _a1)}
}

func (_c *MockIAMAPI_GetAccountAuthorizationDetailsPages_Call) Run(run func(_a0 *iam.GetAccountAuthorizationDetailsInput, _a1 func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool)) *MockIAMAPI_GetAccountAuthorizationDetailsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetAccountAuthorizationDetailsInput), args[1].(func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_GetAccountAuthorizationDetailsPages_Call) Return(_a0 error) *MockIAMAPI_GetAccountAuthorizationDetailsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_GetAccountAuthorizationDetailsPages_Call) RunAndReturn(run func(*iam.GetAccountAuthorizationDetailsInput, func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool) error) *MockIAMAPI_GetAccountAuthorizationDetailsPages_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountAuthorizationDetailsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) GetAccountAuthorizationDetailsPagesWithContext(_a0 context.Context, _a1 *iam.GetAccountAuthorizationDetailsInput, _a2 func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetAccountAuthorizationDetailsInput, func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_GetAccountAuthorizationDetailsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountAuthorizationDetailsPagesWithContext'
type MockIAMAPI_GetAccountAuthorizationDetailsPagesWithContext_Call struct {
	*mock.Call
}

// GetAccountAuthorizationDetailsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetAccountAuthorizationDetailsInput
//   - _a2 func(*iam.GetAccountAuthorizationDetailsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) GetAccountAuthorizationDetailsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_GetAccountAuthorizationDetailsPagesWithContext_Call {
	return &MockIAMAPI_GetAccountAuthorizationDetailsPagesWithContext_Call{Call: _e.mock.On("GetAccountAuthorizationDetailsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_GetAccountAuthorizationDetailsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetAccountAuthorizationDetailsInput, _a2 func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_GetAccountAuthorizationDetailsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetAccountAuthorizationDetailsInput), args[2].(func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GetAccountAuthorizationDetailsPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_GetAccountAuthorizationDetailsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_GetAccountAuthorizationDetailsPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetAccountAuthorizationDetailsInput, func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool, ...request.Option) error) *MockIAMAPI_GetAccountAuthorizationDetailsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountAuthorizationDetailsRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetAccountAuthorizationDetailsRequest(_a0 *iam.GetAccountAuthorizationDetailsInput) (*request.Request, *iam.GetAccountAuthorizationDetailsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.GetAccountAuthorizationDetailsOutput
	if rf, ok := ret.Get(0).(func(*iam.GetAccountAuthorizationDetailsInput) (*request.Request, *iam.GetAccountAuthorizationDetailsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetAccountAuthorizationDetailsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetAccountAuthorizationDetailsInput) *iam.GetAccountAuthorizationDetailsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.GetAccountAuthorizationDetailsOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_GetAccountAuthorizationDetailsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountAuthorizationDetailsRequest'
type MockIAMAPI_GetAccountAuthorizationDetailsRequest_Call struct {
	*mock.Call
}

// GetAccountAuthorizationDetailsRequest is a helper method to define mock.On call
//   - _a0 *iam.GetAccountAuthorizationDetailsInput
func (_e *MockIAMAPI_Expecter) GetAccountAuthorizationDetailsRequest(_a0 interface{}) *MockIAMAPI_GetAccountAuthorizationDetailsRequest_Call {
	return &MockIAMAPI_GetAccountAuthorizationDetailsRequest_Call{Call: _e.mock.On("GetAccountAuthorizationDetailsRequest", _a0)}
}

func (_c *MockIAMAPI_GetAccountAuthorizationDetailsRequest_Call) Run(run func(_a0 *iam.GetAccountAuthorizationDetailsInput)) *MockIAMAPI_GetAccountAuthorizationDetailsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetAccountAuthorizationDetailsInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetAccountAuthorizationDetailsRequest_Call) Return(_a0 *request.Request, _a1 *iam.GetAccountAuthorizationDetailsOutput) *MockIAMAPI_GetAccountAuthorizationDetailsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetAccountAuthorizationDetailsRequest_Call) RunAndReturn(run func(*iam.GetAccountAuthorizationDetailsInput) (*request.Request, *iam.GetAccountAuthorizationDetailsOutput)) *MockIAMAPI_GetAccountAuthorizationDetailsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountAuthorizationDetailsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) GetAccountAuthorizationDetailsWithContext(_a0 context.Context, _a1 *iam.GetAccountAuthorizationDetailsInput, _a2 ...request.Option) (*iam.GetAccountAuthorizationDetailsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.GetAccountAuthorizationDetailsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetAccountAuthorizationDetailsInput, ...request.Option) (*iam.GetAccountAuthorizationDetailsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetAccountAuthorizationDetailsInput, ...request.Option) *iam.GetAccountAuthorizationDetailsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetAccountAuthorizationDetailsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.GetAccountAuthorizationDetailsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetAccountAuthorizationDetailsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountAuthorizationDetailsWithContext'
type MockIAMAPI_GetAccountAuthorizationDetailsWithContext_Call struct {
	*mock.Call
}

// GetAccountAuthorizationDetailsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetAccountAuthorizationDetailsInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) GetAccountAuthorizationDetailsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_GetAccountAuthorizationDetailsWithContext_Call {
	return &MockIAMAPI_GetAccountAuthorizationDetailsWithContext_Call{Call: _e.mock.On("GetAccountAuthorizationDetailsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_GetAccountAuthorizationDetailsWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetAccountAuthorizationDetailsInput, _a2 ...request.Option)) *MockIAMAPI_GetAccountAuthorizationDetailsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetAccountAuthorizationDetailsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GetAccountAuthorizationDetailsWithContext_Call) Return(_a0 *iam.GetAccountAuthorizationDetailsOutput, _a1 error) *MockIAMAPI_GetAccountAuthorizationDetailsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetAccountAuthorizationDetailsWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetAccountAuthorizationDetailsInput, ...request.Option) (*iam.GetAccountAuthorizationDetailsOutput, error)) *MockIAMAPI_GetAccountAuthorizationDetailsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountPasswordPolicy provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetAccountPasswordPolicy(_a0 *iam.GetAccountPasswordPolicyInput) (*iam.GetAccountPasswordPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GetAccountPasswordPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.GetAccountPasswordPolicyInput) (*iam.GetAccountPasswordPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetAccountPasswordPolicyInput) *iam.GetAccountPasswordPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetAccountPasswordPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetAccountPasswordPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetAccountPasswordPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountPasswordPolicy'
type MockIAMAPI_GetAccountPasswordPolicy_Call struct {
	*mock.Call
}

// GetAccountPasswordPolicy is a helper method to define mock.On call
//   - _a0 *iam.GetAccountPasswordPolicyInput
func (_e *MockIAMAPI_Expecter) GetAccountPasswordPolicy(_a0 interface{}) *MockIAMAPI_GetAccountPasswordPolicy_Call {
	return &MockIAMAPI_GetAccountPasswordPolicy_Call{Call: _e.mock.On("GetAccountPasswordPolicy", _a0)}
}

func (_c *MockIAMAPI_GetAccountPasswordPolicy_Call) Run(run func(_a0 *iam.GetAccountPasswordPolicyInput)) *MockIAMAPI_GetAccountPasswordPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetAccountPasswordPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetAccountPasswordPolicy_Call) Return(_a0 *iam.GetAccountPasswordPolicyOutput, _a1 error) *MockIAMAPI_GetAccountPasswordPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetAccountPasswordPolicy_Call) RunAndReturn(run func(*iam.GetAccountPasswordPolicyInput) (*iam.GetAccountPasswordPolicyOutput, error)) *MockIAMAPI_GetAccountPasswordPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountPasswordPolicyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetAccountPasswordPolicyRequest(_a0 *iam.GetAccountPasswordPolicyInput) (*request.Request, *iam.GetAccountPasswordPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.GetAccountPasswordPolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.GetAccountPasswordPolicyInput) (*request.Request, *iam.GetAccountPasswordPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetAccountPasswordPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetAccountPasswordPolicyInput) *iam.GetAccountPasswordPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.GetAccountPasswordPolicyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_GetAccountPasswordPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountPasswordPolicyRequest'
type MockIAMAPI_GetAccountPasswordPolicyRequest_Call struct {
	*mock.Call
}

// GetAccountPasswordPolicyRequest is a helper method to define mock.On call
//   - _a0 *iam.GetAccountPasswordPolicyInput
func (_e *MockIAMAPI_Expecter) GetAccountPasswordPolicyRequest(_a0 interface{}) *MockIAMAPI_GetAccountPasswordPolicyRequest_Call {
	return &MockIAMAPI_GetAccountPasswordPolicyRequest_Call{Call: _e.mock.On("GetAccountPasswordPolicyRequest", _a0)}
}

func (_c *MockIAMAPI_GetAccountPasswordPolicyRequest_Call) Run(run func(_a0 *iam.GetAccountPasswordPolicyInput)) *MockIAMAPI_GetAccountPasswordPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetAccountPasswordPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetAccountPasswordPolicyRequest_Call) Return(_a0 *request.Request, _a1 *iam.GetAccountPasswordPolicyOutput) *MockIAMAPI_GetAccountPasswordPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetAccountPasswordPolicyRequest_Call) RunAndReturn(run func(*iam.GetAccountPasswordPolicyInput) (*request.Request, *iam.GetAccountPasswordPolicyOutput)) *MockIAMAPI_GetAccountPasswordPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountPasswordPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) GetAccountPasswordPolicyWithContext(_a0 context.Context, _a1 *iam.GetAccountPasswordPolicyInput, _a2 ...request.Option) (*iam.GetAccountPasswordPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.GetAccountPasswordPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetAccountPasswordPolicyInput, ...request.Option) (*iam.GetAccountPasswordPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetAccountPasswordPolicyInput, ...request.Option) *iam.GetAccountPasswordPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetAccountPasswordPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.GetAccountPasswordPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetAccountPasswordPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountPasswordPolicyWithContext'
type MockIAMAPI_GetAccountPasswordPolicyWithContext_Call struct {
	*mock.Call
}

// GetAccountPasswordPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetAccountPasswordPolicyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) GetAccountPasswordPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_GetAccountPasswordPolicyWithContext_Call {
	return &MockIAMAPI_GetAccountPasswordPolicyWithContext_Call{Call: _e.mock.On("GetAccountPasswordPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_GetAccountPasswordPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetAccountPasswordPolicyInput, _a2 ...request.Option)) *MockIAMAPI_GetAccountPasswordPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetAccountPasswordPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GetAccountPasswordPolicyWithContext_Call) Return(_a0 *iam.GetAccountPasswordPolicyOutput, _a1 error) *MockIAMAPI_GetAccountPasswordPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetAccountPasswordPolicyWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetAccountPasswordPolicyInput, ...request.Option) (*iam.GetAccountPasswordPolicyOutput, error)) *MockIAMAPI_GetAccountPasswordPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountSummary provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetAccountSummary(_a0 *iam.GetAccountSummaryInput) (*iam.GetAccountSummaryOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GetAccountSummaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.GetAccountSummaryInput) (*iam.GetAccountSummaryOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetAccountSummaryInput) *iam.GetAccountSummaryOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetAccountSummaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetAccountSummaryInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetAccountSummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountSummary'
type MockIAMAPI_GetAccountSummary_Call struct {
	*mock.Call
}

// GetAccountSummary is a helper method to define mock.On call
//   - _a0 *iam.GetAccountSummaryInput
func (_e *MockIAMAPI_Expecter) GetAccountSummary(_a0 interface{}) *MockIAMAPI_GetAccountSummary_Call {
	return &MockIAMAPI_GetAccountSummary_Call{Call: _e.mock.On("GetAccountSummary", _a0)}
}

func (_c *MockIAMAPI_GetAccountSummary_Call) Run(run func(_a0 *iam.GetAccountSummaryInput)) *MockIAMAPI_GetAccountSummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetAccountSummaryInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetAccountSummary_Call) Return(_a0 *iam.GetAccountSummaryOutput, _a1 error) *MockIAMAPI_GetAccountSummary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetAccountSummary_Call) RunAndReturn(run func(*iam.GetAccountSummaryInput) (*iam.GetAccountSummaryOutput, error)) *MockIAMAPI_GetAccountSummary_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountSummaryRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetAccountSummaryRequest(_a0 *iam.GetAccountSummaryInput) (*request.Request, *iam.GetAccountSummaryOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.GetAccountSummaryOutput
	if rf, ok := ret.Get(0).(func(*iam.GetAccountSummaryInput) (*request.Request, *iam.GetAccountSummaryOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetAccountSummaryInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetAccountSummaryInput) *iam.GetAccountSummaryOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.GetAccountSummaryOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_GetAccountSummaryRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountSummaryRequest'
type MockIAMAPI_GetAccountSummaryRequest_Call struct {
	*mock.Call
}

// GetAccountSummaryRequest is a helper method to define mock.On call
//   - _a0 *iam.GetAccountSummaryInput
func (_e *MockIAMAPI_Expecter) GetAccountSummaryRequest(_a0 interface{}) *MockIAMAPI_GetAccountSummaryRequest_Call {
	return &MockIAMAPI_GetAccountSummaryRequest_Call{Call: _e.mock.On("GetAccountSummaryRequest", _a0)}
}

func (_c *MockIAMAPI_GetAccountSummaryRequest_Call) Run(run func(_a0 *iam.GetAccountSummaryInput)) *MockIAMAPI_GetAccountSummaryRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetAccountSummaryInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetAccountSummaryRequest_Call) Return(_a0 *request.Request, _a1 *iam.GetAccountSummaryOutput) *MockIAMAPI_GetAccountSummaryRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetAccountSummaryRequest_Call) RunAndReturn(run func(*iam.GetAccountSummaryInput) (*request.Request, *iam.GetAccountSummaryOutput)) *MockIAMAPI_GetAccountSummaryRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountSummaryWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) GetAccountSummaryWithContext(_a0 context.Context, _a1 *iam.GetAccountSummaryInput, _a2 ...request.Option) (*iam.GetAccountSummaryOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.GetAccountSummaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetAccountSummaryInput, ...request.Option) (*iam.GetAccountSummaryOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetAccountSummaryInput, ...request.Option) *iam.GetAccountSummaryOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetAccountSummaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.GetAccountSummaryInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetAccountSummaryWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountSummaryWithContext'
type MockIAMAPI_GetAccountSummaryWithContext_Call struct {
	*mock.Call
}

// GetAccountSummaryWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetAccountSummaryInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) GetAccountSummaryWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_GetAccountSummaryWithContext_Call {
	return &MockIAMAPI_GetAccountSummaryWithContext_Call{Call: _e.mock.On("GetAccountSummaryWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_GetAccountSummaryWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetAccountSummaryInput, _a2 ...request.Option)) *MockIAMAPI_GetAccountSummaryWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetAccountSummaryInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GetAccountSummaryWithContext_Call) Return(_a0 *iam.GetAccountSummaryOutput, _a1 error) *MockIAMAPI_GetAccountSummaryWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetAccountSummaryWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetAccountSummaryInput, ...request.Option) (*iam.GetAccountSummaryOutput, error)) *MockIAMAPI_GetAccountSummaryWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetContextKeysForCustomPolicy provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetContextKeysForCustomPolicy(_a0 *iam.GetContextKeysForCustomPolicyInput) (*iam.GetContextKeysForPolicyResponse, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GetContextKeysForPolicyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.GetContextKeysForCustomPolicyInput) (*iam.GetContextKeysForPolicyResponse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetContextKeysForCustomPolicyInput) *iam.GetContextKeysForPolicyResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetContextKeysForPolicyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetContextKeysForCustomPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetContextKeysForCustomPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContextKeysForCustomPolicy'
type MockIAMAPI_GetContextKeysForCustomPolicy_Call struct {
	*mock.Call
}

// GetContextKeysForCustomPolicy is a helper method to define mock.On call
//   - _a0 *iam.GetContextKeysForCustomPolicyInput
func (_e *MockIAMAPI_Expecter) GetContextKeysForCustomPolicy(_a0 interface{}) *MockIAMAPI_GetContextKeysForCustomPolicy_Call {
	return &MockIAMAPI_GetContextKeysForCustomPolicy_Call{Call: _e.mock.On("GetContextKeysForCustomPolicy", _a0)}
}

func (_c *MockIAMAPI_GetContextKeysForCustomPolicy_Call) Run(run func(_a0 *iam.GetContextKeysForCustomPolicyInput)) *MockIAMAPI_GetContextKeysForCustomPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetContextKeysForCustomPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetContextKeysForCustomPolicy_Call) Return(_a0 *iam.GetContextKeysForPolicyResponse, _a1 error) *MockIAMAPI_GetContextKeysForCustomPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetContextKeysForCustomPolicy_Call) RunAndReturn(run func(*iam.GetContextKeysForCustomPolicyInput) (*iam.GetContextKeysForPolicyResponse, error)) *MockIAMAPI_GetContextKeysForCustomPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetContextKeysForCustomPolicyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetContextKeysForCustomPolicyRequest(_a0 *iam.GetContextKeysForCustomPolicyInput) (*request.Request, *iam.GetContextKeysForPolicyResponse) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.GetContextKeysForPolicyResponse
	if rf, ok := ret.Get(0).(func(*iam.GetContextKeysForCustomPolicyInput) (*request.Request, *iam.GetContextKeysForPolicyResponse)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetContextKeysForCustomPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetContextKeysForCustomPolicyInput) *iam.GetContextKeysForPolicyResponse); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.GetContextKeysForPolicyResponse)
		}
	}

	return r0, r1
}

// MockIAMAPI_GetContextKeysForCustomPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContextKeysForCustomPolicyRequest'
type MockIAMAPI_GetContextKeysForCustomPolicyRequest_Call struct {
	*mock.Call
}

// GetContextKeysForCustomPolicyRequest is a helper method to define mock.On call
//   - _a0 *iam.GetContextKeysForCustomPolicyInput
func (_e *MockIAMAPI_Expecter) GetContextKeysForCustomPolicyRequest(_a0 interface{}) *MockIAMAPI_GetContextKeysForCustomPolicyRequest_Call {
	return &MockIAMAPI_GetContextKeysForCustomPolicyRequest_Call{Call: _e.mock.On("GetContextKeysForCustomPolicyRequest", _a0)}
}

func (_c *MockIAMAPI_GetContextKeysForCustomPolicyRequest_Call) Run(run func(_a0 *iam.GetContextKeysForCustomPolicyInput)) *MockIAMAPI_GetContextKeysForCustomPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetContextKeysForCustomPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetContextKeysForCustomPolicyRequest_Call) Return(_a0 *request.Request, _a1 *iam.GetContextKeysForPolicyResponse) *MockIAMAPI_GetContextKeysForCustomPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetContextKeysForCustomPolicyRequest_Call) RunAndReturn(run func(*iam.GetContextKeysForCustomPolicyInput) (*request.Request, *iam.GetContextKeysForPolicyResponse)) *MockIAMAPI_GetContextKeysForCustomPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetContextKeysForCustomPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) GetContextKeysForCustomPolicyWithContext(_a0 context.Context, _a1 *iam.GetContextKeysForCustomPolicyInput, _a2 ...request.Option) (*iam.GetContextKeysForPolicyResponse, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.GetContextKeysForPolicyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetContextKeysForCustomPolicyInput, ...request.Option) (*iam.GetContextKeysForPolicyResponse, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetContextKeysForCustomPolicyInput, ...request.Option) *iam.GetContextKeysForPolicyResponse); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetContextKeysForPolicyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.GetContextKeysForCustomPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetContextKeysForCustomPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContextKeysForCustomPolicyWithContext'
type MockIAMAPI_GetContextKeysForCustomPolicyWithContext_Call struct {
	*mock.Call
}

// GetContextKeysForCustomPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetContextKeysForCustomPolicyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) GetContextKeysForCustomPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_GetContextKeysForCustomPolicyWithContext_Call {
	return &MockIAMAPI_GetContextKeysForCustomPolicyWithContext_Call{Call: _e.mock.On("GetContextKeysForCustomPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_GetContextKeysForCustomPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetContextKeysForCustomPolicyInput, _a2 ...request.Option)) *MockIAMAPI_GetContextKeysForCustomPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetContextKeysForCustomPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GetContextKeysForCustomPolicyWithContext_Call) Return(_a0 *iam.GetContextKeysForPolicyResponse, _a1 error) *MockIAMAPI_GetContextKeysForCustomPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetContextKeysForCustomPolicyWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetContextKeysForCustomPolicyInput, ...request.Option) (*iam.GetContextKeysForPolicyResponse, error)) *MockIAMAPI_GetContextKeysForCustomPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetContextKeysForPrincipalPolicy provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetContextKeysForPrincipalPolicy(_a0 *iam.GetContextKeysForPrincipalPolicyInput) (*iam.GetContextKeysForPolicyResponse, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GetContextKeysForPolicyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.GetContextKeysForPrincipalPolicyInput) (*iam.GetContextKeysForPolicyResponse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetContextKeysForPrincipalPolicyInput) *iam.GetContextKeysForPolicyResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetContextKeysForPolicyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetContextKeysForPrincipalPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetContextKeysForPrincipalPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContextKeysForPrincipalPolicy'
type MockIAMAPI_GetContextKeysForPrincipalPolicy_Call struct {
	*mock.Call
}

// GetContextKeysForPrincipalPolicy is a helper method to define mock.On call
//   - _a0 *iam.GetContextKeysForPrincipalPolicyInput
func (_e *MockIAMAPI_Expecter) GetContextKeysForPrincipalPolicy(_a0 interface{}) *MockIAMAPI_GetContextKeysForPrincipalPolicy_Call {
	return &MockIAMAPI_GetContextKeysForPrincipalPolicy_Call{Call: _e.mock.On("GetContextKeysForPrincipalPolicy", _a0)}
}

func (_c *MockIAMAPI_GetContextKeysForPrincipalPolicy_Call) Run(run func(_a0 *iam.GetContextKeysForPrincipalPolicyInput)) *MockIAMAPI_GetContextKeysForPrincipalPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetContextKeysForPrincipalPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetContextKeysForPrincipalPolicy_Call) Return(_a0 *iam.GetContextKeysForPolicyResponse, _a1 error) *MockIAMAPI_GetContextKeysForPrincipalPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetContextKeysForPrincipalPolicy_Call) RunAndReturn(run func(*iam.GetContextKeysForPrincipalPolicyInput) (*iam.GetContextKeysForPolicyResponse, error)) *MockIAMAPI_GetContextKeysForPrincipalPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetContextKeysForPrincipalPolicyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetContextKeysForPrincipalPolicyRequest(_a0 *iam.GetContextKeysForPrincipalPolicyInput) (*request.Request, *iam.GetContextKeysForPolicyResponse) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.GetContextKeysForPolicyResponse
	if rf, ok := ret.Get(0).(func(*iam.GetContextKeysForPrincipalPolicyInput) (*request.Request, *iam.GetContextKeysForPolicyResponse)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetContextKeysForPrincipalPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetContextKeysForPrincipalPolicyInput) *iam.GetContextKeysForPolicyResponse); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.GetContextKeysForPolicyResponse)
		}
	}

	return r0, r1
}

// MockIAMAPI_GetContextKeysForPrincipalPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContextKeysForPrincipalPolicyRequest'
type MockIAMAPI_GetContextKeysForPrincipalPolicyRequest_Call struct {
	*mock.Call
}

// GetContextKeysForPrincipalPolicyRequest is a helper method to define mock.On call
//   - _a0 *iam.GetContextKeysForPrincipalPolicyInput
func (_e *MockIAMAPI_Expecter) GetContextKeysForPrincipalPolicyRequest(_a0 interface{}) *MockIAMAPI_GetContextKeysForPrincipalPolicyRequest_Call {
	return &MockIAMAPI_GetContextKeysForPrincipalPolicyRequest_Call{Call: _e.mock.On("GetContextKeysForPrincipalPolicyRequest", _a0)}
}

func (_c *MockIAMAPI_GetContextKeysForPrincipalPolicyRequest_Call) Run(run func(_a0 *iam.GetContextKeysForPrincipalPolicyInput)) *MockIAMAPI_GetContextKeysForPrincipalPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetContextKeysForPrincipalPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetContextKeysForPrincipalPolicyRequest_Call) Return(_a0 *request.Request, _a1 *iam.GetContextKeysForPolicyResponse) *MockIAMAPI_GetContextKeysForPrincipalPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetContextKeysForPrincipalPolicyRequest_Call) RunAndReturn(run func(*iam.GetContextKeysForPrincipalPolicyInput) (*request.Request, *iam.GetContextKeysForPolicyResponse)) *MockIAMAPI_GetContextKeysForPrincipalPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetContextKeysForPrincipalPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) GetContextKeysForPrincipalPolicyWithContext(_a0 context.Context, _a1 *iam.GetContextKeysForPrincipalPolicyInput, _a2 ...request.Option) (*iam.GetContextKeysForPolicyResponse, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.GetContextKeysForPolicyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetContextKeysForPrincipalPolicyInput, ...request.Option) (*iam.GetContextKeysForPolicyResponse, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetContextKeysForPrincipalPolicyInput, ...request.Option) *iam.GetContextKeysForPolicyResponse); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetContextKeysForPolicyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.GetContextKeysForPrincipalPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetContextKeysForPrincipalPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContextKeysForPrincipalPolicyWithContext'
type MockIAMAPI_GetContextKeysForPrincipalPolicyWithContext_Call struct {
	*mock.Call
}

// GetContextKeysForPrincipalPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetContextKeysForPrincipalPolicyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) GetContextKeysForPrincipalPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_GetContextKeysForPrincipalPolicyWithContext_Call {
	return &MockIAMAPI_GetContextKeysForPrincipalPolicyWithContext_Call{Call: _e.mock.On("GetContextKeysForPrincipalPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_GetContextKeysForPrincipalPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetContextKeysForPrincipalPolicyInput, _a2 ...request.Option)) *MockIAMAPI_GetContextKeysForPrincipalPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetContextKeysForPrincipalPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GetContextKeysForPrincipalPolicyWithContext_Call) Return(_a0 *iam.GetContextKeysForPolicyResponse, _a1 error) *MockIAMAPI_GetContextKeysForPrincipalPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetContextKeysForPrincipalPolicyWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetContextKeysForPrincipalPolicyInput, ...request.Option) (*iam.GetContextKeysForPolicyResponse, error)) *MockIAMAPI_GetContextKeysForPrincipalPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetCredentialReport provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetCredentialReport(_a0 *iam.GetCredentialReportInput) (*iam.GetCredentialReportOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GetCredentialReportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.GetCredentialReportInput) (*iam.GetCredentialReportOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetCredentialReportInput) *iam.GetCredentialReportOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetCredentialReportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetCredentialReportInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetCredentialReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCredentialReport'
type MockIAMAPI_GetCredentialReport_Call struct {
	*mock.Call
}

// GetCredentialReport is a helper method to define mock.On call
//   - _a0 *iam.GetCredentialReportInput
func (_e *MockIAMAPI_Expecter) GetCredentialReport(_a0 interface{}) *MockIAMAPI_GetCredentialReport_Call {
	return &MockIAMAPI_GetCredentialReport_Call{Call: _e.mock.On("GetCredentialReport", _a0)}
}

func (_c *MockIAMAPI_GetCredentialReport_Call) Run(run func(_a0 *iam.GetCredentialReportInput)) *MockIAMAPI_GetCredentialReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetCredentialReportInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetCredentialReport_Call) Return(_a0 *iam.GetCredentialReportOutput, _a1 error) *MockIAMAPI_GetCredentialReport_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetCredentialReport_Call) RunAndReturn(run func(*iam.GetCredentialReportInput) (*iam.GetCredentialReportOutput, error)) *MockIAMAPI_GetCredentialReport_Call {
	_c.Call.Return(run)
	return _c
}

// GetCredentialReportRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetCredentialReportRequest(_a0 *iam.GetCredentialReportInput) (*request.Request, *iam.GetCredentialReportOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.GetCredentialReportOutput
	if rf, ok := ret.Get(0).(func(*iam.GetCredentialReportInput) (*request.Request, *iam.GetCredentialReportOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetCredentialReportInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetCredentialReportInput) *iam.GetCredentialReportOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.GetCredentialReportOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_GetCredentialReportRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCredentialReportRequest'
type MockIAMAPI_GetCredentialReportRequest_Call struct {
	*mock.Call
}

// GetCredentialReportRequest is a helper method to define mock.On call
//   - _a0 *iam.GetCredentialReportInput
func (_e *MockIAMAPI_Expecter) GetCredentialReportRequest(_a0 interface{}) *MockIAMAPI_GetCredentialReportRequest_Call {
	return &MockIAMAPI_GetCredentialReportRequest_Call{Call: _e.mock.On("GetCredentialReportRequest", _a0)}
}

func (_c *MockIAMAPI_GetCredentialReportRequest_Call) Run(run func(_a0 *iam.GetCredentialReportInput)) *MockIAMAPI_GetCredentialReportRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetCredentialReportInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetCredentialReportRequest_Call) Return(_a0 *request.Request, _a1 *iam.GetCredentialReportOutput) *MockIAMAPI_GetCredentialReportRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetCredentialReportRequest_Call) RunAndReturn(run func(*iam.GetCredentialReportInput) (*request.Request, *iam.GetCredentialReportOutput)) *MockIAMAPI_GetCredentialReportRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetCredentialReportWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) GetCredentialReportWithContext(_a0 context.Context, _a1 *iam.GetCredentialReportInput, _a2 ...request.Option) (*iam.GetCredentialReportOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.GetCredentialReportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetCredentialReportInput, ...request.Option) (*iam.GetCredentialReportOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetCredentialReportInput, ...request.Option) *iam.GetCredentialReportOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetCredentialReportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.GetCredentialReportInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetCredentialReportWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCredentialReportWithContext'
type MockIAMAPI_GetCredentialReportWithContext_Call struct {
	*mock.Call
}

// GetCredentialReportWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetCredentialReportInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) GetCredentialReportWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_GetCredentialReportWithContext_Call {
	return &MockIAMAPI_GetCredentialReportWithContext_Call{Call: _e.mock.On("GetCredentialReportWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_GetCredentialReportWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetCredentialReportInput, _a2 ...request.Option)) *MockIAMAPI_GetCredentialReportWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetCredentialReportInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GetCredentialReportWithContext_Call) Return(_a0 *iam.GetCredentialReportOutput, _a1 error) *MockIAMAPI_GetCredentialReportWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetCredentialReportWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetCredentialReportInput, ...request.Option) (*iam.GetCredentialReportOutput, error)) *MockIAMAPI_GetCredentialReportWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroup provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetGroup(_a0 *iam.GetGroupInput) (*iam.GetGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GetGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.GetGroupInput) (*iam.GetGroupOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetGroupInput) *iam.GetGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroup'
type MockIAMAPI_GetGroup_Call struct {
	*mock.Call
}

// GetGroup is a helper method to define mock.On call
//   - _a0 *iam.GetGroupInput
func (_e *MockIAMAPI_Expecter) GetGroup(_a0 interface{}) *MockIAMAPI_GetGroup_Call {
	return &MockIAMAPI_GetGroup_Call{Call: _e.mock.On("GetGroup", _a0)}
}

func (_c *MockIAMAPI_GetGroup_Call) Run(run func(_a0 *iam.GetGroupInput)) *MockIAMAPI_GetGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetGroupInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetGroup_Call) Return(_a0 *iam.GetGroupOutput, _a1 error) *MockIAMAPI_GetGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetGroup_Call) RunAndReturn(run func(*iam.GetGroupInput) (*iam.GetGroupOutput, error)) *MockIAMAPI_GetGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) GetGroupPages(_a0 *iam.GetGroupInput, _a1 func(*iam.GetGroupOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.GetGroupInput, func(*iam.GetGroupOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_GetGroupPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupPages'
type MockIAMAPI_GetGroupPages_Call struct {
	*mock.Call
}

// GetGroupPages is a helper method to define mock.On call
//   - _a0 *iam.GetGroupInput
//   - _a1 func(*iam.GetGroupOutput , bool) bool
func (_e *MockIAMAPI_Expecter) GetGroupPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_GetGroupPages_Call {
	return &MockIAMAPI_GetGroupPages_Call{Call: _e.mock.On("GetGroupPages", _a0, _a1)}
}

func (_c *MockIAMAPI_GetGroupPages_Call) Run(run func(_a0 *iam.GetGroupInput, _a1 func(*iam.GetGroupOutput, bool) bool)) *MockIAMAPI_GetGroupPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetGroupInput), args[1].(func(*iam.GetGroupOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_GetGroupPages_Call) Return(_a0 error) *MockIAMAPI_GetGroupPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_GetGroupPages_Call) RunAndReturn(run func(*iam.GetGroupInput, func(*iam.GetGroupOutput, bool) bool) error) *MockIAMAPI_GetGroupPages_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) GetGroupPagesWithContext(_a0 context.Context, _a1 *iam.GetGroupInput, _a2 func(*iam.GetGroupOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetGroupInput, func(*iam.GetGroupOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_GetGroupPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupPagesWithContext'
type MockIAMAPI_GetGroupPagesWithContext_Call struct {
	*mock.Call
}

// GetGroupPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetGroupInput
//   - _a2 func(*iam.GetGroupOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) GetGroupPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_GetGroupPagesWithContext_Call {
	return &MockIAMAPI_GetGroupPagesWithContext_Call{Call: _e.mock.On("GetGroupPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_GetGroupPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetGroupInput, _a2 func(*iam.GetGroupOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_GetGroupPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetGroupInput), args[2].(func(*iam.GetGroupOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GetGroupPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_GetGroupPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_GetGroupPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetGroupInput, func(*iam.GetGroupOutput, bool) bool, ...request.Option) error) *MockIAMAPI_GetGroupPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupPolicy provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetGroupPolicy(_a0 *iam.GetGroupPolicyInput) (*iam.GetGroupPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GetGroupPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.GetGroupPolicyInput) (*iam.GetGroupPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetGroupPolicyInput) *iam.GetGroupPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetGroupPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetGroupPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetGroupPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupPolicy'
type MockIAMAPI_GetGroupPolicy_Call struct {
	*mock.Call
}

// GetGroupPolicy is a helper method to define mock.On call
//   - _a0 *iam.GetGroupPolicyInput
func (_e *MockIAMAPI_Expecter) GetGroupPolicy(_a0 interface{}) *MockIAMAPI_GetGroupPolicy_Call {
	return &MockIAMAPI_GetGroupPolicy_Call{Call: _e.mock.On("GetGroupPolicy", _a0)}
}

func (_c *MockIAMAPI_GetGroupPolicy_Call) Run(run func(_a0 *iam.GetGroupPolicyInput)) *MockIAMAPI_GetGroupPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetGroupPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetGroupPolicy_Call) Return(_a0 *iam.GetGroupPolicyOutput, _a1 error) *MockIAMAPI_GetGroupPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetGroupPolicy_Call) RunAndReturn(run func(*iam.GetGroupPolicyInput) (*iam.GetGroupPolicyOutput, error)) *MockIAMAPI_GetGroupPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupPolicyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetGroupPolicyRequest(_a0 *iam.GetGroupPolicyInput) (*request.Request, *iam.GetGroupPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.GetGroupPolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.GetGroupPolicyInput) (*request.Request, *iam.GetGroupPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetGroupPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetGroupPolicyInput) *iam.GetGroupPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.GetGroupPolicyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_GetGroupPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupPolicyRequest'
type MockIAMAPI_GetGroupPolicyRequest_Call struct {
	*mock.Call
}

// GetGroupPolicyRequest is a helper method to define mock.On call
//   - _a0 *iam.GetGroupPolicyInput
func (_e *MockIAMAPI_Expecter) GetGroupPolicyRequest(_a0 interface{}) *MockIAMAPI_GetGroupPolicyRequest_Call {
	return &MockIAMAPI_GetGroupPolicyRequest_Call{Call: _e.mock.On("GetGroupPolicyRequest", _a0)}
}

func (_c *MockIAMAPI_GetGroupPolicyRequest_Call) Run(run func(_a0 *iam.GetGroupPolicyInput)) *MockIAMAPI_GetGroupPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetGroupPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetGroupPolicyRequest_Call) Return(_a0 *request.Request, _a1 *iam.GetGroupPolicyOutput) *MockIAMAPI_GetGroupPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetGroupPolicyRequest_Call) RunAndReturn(run func(*iam.GetGroupPolicyInput) (*request.Request, *iam.GetGroupPolicyOutput)) *MockIAMAPI_GetGroupPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) GetGroupPolicyWithContext(_a0 context.Context, _a1 *iam.GetGroupPolicyInput, _a2 ...request.Option) (*iam.GetGroupPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.GetGroupPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetGroupPolicyInput, ...request.Option) (*iam.GetGroupPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetGroupPolicyInput, ...request.Option) *iam.GetGroupPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetGroupPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.GetGroupPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetGroupPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupPolicyWithContext'
type MockIAMAPI_GetGroupPolicyWithContext_Call struct {
	*mock.Call
}

// GetGroupPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetGroupPolicyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) GetGroupPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_GetGroupPolicyWithContext_Call {
	return &MockIAMAPI_GetGroupPolicyWithContext_Call{Call: _e.mock.On("GetGroupPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_GetGroupPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetGroupPolicyInput, _a2 ...request.Option)) *MockIAMAPI_GetGroupPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetGroupPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GetGroupPolicyWithContext_Call) Return(_a0 *iam.GetGroupPolicyOutput, _a1 error) *MockIAMAPI_GetGroupPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetGroupPolicyWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetGroupPolicyInput, ...request.Option) (*iam.GetGroupPolicyOutput, error)) *MockIAMAPI_GetGroupPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetGroupRequest(_a0 *iam.GetGroupInput) (*request.Request, *iam.GetGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.GetGroupOutput
	if rf, ok := ret.Get(0).(func(*iam.GetGroupInput) (*request.Request, *iam.GetGroupOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetGroupInput) *iam.GetGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.GetGroupOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_GetGroupRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupRequest'
type MockIAMAPI_GetGroupRequest_Call struct {
	*mock.Call
}

// GetGroupRequest is a helper method to define mock.On call
//   - _a0 *iam.GetGroupInput
func (_e *MockIAMAPI_Expecter) GetGroupRequest(_a0 interface{}) *MockIAMAPI_GetGroupRequest_Call {
	return &MockIAMAPI_GetGroupRequest_Call{Call: _e.mock.On("GetGroupRequest", _a0)}
}

func (_c *MockIAMAPI_GetGroupRequest_Call) Run(run func(_a0 *iam.GetGroupInput)) *MockIAMAPI_GetGroupRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetGroupInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetGroupRequest_Call) Return(_a0 *request.Request, _a1 *iam.GetGroupOutput) *MockIAMAPI_GetGroupRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetGroupRequest_Call) RunAndReturn(run func(*iam.GetGroupInput) (*request.Request, *iam.GetGroupOutput)) *MockIAMAPI_GetGroupRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) GetGroupWithContext(_a0 context.Context, _a1 *iam.GetGroupInput, _a2 ...request.Option) (*iam.GetGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.GetGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetGroupInput, ...request.Option) (*iam.GetGroupOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetGroupInput, ...request.Option) *iam.GetGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.GetGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetGroupWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupWithContext'
type MockIAMAPI_GetGroupWithContext_Call struct {
	*mock.Call
}

// GetGroupWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetGroupInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) GetGroupWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_GetGroupWithContext_Call {
	return &MockIAMAPI_GetGroupWithContext_Call{Call: _e.mock.On("GetGroupWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_GetGroupWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetGroupInput, _a2 ...request.Option)) *MockIAMAPI_GetGroupWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetGroupInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GetGroupWithContext_Call) Return(_a0 *iam.GetGroupOutput, _a1 error) *MockIAMAPI_GetGroupWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetGroupWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetGroupInput, ...request.Option) (*iam.GetGroupOutput, error)) *MockIAMAPI_GetGroupWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstanceProfile provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetInstanceProfile(_a0 *iam.GetInstanceProfileInput) (*iam.GetInstanceProfileOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GetInstanceProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.GetInstanceProfileInput) (*iam.GetInstanceProfileOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetInstanceProfileInput) *iam.GetInstanceProfileOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetInstanceProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetInstanceProfileInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetInstanceProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstanceProfile'
type MockIAMAPI_GetInstanceProfile_Call struct {
	*mock.Call
}

// GetInstanceProfile is a helper method to define mock.On call
//   - _a0 *iam.GetInstanceProfileInput
func (_e *MockIAMAPI_Expecter) GetInstanceProfile(_a0 interface{}) *MockIAMAPI_GetInstanceProfile_Call {
	return &MockIAMAPI_GetInstanceProfile_Call{Call: _e.mock.On("GetInstanceProfile", _a0)}
}

func (_c *MockIAMAPI_GetInstanceProfile_Call) Run(run func(_a0 *iam.GetInstanceProfileInput)) *MockIAMAPI_GetInstanceProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetInstanceProfileInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetInstanceProfile_Call) Return(_a0 *iam.GetInstanceProfileOutput, _a1 error) *MockIAMAPI_GetInstanceProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetInstanceProfile_Call) RunAndReturn(run func(*iam.GetInstanceProfileInput) (*iam.GetInstanceProfileOutput, error)) *MockIAMAPI_GetInstanceProfile_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstanceProfileRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetInstanceProfileRequest(_a0 *iam.GetInstanceProfileInput) (*request.Request, *iam.GetInstanceProfileOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.GetInstanceProfileOutput
	if rf, ok := ret.Get(0).(func(*iam.GetInstanceProfileInput) (*request.Request, *iam.GetInstanceProfileOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetInstanceProfileInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetInstanceProfileInput) *iam.GetInstanceProfileOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.GetInstanceProfileOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_GetInstanceProfileRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstanceProfileRequest'
type MockIAMAPI_GetInstanceProfileRequest_Call struct {
	*mock.Call
}

// GetInstanceProfileRequest is a helper method to define mock.On call
//   - _a0 *iam.GetInstanceProfileInput
func (_e *MockIAMAPI_Expecter) GetInstanceProfileRequest(_a0 interface{}) *MockIAMAPI_GetInstanceProfileRequest_Call {
	return &MockIAMAPI_GetInstanceProfileRequest_Call{Call: _e.mock.On("GetInstanceProfileRequest", _a0)}
}

func (_c *MockIAMAPI_GetInstanceProfileRequest_Call) Run(run func(_a0 *iam.GetInstanceProfileInput)) *MockIAMAPI_GetInstanceProfileRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetInstanceProfileInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetInstanceProfileRequest_Call) Return(_a0 *request.Request, _a1 *iam.GetInstanceProfileOutput) *MockIAMAPI_GetInstanceProfileRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetInstanceProfileRequest_Call) RunAndReturn(run func(*iam.GetInstanceProfileInput) (*request.Request, *iam.GetInstanceProfileOutput)) *MockIAMAPI_GetInstanceProfileRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstanceProfileWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) GetInstanceProfileWithContext(_a0 context.Context, _a1 *iam.GetInstanceProfileInput, _a2 ...request.Option) (*iam.GetInstanceProfileOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.GetInstanceProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetInstanceProfileInput, ...request.Option) (*iam.GetInstanceProfileOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetInstanceProfileInput, ...request.Option) *iam.GetInstanceProfileOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetInstanceProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.GetInstanceProfileInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetInstanceProfileWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstanceProfileWithContext'
type MockIAMAPI_GetInstanceProfileWithContext_Call struct {
	*mock.Call
}

// GetInstanceProfileWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetInstanceProfileInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) GetInstanceProfileWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_GetInstanceProfileWithContext_Call {
	return &MockIAMAPI_GetInstanceProfileWithContext_Call{Call: _e.mock.On("GetInstanceProfileWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_GetInstanceProfileWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetInstanceProfileInput, _a2 ...request.Option)) *MockIAMAPI_GetInstanceProfileWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetInstanceProfileInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GetInstanceProfileWithContext_Call) Return(_a0 *iam.GetInstanceProfileOutput, _a1 error) *MockIAMAPI_GetInstanceProfileWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetInstanceProfileWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetInstanceProfileInput, ...request.Option) (*iam.GetInstanceProfileOutput, error)) *MockIAMAPI_GetInstanceProfileWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetLoginProfile provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetLoginProfile(_a0 *iam.GetLoginProfileInput) (*iam.GetLoginProfileOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GetLoginProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.GetLoginProfileInput) (*iam.GetLoginProfileOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetLoginProfileInput) *iam.GetLoginProfileOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetLoginProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetLoginProfileInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetLoginProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLoginProfile'
type MockIAMAPI_GetLoginProfile_Call struct {
	*mock.Call
}

// GetLoginProfile is a helper method to define mock.On call
//   - _a0 *iam.GetLoginProfileInput
func (_e *MockIAMAPI_Expecter) GetLoginProfile(_a0 interface{}) *MockIAMAPI_GetLoginProfile_Call {
	return &MockIAMAPI_GetLoginProfile_Call{Call: _e.mock.On("GetLoginProfile", _a0)}
}

func (_c *MockIAMAPI_GetLoginProfile_Call) Run(run func(_a0 *iam.GetLoginProfileInput)) *MockIAMAPI_GetLoginProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetLoginProfileInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetLoginProfile_Call) Return(_a0 *iam.GetLoginProfileOutput, _a1 error) *MockIAMAPI_GetLoginProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetLoginProfile_Call) RunAndReturn(run func(*iam.GetLoginProfileInput) (*iam.GetLoginProfileOutput, error)) *MockIAMAPI_GetLoginProfile_Call {
	_c.Call.Return(run)
	return _c
}

// GetLoginProfileRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetLoginProfileRequest(_a0 *iam.GetLoginProfileInput) (*request.Request, *iam.GetLoginProfileOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.GetLoginProfileOutput
	if rf, ok := ret.Get(0).(func(*iam.GetLoginProfileInput) (*request.Request, *iam.GetLoginProfileOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetLoginProfileInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetLoginProfileInput) *iam.GetLoginProfileOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.GetLoginProfileOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_GetLoginProfileRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLoginProfileRequest'
type MockIAMAPI_GetLoginProfileRequest_Call struct {
	*mock.Call
}

// GetLoginProfileRequest is a helper method to define mock.On call
//   - _a0 *iam.GetLoginProfileInput
func (_e *MockIAMAPI_Expecter) GetLoginProfileRequest(_a0 interface{}) *MockIAMAPI_GetLoginProfileRequest_Call {
	return &MockIAMAPI_GetLoginProfileRequest_Call{Call: _e.mock.On("GetLoginProfileRequest", _a0)}
}

func (_c *MockIAMAPI_GetLoginProfileRequest_Call) Run(run func(_a0 *iam.GetLoginProfileInput)) *MockIAMAPI_GetLoginProfileRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetLoginProfileInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetLoginProfileRequest_Call) Return(_a0 *request.Request, _a1 *iam.GetLoginProfileOutput) *MockIAMAPI_GetLoginProfileRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetLoginProfileRequest_Call) RunAndReturn(run func(*iam.GetLoginProfileInput) (*request.Request, *iam.GetLoginProfileOutput)) *MockIAMAPI_GetLoginProfileRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetLoginProfileWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) GetLoginProfileWithContext(_a0 context.Context, _a1 *iam.GetLoginProfileInput, _a2 ...request.Option) (*iam.GetLoginProfileOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.GetLoginProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetLoginProfileInput, ...request.Option) (*iam.GetLoginProfileOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetLoginProfileInput, ...request.Option) *iam.GetLoginProfileOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetLoginProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.GetLoginProfileInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetLoginProfileWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLoginProfileWithContext'
type MockIAMAPI_GetLoginProfileWithContext_Call struct {
	*mock.Call
}

// GetLoginProfileWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetLoginProfileInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) GetLoginProfileWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_GetLoginProfileWithContext_Call {
	return &MockIAMAPI_GetLoginProfileWithContext_Call{Call: _e.mock.On("GetLoginProfileWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_GetLoginProfileWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetLoginProfileInput, _a2 ...request.Option)) *MockIAMAPI_GetLoginProfileWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetLoginProfileInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GetLoginProfileWithContext_Call) Return(_a0 *iam.GetLoginProfileOutput, _a1 error) *MockIAMAPI_GetLoginProfileWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetLoginProfileWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetLoginProfileInput, ...request.Option) (*iam.GetLoginProfileOutput, error)) *MockIAMAPI_GetLoginProfileWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetMFADevice provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetMFADevice(_a0 *iam.GetMFADeviceInput) (*iam.GetMFADeviceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GetMFADeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.GetMFADeviceInput) (*iam.GetMFADeviceOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetMFADeviceInput) *iam.GetMFADeviceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetMFADeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetMFADeviceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetMFADevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMFADevice'
type MockIAMAPI_GetMFADevice_Call struct {
	*mock.Call
}

// GetMFADevice is a helper method to define mock.On call
//   - _a0 *iam.GetMFADeviceInput
func (_e *MockIAMAPI_Expecter) GetMFADevice(_a0 interface{}) *MockIAMAPI_GetMFADevice_Call {
	return &MockIAMAPI_GetMFADevice_Call{Call: _e.mock.On("GetMFADevice", _a0)}
}

func (_c *MockIAMAPI_GetMFADevice_Call) Run(run func(_a0 *iam.GetMFADeviceInput)) *MockIAMAPI_GetMFADevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetMFADeviceInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetMFADevice_Call) Return(_a0 *iam.GetMFADeviceOutput, _a1 error) *MockIAMAPI_GetMFADevice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetMFADevice_Call) RunAndReturn(run func(*iam.GetMFADeviceInput) (*iam.GetMFADeviceOutput, error)) *MockIAMAPI_GetMFADevice_Call {
	_c.Call.Return(run)
	return _c
}

// GetMFADeviceRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetMFADeviceRequest(_a0 *iam.GetMFADeviceInput) (*request.Request, *iam.GetMFADeviceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.GetMFADeviceOutput
	if rf, ok := ret.Get(0).(func(*iam.GetMFADeviceInput) (*request.Request, *iam.GetMFADeviceOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetMFADeviceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetMFADeviceInput) *iam.GetMFADeviceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.GetMFADeviceOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_GetMFADeviceRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMFADeviceRequest'
type MockIAMAPI_GetMFADeviceRequest_Call struct {
	*mock.Call
}

// GetMFADeviceRequest is a helper method to define mock.On call
//   - _a0 *iam.GetMFADeviceInput
func (_e *MockIAMAPI_Expecter) GetMFADeviceRequest(_a0 interface{}) *MockIAMAPI_GetMFADeviceRequest_Call {
	return &MockIAMAPI_GetMFADeviceRequest_Call{Call: _e.mock.On("GetMFADeviceRequest", _a0)}
}

func (_c *MockIAMAPI_GetMFADeviceRequest_Call) Run(run func(_a0 *iam.GetMFADeviceInput)) *MockIAMAPI_GetMFADeviceRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetMFADeviceInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetMFADeviceRequest_Call) Return(_a0 *request.Request, _a1 *iam.GetMFADeviceOutput) *MockIAMAPI_GetMFADeviceRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetMFADeviceRequest_Call) RunAndReturn(run func(*iam.GetMFADeviceInput) (*request.Request, *iam.GetMFADeviceOutput)) *MockIAMAPI_GetMFADeviceRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetMFADeviceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) GetMFADeviceWithContext(_a0 context.Context, _a1 *iam.GetMFADeviceInput, _a2 ...request.Option) (*iam.GetMFADeviceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.GetMFADeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetMFADeviceInput, ...request.Option) (*iam.GetMFADeviceOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetMFADeviceInput, ...request.Option) *iam.GetMFADeviceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetMFADeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.GetMFADeviceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetMFADeviceWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMFADeviceWithContext'
type MockIAMAPI_GetMFADeviceWithContext_Call struct {
	*mock.Call
}

// GetMFADeviceWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetMFADeviceInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) GetMFADeviceWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_GetMFADeviceWithContext_Call {
	return &MockIAMAPI_GetMFADeviceWithContext_Call{Call: _e.mock.On("GetMFADeviceWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_GetMFADeviceWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetMFADeviceInput, _a2 ...request.Option)) *MockIAMAPI_GetMFADeviceWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetMFADeviceInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GetMFADeviceWithContext_Call) Return(_a0 *iam.GetMFADeviceOutput, _a1 error) *MockIAMAPI_GetMFADeviceWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetMFADeviceWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetMFADeviceInput, ...request.Option) (*iam.GetMFADeviceOutput, error)) *MockIAMAPI_GetMFADeviceWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetOpenIDConnectProvider provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetOpenIDConnectProvider(_a0 *iam.GetOpenIDConnectProviderInput) (*iam.GetOpenIDConnectProviderOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GetOpenIDConnectProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.GetOpenIDConnectProviderInput) (*iam.GetOpenIDConnectProviderOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetOpenIDConnectProviderInput) *iam.GetOpenIDConnectProviderOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetOpenIDConnectProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetOpenIDConnectProviderInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetOpenIDConnectProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOpenIDConnectProvider'
type MockIAMAPI_GetOpenIDConnectProvider_Call struct {
	*mock.Call
}

// GetOpenIDConnectProvider is a helper method to define mock.On call
//   - _a0 *iam.GetOpenIDConnectProviderInput
func (_e *MockIAMAPI_Expecter) GetOpenIDConnectProvider(_a0 interface{}) *MockIAMAPI_GetOpenIDConnectProvider_Call {
	return &MockIAMAPI_GetOpenIDConnectProvider_Call{Call: _e.mock.On("GetOpenIDConnectProvider", _a0)}
}

func (_c *MockIAMAPI_GetOpenIDConnectProvider_Call) Run(run func(_a0 *iam.GetOpenIDConnectProviderInput)) *MockIAMAPI_GetOpenIDConnectProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetOpenIDConnectProviderInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetOpenIDConnectProvider_Call) Return(_a0 *iam.GetOpenIDConnectProviderOutput, _a1 error) *MockIAMAPI_GetOpenIDConnectProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetOpenIDConnectProvider_Call) RunAndReturn(run func(*iam.GetOpenIDConnectProviderInput) (*iam.GetOpenIDConnectProviderOutput, error)) *MockIAMAPI_GetOpenIDConnectProvider_Call {
	_c.Call.Return(run)
	return _c
}

// GetOpenIDConnectProviderRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetOpenIDConnectProviderRequest(_a0 *iam.GetOpenIDConnectProviderInput) (*request.Request, *iam.GetOpenIDConnectProviderOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.GetOpenIDConnectProviderOutput
	if rf, ok := ret.Get(0).(func(*iam.GetOpenIDConnectProviderInput) (*request.Request, *iam.GetOpenIDConnectProviderOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetOpenIDConnectProviderInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetOpenIDConnectProviderInput) *iam.GetOpenIDConnectProviderOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.GetOpenIDConnectProviderOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_GetOpenIDConnectProviderRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOpenIDConnectProviderRequest'
type MockIAMAPI_GetOpenIDConnectProviderRequest_Call struct {
	*mock.Call
}

// GetOpenIDConnectProviderRequest is a helper method to define mock.On call
//   - _a0 *iam.GetOpenIDConnectProviderInput
func (_e *MockIAMAPI_Expecter) GetOpenIDConnectProviderRequest(_a0 interface{}) *MockIAMAPI_GetOpenIDConnectProviderRequest_Call {
	return &MockIAMAPI_GetOpenIDConnectProviderRequest_Call{Call: _e.mock.On("GetOpenIDConnectProviderRequest", _a0)}
}

func (_c *MockIAMAPI_GetOpenIDConnectProviderRequest_Call) Run(run func(_a0 *iam.GetOpenIDConnectProviderInput)) *MockIAMAPI_GetOpenIDConnectProviderRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetOpenIDConnectProviderInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetOpenIDConnectProviderRequest_Call) Return(_a0 *request.Request, _a1 *iam.GetOpenIDConnectProviderOutput) *MockIAMAPI_GetOpenIDConnectProviderRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetOpenIDConnectProviderRequest_Call) RunAndReturn(run func(*iam.GetOpenIDConnectProviderInput) (*request.Request, *iam.GetOpenIDConnectProviderOutput)) *MockIAMAPI_GetOpenIDConnectProviderRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetOpenIDConnectProviderWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) GetOpenIDConnectProviderWithContext(_a0 context.Context, _a1 *iam.GetOpenIDConnectProviderInput, _a2 ...request.Option) (*iam.GetOpenIDConnectProviderOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.GetOpenIDConnectProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetOpenIDConnectProviderInput, ...request.Option) (*iam.GetOpenIDConnectProviderOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetOpenIDConnectProviderInput, ...request.Option) *iam.GetOpenIDConnectProviderOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetOpenIDConnectProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.GetOpenIDConnectProviderInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetOpenIDConnectProviderWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOpenIDConnectProviderWithContext'
type MockIAMAPI_GetOpenIDConnectProviderWithContext_Call struct {
	*mock.Call
}

// GetOpenIDConnectProviderWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetOpenIDConnectProviderInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) GetOpenIDConnectProviderWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_GetOpenIDConnectProviderWithContext_Call {
	return &MockIAMAPI_GetOpenIDConnectProviderWithContext_Call{Call: _e.mock.On("GetOpenIDConnectProviderWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_GetOpenIDConnectProviderWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetOpenIDConnectProviderInput, _a2 ...request.Option)) *MockIAMAPI_GetOpenIDConnectProviderWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetOpenIDConnectProviderInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GetOpenIDConnectProviderWithContext_Call) Return(_a0 *iam.GetOpenIDConnectProviderOutput, _a1 error) *MockIAMAPI_GetOpenIDConnectProviderWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetOpenIDConnectProviderWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetOpenIDConnectProviderInput, ...request.Option) (*iam.GetOpenIDConnectProviderOutput, error)) *MockIAMAPI_GetOpenIDConnectProviderWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationsAccessReport provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetOrganizationsAccessReport(_a0 *iam.GetOrganizationsAccessReportInput) (*iam.GetOrganizationsAccessReportOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GetOrganizationsAccessReportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.GetOrganizationsAccessReportInput) (*iam.GetOrganizationsAccessReportOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetOrganizationsAccessReportInput) *iam.GetOrganizationsAccessReportOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetOrganizationsAccessReportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetOrganizationsAccessReportInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetOrganizationsAccessReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationsAccessReport'
type MockIAMAPI_GetOrganizationsAccessReport_Call struct {
	*mock.Call
}

// GetOrganizationsAccessReport is a helper method to define mock.On call
//   - _a0 *iam.GetOrganizationsAccessReportInput
func (_e *MockIAMAPI_Expecter) GetOrganizationsAccessReport(_a0 interface{}) *MockIAMAPI_GetOrganizationsAccessReport_Call {
	return &MockIAMAPI_GetOrganizationsAccessReport_Call{Call: _e.mock.On("GetOrganizationsAccessReport", _a0)}
}

func (_c *MockIAMAPI_GetOrganizationsAccessReport_Call) Run(run func(_a0 *iam.GetOrganizationsAccessReportInput)) *MockIAMAPI_GetOrganizationsAccessReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetOrganizationsAccessReportInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetOrganizationsAccessReport_Call) Return(_a0 *iam.GetOrganizationsAccessReportOutput, _a1 error) *MockIAMAPI_GetOrganizationsAccessReport_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetOrganizationsAccessReport_Call) RunAndReturn(run func(*iam.GetOrganizationsAccessReportInput) (*iam.GetOrganizationsAccessReportOutput, error)) *MockIAMAPI_GetOrganizationsAccessReport_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationsAccessReportRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetOrganizationsAccessReportRequest(_a0 *iam.GetOrganizationsAccessReportInput) (*request.Request, *iam.GetOrganizationsAccessReportOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.GetOrganizationsAccessReportOutput
	if rf, ok := ret.Get(0).(func(*iam.GetOrganizationsAccessReportInput) (*request.Request, *iam.GetOrganizationsAccessReportOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetOrganizationsAccessReportInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetOrganizationsAccessReportInput) *iam.GetOrganizationsAccessReportOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.GetOrganizationsAccessReportOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_GetOrganizationsAccessReportRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationsAccessReportRequest'
type MockIAMAPI_GetOrganizationsAccessReportRequest_Call struct {
	*mock.Call
}

// GetOrganizationsAccessReportRequest is a helper method to define mock.On call
//   - _a0 *iam.GetOrganizationsAccessReportInput
func (_e *MockIAMAPI_Expecter) GetOrganizationsAccessReportRequest(_a0 interface{}) *MockIAMAPI_GetOrganizationsAccessReportRequest_Call {
	return &MockIAMAPI_GetOrganizationsAccessReportRequest_Call{Call: _e.mock.On("GetOrganizationsAccessReportRequest", _a0)}
}

func (_c *MockIAMAPI_GetOrganizationsAccessReportRequest_Call) Run(run func(_a0 *iam.GetOrganizationsAccessReportInput)) *MockIAMAPI_GetOrganizationsAccessReportRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetOrganizationsAccessReportInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetOrganizationsAccessReportRequest_Call) Return(_a0 *request.Request, _a1 *iam.GetOrganizationsAccessReportOutput) *MockIAMAPI_GetOrganizationsAccessReportRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetOrganizationsAccessReportRequest_Call) RunAndReturn(run func(*iam.GetOrganizationsAccessReportInput) (*request.Request, *iam.GetOrganizationsAccessReportOutput)) *MockIAMAPI_GetOrganizationsAccessReportRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationsAccessReportWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) GetOrganizationsAccessReportWithContext(_a0 context.Context, _a1 *iam.GetOrganizationsAccessReportInput, _a2 ...request.Option) (*iam.GetOrganizationsAccessReportOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.GetOrganizationsAccessReportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetOrganizationsAccessReportInput, ...request.Option) (*iam.GetOrganizationsAccessReportOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetOrganizationsAccessReportInput, ...request.Option) *iam.GetOrganizationsAccessReportOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetOrganizationsAccessReportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.GetOrganizationsAccessReportInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetOrganizationsAccessReportWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationsAccessReportWithContext'
type MockIAMAPI_GetOrganizationsAccessReportWithContext_Call struct {
	*mock.Call
}

// GetOrganizationsAccessReportWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetOrganizationsAccessReportInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) GetOrganizationsAccessReportWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_GetOrganizationsAccessReportWithContext_Call {
	return &MockIAMAPI_GetOrganizationsAccessReportWithContext_Call{Call: _e.mock.On("GetOrganizationsAccessReportWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_GetOrganizationsAccessReportWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetOrganizationsAccessReportInput, _a2 ...request.Option)) *MockIAMAPI_GetOrganizationsAccessReportWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetOrganizationsAccessReportInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GetOrganizationsAccessReportWithContext_Call) Return(_a0 *iam.GetOrganizationsAccessReportOutput, _a1 error) *MockIAMAPI_GetOrganizationsAccessReportWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetOrganizationsAccessReportWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetOrganizationsAccessReportInput, ...request.Option) (*iam.GetOrganizationsAccessReportOutput, error)) *MockIAMAPI_GetOrganizationsAccessReportWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicy provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetPolicy(_a0 *iam.GetPolicyInput) (*iam.GetPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GetPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.GetPolicyInput) (*iam.GetPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetPolicyInput) *iam.GetPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicy'
type MockIAMAPI_GetPolicy_Call struct {
	*mock.Call
}

// GetPolicy is a helper method to define mock.On call
//   - _a0 *iam.GetPolicyInput
func (_e *MockIAMAPI_Expecter) GetPolicy(_a0 interface{}) *MockIAMAPI_GetPolicy_Call {
	return &MockIAMAPI_GetPolicy_Call{Call: _e.mock.On("GetPolicy", _a0)}
}

func (_c *MockIAMAPI_GetPolicy_Call) Run(run func(_a0 *iam.GetPolicyInput)) *MockIAMAPI_GetPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetPolicy_Call) Return(_a0 *iam.GetPolicyOutput, _a1 error) *MockIAMAPI_GetPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetPolicy_Call) RunAndReturn(run func(*iam.GetPolicyInput) (*iam.GetPolicyOutput, error)) *MockIAMAPI_GetPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetPolicyRequest(_a0 *iam.GetPolicyInput) (*request.Request, *iam.GetPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.GetPolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.GetPolicyInput) (*request.Request, *iam.GetPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetPolicyInput) *iam.GetPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.GetPolicyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_GetPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicyRequest'
type MockIAMAPI_GetPolicyRequest_Call struct {
	*mock.Call
}

// GetPolicyRequest is a helper method to define mock.On call
//   - _a0 *iam.GetPolicyInput
func (_e *MockIAMAPI_Expecter) GetPolicyRequest(_a0 interface{}) *MockIAMAPI_GetPolicyRequest_Call {
	return &MockIAMAPI_GetPolicyRequest_Call{Call: _e.mock.On("GetPolicyRequest", _a0)}
}

func (_c *MockIAMAPI_GetPolicyRequest_Call) Run(run func(_a0 *iam.GetPolicyInput)) *MockIAMAPI_GetPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetPolicyRequest_Call) Return(_a0 *request.Request, _a1 *iam.GetPolicyOutput) *MockIAMAPI_GetPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetPolicyRequest_Call) RunAndReturn(run func(*iam.GetPolicyInput) (*request.Request, *iam.GetPolicyOutput)) *MockIAMAPI_GetPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicyVersion provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetPolicyVersion(_a0 *iam.GetPolicyVersionInput) (*iam.GetPolicyVersionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GetPolicyVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.GetPolicyVersionInput) (*iam.GetPolicyVersionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetPolicyVersionInput) *iam.GetPolicyVersionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetPolicyVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetPolicyVersionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetPolicyVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicyVersion'
type MockIAMAPI_GetPolicyVersion_Call struct {
	*mock.Call
}

// GetPolicyVersion is a helper method to define mock.On call
//   - _a0 *iam.GetPolicyVersionInput
func (_e *MockIAMAPI_Expecter) GetPolicyVersion(_a0 interface{}) *MockIAMAPI_GetPolicyVersion_Call {
	return &MockIAMAPI_GetPolicyVersion_Call{Call: _e.mock.On("GetPolicyVersion", _a0)}
}

func (_c *MockIAMAPI_GetPolicyVersion_Call) Run(run func(_a0 *iam.GetPolicyVersionInput)) *MockIAMAPI_GetPolicyVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetPolicyVersionInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetPolicyVersion_Call) Return(_a0 *iam.GetPolicyVersionOutput, _a1 error) *MockIAMAPI_GetPolicyVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetPolicyVersion_Call) RunAndReturn(run func(*iam.GetPolicyVersionInput) (*iam.GetPolicyVersionOutput, error)) *MockIAMAPI_GetPolicyVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicyVersionRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetPolicyVersionRequest(_a0 *iam.GetPolicyVersionInput) (*request.Request, *iam.GetPolicyVersionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.GetPolicyVersionOutput
	if rf, ok := ret.Get(0).(func(*iam.GetPolicyVersionInput) (*request.Request, *iam.GetPolicyVersionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetPolicyVersionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetPolicyVersionInput) *iam.GetPolicyVersionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.GetPolicyVersionOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_GetPolicyVersionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicyVersionRequest'
type MockIAMAPI_GetPolicyVersionRequest_Call struct {
	*mock.Call
}

// GetPolicyVersionRequest is a helper method to define mock.On call
//   - _a0 *iam.GetPolicyVersionInput
func (_e *MockIAMAPI_Expecter) GetPolicyVersionRequest(_a0 interface{}) *MockIAMAPI_GetPolicyVersionRequest_Call {
	return &MockIAMAPI_GetPolicyVersionRequest_Call{Call: _e.mock.On("GetPolicyVersionRequest", _a0)}
}

func (_c *MockIAMAPI_GetPolicyVersionRequest_Call) Run(run func(_a0 *iam.GetPolicyVersionInput)) *MockIAMAPI_GetPolicyVersionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetPolicyVersionInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetPolicyVersionRequest_Call) Return(_a0 *request.Request, _a1 *iam.GetPolicyVersionOutput) *MockIAMAPI_GetPolicyVersionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetPolicyVersionRequest_Call) RunAndReturn(run func(*iam.GetPolicyVersionInput) (*request.Request, *iam.GetPolicyVersionOutput)) *MockIAMAPI_GetPolicyVersionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicyVersionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) GetPolicyVersionWithContext(_a0 context.Context, _a1 *iam.GetPolicyVersionInput, _a2 ...request.Option) (*iam.GetPolicyVersionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.GetPolicyVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetPolicyVersionInput, ...request.Option) (*iam.GetPolicyVersionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetPolicyVersionInput, ...request.Option) *iam.GetPolicyVersionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetPolicyVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.GetPolicyVersionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetPolicyVersionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicyVersionWithContext'
type MockIAMAPI_GetPolicyVersionWithContext_Call struct {
	*mock.Call
}

// GetPolicyVersionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetPolicyVersionInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) GetPolicyVersionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_GetPolicyVersionWithContext_Call {
	return &MockIAMAPI_GetPolicyVersionWithContext_Call{Call: _e.mock.On("GetPolicyVersionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_GetPolicyVersionWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetPolicyVersionInput, _a2 ...request.Option)) *MockIAMAPI_GetPolicyVersionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetPolicyVersionInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GetPolicyVersionWithContext_Call) Return(_a0 *iam.GetPolicyVersionOutput, _a1 error) *MockIAMAPI_GetPolicyVersionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetPolicyVersionWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetPolicyVersionInput, ...request.Option) (*iam.GetPolicyVersionOutput, error)) *MockIAMAPI_GetPolicyVersionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) GetPolicyWithContext(_a0 context.Context, _a1 *iam.GetPolicyInput, _a2 ...request.Option) (*iam.GetPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.GetPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetPolicyInput, ...request.Option) (*iam.GetPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetPolicyInput, ...request.Option) *iam.GetPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.GetPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicyWithContext'
type MockIAMAPI_GetPolicyWithContext_Call struct {
	*mock.Call
}

// GetPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetPolicyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) GetPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_GetPolicyWithContext_Call {
	return &MockIAMAPI_GetPolicyWithContext_Call{Call: _e.mock.On("GetPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_GetPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetPolicyInput, _a2 ...request.Option)) *MockIAMAPI_GetPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GetPolicyWithContext_Call) Return(_a0 *iam.GetPolicyOutput, _a1 error) *MockIAMAPI_GetPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetPolicyWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetPolicyInput, ...request.Option) (*iam.GetPolicyOutput, error)) *MockIAMAPI_GetPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetRole provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetRole(_a0 *iam.GetRoleInput) (*iam.GetRoleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GetRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.GetRoleInput) (*iam.GetRoleOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetRoleInput) *iam.GetRoleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetRoleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRole'
type MockIAMAPI_GetRole_Call struct {
	*mock.Call
}

// GetRole is a helper method to define mock.On call
//   - _a0 *iam.GetRoleInput
func (_e *MockIAMAPI_Expecter) GetRole(_a0 interface{}) *MockIAMAPI_GetRole_Call {
	return &MockIAMAPI_GetRole_Call{Call: _e.mock.On("GetRole", _a0)}
}

func (_c *MockIAMAPI_GetRole_Call) Run(run func(_a0 *iam.GetRoleInput)) *MockIAMAPI_GetRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetRoleInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetRole_Call) Return(_a0 *iam.GetRoleOutput, _a1 error) *MockIAMAPI_GetRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetRole_Call) RunAndReturn(run func(*iam.GetRoleInput) (*iam.GetRoleOutput, error)) *MockIAMAPI_GetRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetRolePolicy provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetRolePolicy(_a0 *iam.GetRolePolicyInput) (*iam.GetRolePolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GetRolePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.GetRolePolicyInput) (*iam.GetRolePolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetRolePolicyInput) *iam.GetRolePolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetRolePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetRolePolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetRolePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRolePolicy'
type MockIAMAPI_GetRolePolicy_Call struct {
	*mock.Call
}

// GetRolePolicy is a helper method to define mock.On call
//   - _a0 *iam.GetRolePolicyInput
func (_e *MockIAMAPI_Expecter) GetRolePolicy(_a0 interface{}) *MockIAMAPI_GetRolePolicy_Call {
	return &MockIAMAPI_GetRolePolicy_Call{Call: _e.mock.On("GetRolePolicy", _a0)}
}

func (_c *MockIAMAPI_GetRolePolicy_Call) Run(run func(_a0 *iam.GetRolePolicyInput)) *MockIAMAPI_GetRolePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetRolePolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetRolePolicy_Call) Return(_a0 *iam.GetRolePolicyOutput, _a1 error) *MockIAMAPI_GetRolePolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetRolePolicy_Call) RunAndReturn(run func(*iam.GetRolePolicyInput) (*iam.GetRolePolicyOutput, error)) *MockIAMAPI_GetRolePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetRolePolicyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetRolePolicyRequest(_a0 *iam.GetRolePolicyInput) (*request.Request, *iam.GetRolePolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.GetRolePolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.GetRolePolicyInput) (*request.Request, *iam.GetRolePolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetRolePolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetRolePolicyInput) *iam.GetRolePolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.GetRolePolicyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_GetRolePolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRolePolicyRequest'
type MockIAMAPI_GetRolePolicyRequest_Call struct {
	*mock.Call
}

// GetRolePolicyRequest is a helper method to define mock.On call
//   - _a0 *iam.GetRolePolicyInput
func (_e *MockIAMAPI_Expecter) GetRolePolicyRequest(_a0 interface{}) *MockIAMAPI_GetRolePolicyRequest_Call {
	return &MockIAMAPI_GetRolePolicyRequest_Call{Call: _e.mock.On("GetRolePolicyRequest", _a0)}
}

func (_c *MockIAMAPI_GetRolePolicyRequest_Call) Run(run func(_a0 *iam.GetRolePolicyInput)) *MockIAMAPI_GetRolePolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetRolePolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetRolePolicyRequest_Call) Return(_a0 *request.Request, _a1 *iam.GetRolePolicyOutput) *MockIAMAPI_GetRolePolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetRolePolicyRequest_Call) RunAndReturn(run func(*iam.GetRolePolicyInput) (*request.Request, *iam.GetRolePolicyOutput)) *MockIAMAPI_GetRolePolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetRolePolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) GetRolePolicyWithContext(_a0 context.Context, _a1 *iam.GetRolePolicyInput, _a2 ...request.Option) (*iam.GetRolePolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.GetRolePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetRolePolicyInput, ...request.Option) (*iam.GetRolePolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetRolePolicyInput, ...request.Option) *iam.GetRolePolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetRolePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.GetRolePolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetRolePolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRolePolicyWithContext'
type MockIAMAPI_GetRolePolicyWithContext_Call struct {
	*mock.Call
}

// GetRolePolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetRolePolicyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) GetRolePolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_GetRolePolicyWithContext_Call {
	return &MockIAMAPI_GetRolePolicyWithContext_Call{Call: _e.mock.On("GetRolePolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_GetRolePolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetRolePolicyInput, _a2 ...request.Option)) *MockIAMAPI_GetRolePolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetRolePolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GetRolePolicyWithContext_Call) Return(_a0 *iam.GetRolePolicyOutput, _a1 error) *MockIAMAPI_GetRolePolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetRolePolicyWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetRolePolicyInput, ...request.Option) (*iam.GetRolePolicyOutput, error)) *MockIAMAPI_GetRolePolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetRoleRequest(_a0 *iam.GetRoleInput) (*request.Request, *iam.GetRoleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.GetRoleOutput
	if rf, ok := ret.Get(0).(func(*iam.GetRoleInput) (*request.Request, *iam.GetRoleOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetRoleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetRoleInput) *iam.GetRoleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.GetRoleOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_GetRoleRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleRequest'
type MockIAMAPI_GetRoleRequest_Call struct {
	*mock.Call
}

// GetRoleRequest is a helper method to define mock.On call
//   - _a0 *iam.GetRoleInput
func (_e *MockIAMAPI_Expecter) GetRoleRequest(_a0 interface{}) *MockIAMAPI_GetRoleRequest_Call {
	return &MockIAMAPI_GetRoleRequest_Call{Call: _e.mock.On("GetRoleRequest", _a0)}
}

func (_c *MockIAMAPI_GetRoleRequest_Call) Run(run func(_a0 *iam.GetRoleInput)) *MockIAMAPI_GetRoleRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetRoleInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetRoleRequest_Call) Return(_a0 *request.Request, _a1 *iam.GetRoleOutput) *MockIAMAPI_GetRoleRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetRoleRequest_Call) RunAndReturn(run func(*iam.GetRoleInput) (*request.Request, *iam.GetRoleOutput)) *MockIAMAPI_GetRoleRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) GetRoleWithContext(_a0 context.Context, _a1 *iam.GetRoleInput, _a2 ...request.Option) (*iam.GetRoleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.GetRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetRoleInput, ...request.Option) (*iam.GetRoleOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetRoleInput, ...request.Option) *iam.GetRoleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.GetRoleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetRoleWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleWithContext'
type MockIAMAPI_GetRoleWithContext_Call struct {
	*mock.Call
}

// GetRoleWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetRoleInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) GetRoleWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_GetRoleWithContext_Call {
	return &MockIAMAPI_GetRoleWithContext_Call{Call: _e.mock.On("GetRoleWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_GetRoleWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetRoleInput, _a2 ...request.Option)) *MockIAMAPI_GetRoleWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetRoleInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GetRoleWithContext_Call) Return(_a0 *iam.GetRoleOutput, _a1 error) *MockIAMAPI_GetRoleWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetRoleWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetRoleInput, ...request.Option) (*iam.GetRoleOutput, error)) *MockIAMAPI_GetRoleWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetSAMLProvider provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetSAMLProvider(_a0 *iam.GetSAMLProviderInput) (*iam.GetSAMLProviderOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GetSAMLProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.GetSAMLProviderInput) (*iam.GetSAMLProviderOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetSAMLProviderInput) *iam.GetSAMLProviderOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetSAMLProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetSAMLProviderInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetSAMLProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSAMLProvider'
type MockIAMAPI_GetSAMLProvider_Call struct {
	*mock.Call
}

// GetSAMLProvider is a helper method to define mock.On call
//   - _a0 *iam.GetSAMLProviderInput
func (_e *MockIAMAPI_Expecter) GetSAMLProvider(_a0 interface{}) *MockIAMAPI_GetSAMLProvider_Call {
	return &MockIAMAPI_GetSAMLProvider_Call{Call: _e.mock.On("GetSAMLProvider", _a0)}
}

func (_c *MockIAMAPI_GetSAMLProvider_Call) Run(run func(_a0 *iam.GetSAMLProviderInput)) *MockIAMAPI_GetSAMLProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetSAMLProviderInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetSAMLProvider_Call) Return(_a0 *iam.GetSAMLProviderOutput, _a1 error) *MockIAMAPI_GetSAMLProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetSAMLProvider_Call) RunAndReturn(run func(*iam.GetSAMLProviderInput) (*iam.GetSAMLProviderOutput, error)) *MockIAMAPI_GetSAMLProvider_Call {
	_c.Call.Return(run)
	return _c
}

// GetSAMLProviderRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetSAMLProviderRequest(_a0 *iam.GetSAMLProviderInput) (*request.Request, *iam.GetSAMLProviderOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.GetSAMLProviderOutput
	if rf, ok := ret.Get(0).(func(*iam.GetSAMLProviderInput) (*request.Request, *iam.GetSAMLProviderOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetSAMLProviderInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetSAMLProviderInput) *iam.GetSAMLProviderOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.GetSAMLProviderOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_GetSAMLProviderRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSAMLProviderRequest'
type MockIAMAPI_GetSAMLProviderRequest_Call struct {
	*mock.Call
}

// GetSAMLProviderRequest is a helper method to define mock.On call
//   - _a0 *iam.GetSAMLProviderInput
func (_e *MockIAMAPI_Expecter) GetSAMLProviderRequest(_a0 interface{}) *MockIAMAPI_GetSAMLProviderRequest_Call {
	return &MockIAMAPI_GetSAMLProviderRequest_Call{Call: _e.mock.On("GetSAMLProviderRequest", _a0)}
}

func (_c *MockIAMAPI_GetSAMLProviderRequest_Call) Run(run func(_a0 *iam.GetSAMLProviderInput)) *MockIAMAPI_GetSAMLProviderRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetSAMLProviderInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetSAMLProviderRequest_Call) Return(_a0 *request.Request, _a1 *iam.GetSAMLProviderOutput) *MockIAMAPI_GetSAMLProviderRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetSAMLProviderRequest_Call) RunAndReturn(run func(*iam.GetSAMLProviderInput) (*request.Request, *iam.GetSAMLProviderOutput)) *MockIAMAPI_GetSAMLProviderRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetSAMLProviderWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) GetSAMLProviderWithContext(_a0 context.Context, _a1 *iam.GetSAMLProviderInput, _a2 ...request.Option) (*iam.GetSAMLProviderOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.GetSAMLProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetSAMLProviderInput, ...request.Option) (*iam.GetSAMLProviderOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetSAMLProviderInput, ...request.Option) *iam.GetSAMLProviderOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetSAMLProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.GetSAMLProviderInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetSAMLProviderWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSAMLProviderWithContext'
type MockIAMAPI_GetSAMLProviderWithContext_Call struct {
	*mock.Call
}

// GetSAMLProviderWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetSAMLProviderInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) GetSAMLProviderWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_GetSAMLProviderWithContext_Call {
	return &MockIAMAPI_GetSAMLProviderWithContext_Call{Call: _e.mock.On("GetSAMLProviderWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_GetSAMLProviderWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetSAMLProviderInput, _a2 ...request.Option)) *MockIAMAPI_GetSAMLProviderWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetSAMLProviderInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GetSAMLProviderWithContext_Call) Return(_a0 *iam.GetSAMLProviderOutput, _a1 error) *MockIAMAPI_GetSAMLProviderWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetSAMLProviderWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetSAMLProviderInput, ...request.Option) (*iam.GetSAMLProviderOutput, error)) *MockIAMAPI_GetSAMLProviderWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetSSHPublicKey provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetSSHPublicKey(_a0 *iam.GetSSHPublicKeyInput) (*iam.GetSSHPublicKeyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GetSSHPublicKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.GetSSHPublicKeyInput) (*iam.GetSSHPublicKeyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetSSHPublicKeyInput) *iam.GetSSHPublicKeyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetSSHPublicKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetSSHPublicKeyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetSSHPublicKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSSHPublicKey'
type MockIAMAPI_GetSSHPublicKey_Call struct {
	*mock.Call
}

// GetSSHPublicKey is a helper method to define mock.On call
//   - _a0 *iam.GetSSHPublicKeyInput
func (_e *MockIAMAPI_Expecter) GetSSHPublicKey(_a0 interface{}) *MockIAMAPI_GetSSHPublicKey_Call {
	return &MockIAMAPI_GetSSHPublicKey_Call{Call: _e.mock.On("GetSSHPublicKey", _a0)}
}

func (_c *MockIAMAPI_GetSSHPublicKey_Call) Run(run func(_a0 *iam.GetSSHPublicKeyInput)) *MockIAMAPI_GetSSHPublicKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetSSHPublicKeyInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetSSHPublicKey_Call) Return(_a0 *iam.GetSSHPublicKeyOutput, _a1 error) *MockIAMAPI_GetSSHPublicKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetSSHPublicKey_Call) RunAndReturn(run func(*iam.GetSSHPublicKeyInput) (*iam.GetSSHPublicKeyOutput, error)) *MockIAMAPI_GetSSHPublicKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetSSHPublicKeyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetSSHPublicKeyRequest(_a0 *iam.GetSSHPublicKeyInput) (*request.Request, *iam.GetSSHPublicKeyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.GetSSHPublicKeyOutput
	if rf, ok := ret.Get(0).(func(*iam.GetSSHPublicKeyInput) (*request.Request, *iam.GetSSHPublicKeyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetSSHPublicKeyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetSSHPublicKeyInput) *iam.GetSSHPublicKeyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.GetSSHPublicKeyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_GetSSHPublicKeyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSSHPublicKeyRequest'
type MockIAMAPI_GetSSHPublicKeyRequest_Call struct {
	*mock.Call
}

// GetSSHPublicKeyRequest is a helper method to define mock.On call
//   - _a0 *iam.GetSSHPublicKeyInput
func (_e *MockIAMAPI_Expecter) GetSSHPublicKeyRequest(_a0 interface{}) *MockIAMAPI_GetSSHPublicKeyRequest_Call {
	return &MockIAMAPI_GetSSHPublicKeyRequest_Call{Call: _e.mock.On("GetSSHPublicKeyRequest", _a0)}
}

func (_c *MockIAMAPI_GetSSHPublicKeyRequest_Call) Run(run func(_a0 *iam.GetSSHPublicKeyInput)) *MockIAMAPI_GetSSHPublicKeyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetSSHPublicKeyInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetSSHPublicKeyRequest_Call) Return(_a0 *request.Request, _a1 *iam.GetSSHPublicKeyOutput) *MockIAMAPI_GetSSHPublicKeyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetSSHPublicKeyRequest_Call) RunAndReturn(run func(*iam.GetSSHPublicKeyInput) (*request.Request, *iam.GetSSHPublicKeyOutput)) *MockIAMAPI_GetSSHPublicKeyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetSSHPublicKeyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) GetSSHPublicKeyWithContext(_a0 context.Context, _a1 *iam.GetSSHPublicKeyInput, _a2 ...request.Option) (*iam.GetSSHPublicKeyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.GetSSHPublicKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetSSHPublicKeyInput, ...request.Option) (*iam.GetSSHPublicKeyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetSSHPublicKeyInput, ...request.Option) *iam.GetSSHPublicKeyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetSSHPublicKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.GetSSHPublicKeyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetSSHPublicKeyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSSHPublicKeyWithContext'
type MockIAMAPI_GetSSHPublicKeyWithContext_Call struct {
	*mock.Call
}

// GetSSHPublicKeyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetSSHPublicKeyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) GetSSHPublicKeyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_GetSSHPublicKeyWithContext_Call {
	return &MockIAMAPI_GetSSHPublicKeyWithContext_Call{Call: _e.mock.On("GetSSHPublicKeyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_GetSSHPublicKeyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetSSHPublicKeyInput, _a2 ...request.Option)) *MockIAMAPI_GetSSHPublicKeyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetSSHPublicKeyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GetSSHPublicKeyWithContext_Call) Return(_a0 *iam.GetSSHPublicKeyOutput, _a1 error) *MockIAMAPI_GetSSHPublicKeyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetSSHPublicKeyWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetSSHPublicKeyInput, ...request.Option) (*iam.GetSSHPublicKeyOutput, error)) *MockIAMAPI_GetSSHPublicKeyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetServerCertificate provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetServerCertificate(_a0 *iam.GetServerCertificateInput) (*iam.GetServerCertificateOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GetServerCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.GetServerCertificateInput) (*iam.GetServerCertificateOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetServerCertificateInput) *iam.GetServerCertificateOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetServerCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetServerCertificateInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetServerCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServerCertificate'
type MockIAMAPI_GetServerCertificate_Call struct {
	*mock.Call
}

// GetServerCertificate is a helper method to define mock.On call
//   - _a0 *iam.GetServerCertificateInput
func (_e *MockIAMAPI_Expecter) GetServerCertificate(_a0 interface{}) *MockIAMAPI_GetServerCertificate_Call {
	return &MockIAMAPI_GetServerCertificate_Call{Call: _e.mock.On("GetServerCertificate", _a0)}
}

func (_c *MockIAMAPI_GetServerCertificate_Call) Run(run func(_a0 *iam.GetServerCertificateInput)) *MockIAMAPI_GetServerCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetServerCertificateInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetServerCertificate_Call) Return(_a0 *iam.GetServerCertificateOutput, _a1 error) *MockIAMAPI_GetServerCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetServerCertificate_Call) RunAndReturn(run func(*iam.GetServerCertificateInput) (*iam.GetServerCertificateOutput, error)) *MockIAMAPI_GetServerCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// GetServerCertificateRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetServerCertificateRequest(_a0 *iam.GetServerCertificateInput) (*request.Request, *iam.GetServerCertificateOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.GetServerCertificateOutput
	if rf, ok := ret.Get(0).(func(*iam.GetServerCertificateInput) (*request.Request, *iam.GetServerCertificateOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetServerCertificateInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetServerCertificateInput) *iam.GetServerCertificateOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.GetServerCertificateOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_GetServerCertificateRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServerCertificateRequest'
type MockIAMAPI_GetServerCertificateRequest_Call struct {
	*mock.Call
}

// GetServerCertificateRequest is a helper method to define mock.On call
//   - _a0 *iam.GetServerCertificateInput
func (_e *MockIAMAPI_Expecter) GetServerCertificateRequest(_a0 interface{}) *MockIAMAPI_GetServerCertificateRequest_Call {
	return &MockIAMAPI_GetServerCertificateRequest_Call{Call: _e.mock.On("GetServerCertificateRequest", _a0)}
}

func (_c *MockIAMAPI_GetServerCertificateRequest_Call) Run(run func(_a0 *iam.GetServerCertificateInput)) *MockIAMAPI_GetServerCertificateRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetServerCertificateInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetServerCertificateRequest_Call) Return(_a0 *request.Request, _a1 *iam.GetServerCertificateOutput) *MockIAMAPI_GetServerCertificateRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetServerCertificateRequest_Call) RunAndReturn(run func(*iam.GetServerCertificateInput) (*request.Request, *iam.GetServerCertificateOutput)) *MockIAMAPI_GetServerCertificateRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetServerCertificateWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) GetServerCertificateWithContext(_a0 context.Context, _a1 *iam.GetServerCertificateInput, _a2 ...request.Option) (*iam.GetServerCertificateOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.GetServerCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetServerCertificateInput, ...request.Option) (*iam.GetServerCertificateOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetServerCertificateInput, ...request.Option) *iam.GetServerCertificateOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetServerCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.GetServerCertificateInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetServerCertificateWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServerCertificateWithContext'
type MockIAMAPI_GetServerCertificateWithContext_Call struct {
	*mock.Call
}

// GetServerCertificateWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetServerCertificateInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) GetServerCertificateWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_GetServerCertificateWithContext_Call {
	return &MockIAMAPI_GetServerCertificateWithContext_Call{Call: _e.mock.On("GetServerCertificateWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_GetServerCertificateWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetServerCertificateInput, _a2 ...request.Option)) *MockIAMAPI_GetServerCertificateWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetServerCertificateInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GetServerCertificateWithContext_Call) Return(_a0 *iam.GetServerCertificateOutput, _a1 error) *MockIAMAPI_GetServerCertificateWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetServerCertificateWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetServerCertificateInput, ...request.Option) (*iam.GetServerCertificateOutput, error)) *MockIAMAPI_GetServerCertificateWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceLastAccessedDetails provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetServiceLastAccessedDetails(_a0 *iam.GetServiceLastAccessedDetailsInput) (*iam.GetServiceLastAccessedDetailsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GetServiceLastAccessedDetailsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.GetServiceLastAccessedDetailsInput) (*iam.GetServiceLastAccessedDetailsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetServiceLastAccessedDetailsInput) *iam.GetServiceLastAccessedDetailsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetServiceLastAccessedDetailsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetServiceLastAccessedDetailsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetServiceLastAccessedDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceLastAccessedDetails'
type MockIAMAPI_GetServiceLastAccessedDetails_Call struct {
	*mock.Call
}

// GetServiceLastAccessedDetails is a helper method to define mock.On call
//   - _a0 *iam.GetServiceLastAccessedDetailsInput
func (_e *MockIAMAPI_Expecter) GetServiceLastAccessedDetails(_a0 interface{}) *MockIAMAPI_GetServiceLastAccessedDetails_Call {
	return &MockIAMAPI_GetServiceLastAccessedDetails_Call{Call: _e.mock.On("GetServiceLastAccessedDetails", _a0)}
}

func (_c *MockIAMAPI_GetServiceLastAccessedDetails_Call) Run(run func(_a0 *iam.GetServiceLastAccessedDetailsInput)) *MockIAMAPI_GetServiceLastAccessedDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetServiceLastAccessedDetailsInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetServiceLastAccessedDetails_Call) Return(_a0 *iam.GetServiceLastAccessedDetailsOutput, _a1 error) *MockIAMAPI_GetServiceLastAccessedDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetServiceLastAccessedDetails_Call) RunAndReturn(run func(*iam.GetServiceLastAccessedDetailsInput) (*iam.GetServiceLastAccessedDetailsOutput, error)) *MockIAMAPI_GetServiceLastAccessedDetails_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceLastAccessedDetailsRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetServiceLastAccessedDetailsRequest(_a0 *iam.GetServiceLastAccessedDetailsInput) (*request.Request, *iam.GetServiceLastAccessedDetailsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.GetServiceLastAccessedDetailsOutput
	if rf, ok := ret.Get(0).(func(*iam.GetServiceLastAccessedDetailsInput) (*request.Request, *iam.GetServiceLastAccessedDetailsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetServiceLastAccessedDetailsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetServiceLastAccessedDetailsInput) *iam.GetServiceLastAccessedDetailsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.GetServiceLastAccessedDetailsOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_GetServiceLastAccessedDetailsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceLastAccessedDetailsRequest'
type MockIAMAPI_GetServiceLastAccessedDetailsRequest_Call struct {
	*mock.Call
}

// GetServiceLastAccessedDetailsRequest is a helper method to define mock.On call
//   - _a0 *iam.GetServiceLastAccessedDetailsInput
func (_e *MockIAMAPI_Expecter) GetServiceLastAccessedDetailsRequest(_a0 interface{}) *MockIAMAPI_GetServiceLastAccessedDetailsRequest_Call {
	return &MockIAMAPI_GetServiceLastAccessedDetailsRequest_Call{Call: _e.mock.On("GetServiceLastAccessedDetailsRequest", _a0)}
}

func (_c *MockIAMAPI_GetServiceLastAccessedDetailsRequest_Call) Run(run func(_a0 *iam.GetServiceLastAccessedDetailsInput)) *MockIAMAPI_GetServiceLastAccessedDetailsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetServiceLastAccessedDetailsInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetServiceLastAccessedDetailsRequest_Call) Return(_a0 *request.Request, _a1 *iam.GetServiceLastAccessedDetailsOutput) *MockIAMAPI_GetServiceLastAccessedDetailsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetServiceLastAccessedDetailsRequest_Call) RunAndReturn(run func(*iam.GetServiceLastAccessedDetailsInput) (*request.Request, *iam.GetServiceLastAccessedDetailsOutput)) *MockIAMAPI_GetServiceLastAccessedDetailsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceLastAccessedDetailsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) GetServiceLastAccessedDetailsWithContext(_a0 context.Context, _a1 *iam.GetServiceLastAccessedDetailsInput, _a2 ...request.Option) (*iam.GetServiceLastAccessedDetailsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.GetServiceLastAccessedDetailsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetServiceLastAccessedDetailsInput, ...request.Option) (*iam.GetServiceLastAccessedDetailsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetServiceLastAccessedDetailsInput, ...request.Option) *iam.GetServiceLastAccessedDetailsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetServiceLastAccessedDetailsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.GetServiceLastAccessedDetailsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetServiceLastAccessedDetailsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceLastAccessedDetailsWithContext'
type MockIAMAPI_GetServiceLastAccessedDetailsWithContext_Call struct {
	*mock.Call
}

// GetServiceLastAccessedDetailsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetServiceLastAccessedDetailsInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) GetServiceLastAccessedDetailsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_GetServiceLastAccessedDetailsWithContext_Call {
	return &MockIAMAPI_GetServiceLastAccessedDetailsWithContext_Call{Call: _e.mock.On("GetServiceLastAccessedDetailsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_GetServiceLastAccessedDetailsWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetServiceLastAccessedDetailsInput, _a2 ...request.Option)) *MockIAMAPI_GetServiceLastAccessedDetailsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetServiceLastAccessedDetailsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GetServiceLastAccessedDetailsWithContext_Call) Return(_a0 *iam.GetServiceLastAccessedDetailsOutput, _a1 error) *MockIAMAPI_GetServiceLastAccessedDetailsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetServiceLastAccessedDetailsWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetServiceLastAccessedDetailsInput, ...request.Option) (*iam.GetServiceLastAccessedDetailsOutput, error)) *MockIAMAPI_GetServiceLastAccessedDetailsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceLastAccessedDetailsWithEntities provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetServiceLastAccessedDetailsWithEntities(_a0 *iam.GetServiceLastAccessedDetailsWithEntitiesInput) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.GetServiceLastAccessedDetailsWithEntitiesInput) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetServiceLastAccessedDetailsWithEntitiesInput) *iam.GetServiceLastAccessedDetailsWithEntitiesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetServiceLastAccessedDetailsWithEntitiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetServiceLastAccessedDetailsWithEntitiesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetServiceLastAccessedDetailsWithEntities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceLastAccessedDetailsWithEntities'
type MockIAMAPI_GetServiceLastAccessedDetailsWithEntities_Call struct {
	*mock.Call
}

// GetServiceLastAccessedDetailsWithEntities is a helper method to define mock.On call
//   - _a0 *iam.GetServiceLastAccessedDetailsWithEntitiesInput
func (_e *MockIAMAPI_Expecter) GetServiceLastAccessedDetailsWithEntities(_a0 interface{}) *MockIAMAPI_GetServiceLastAccessedDetailsWithEntities_Call {
	return &MockIAMAPI_GetServiceLastAccessedDetailsWithEntities_Call{Call: _e.mock.On("GetServiceLastAccessedDetailsWithEntities", _a0)}
}

func (_c *MockIAMAPI_GetServiceLastAccessedDetailsWithEntities_Call) Run(run func(_a0 *iam.GetServiceLastAccessedDetailsWithEntitiesInput)) *MockIAMAPI_GetServiceLastAccessedDetailsWithEntities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetServiceLastAccessedDetailsWithEntitiesInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetServiceLastAccessedDetailsWithEntities_Call) Return(_a0 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput, _a1 error) *MockIAMAPI_GetServiceLastAccessedDetailsWithEntities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetServiceLastAccessedDetailsWithEntities_Call) RunAndReturn(run func(*iam.GetServiceLastAccessedDetailsWithEntitiesInput) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error)) *MockIAMAPI_GetServiceLastAccessedDetailsWithEntities_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceLastAccessedDetailsWithEntitiesRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetServiceLastAccessedDetailsWithEntitiesRequest(_a0 *iam.GetServiceLastAccessedDetailsWithEntitiesInput) (*request.Request, *iam.GetServiceLastAccessedDetailsWithEntitiesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput
	if rf, ok := ret.Get(0).(func(*iam.GetServiceLastAccessedDetailsWithEntitiesInput) (*request.Request, *iam.GetServiceLastAccessedDetailsWithEntitiesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetServiceLastAccessedDetailsWithEntitiesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetServiceLastAccessedDetailsWithEntitiesInput) *iam.GetServiceLastAccessedDetailsWithEntitiesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.GetServiceLastAccessedDetailsWithEntitiesOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_GetServiceLastAccessedDetailsWithEntitiesRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceLastAccessedDetailsWithEntitiesRequest'
type MockIAMAPI_GetServiceLastAccessedDetailsWithEntitiesRequest_Call struct {
	*mock.Call
}

// GetServiceLastAccessedDetailsWithEntitiesRequest is a helper method to define mock.On call
//   - _a0 *iam.GetServiceLastAccessedDetailsWithEntitiesInput
func (_e *MockIAMAPI_Expecter) GetServiceLastAccessedDetailsWithEntitiesRequest(_a0 interface{}) *MockIAMAPI_GetServiceLastAccessedDetailsWithEntitiesRequest_Call {
	return &MockIAMAPI_GetServiceLastAccessedDetailsWithEntitiesRequest_Call{Call: _e.mock.On("GetServiceLastAccessedDetailsWithEntitiesRequest", _a0)}
}

func (_c *MockIAMAPI_GetServiceLastAccessedDetailsWithEntitiesRequest_Call) Run(run func(_a0 *iam.GetServiceLastAccessedDetailsWithEntitiesInput)) *MockIAMAPI_GetServiceLastAccessedDetailsWithEntitiesRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetServiceLastAccessedDetailsWithEntitiesInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetServiceLastAccessedDetailsWithEntitiesRequest_Call) Return(_a0 *request.Request, _a1 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput) *MockIAMAPI_GetServiceLastAccessedDetailsWithEntitiesRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetServiceLastAccessedDetailsWithEntitiesRequest_Call) RunAndReturn(run func(*iam.GetServiceLastAccessedDetailsWithEntitiesInput) (*request.Request, *iam.GetServiceLastAccessedDetailsWithEntitiesOutput)) *MockIAMAPI_GetServiceLastAccessedDetailsWithEntitiesRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceLastAccessedDetailsWithEntitiesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) GetServiceLastAccessedDetailsWithEntitiesWithContext(_a0 context.Context, _a1 *iam.GetServiceLastAccessedDetailsWithEntitiesInput, _a2 ...request.Option) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetServiceLastAccessedDetailsWithEntitiesInput, ...request.Option) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetServiceLastAccessedDetailsWithEntitiesInput, ...request.Option) *iam.GetServiceLastAccessedDetailsWithEntitiesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetServiceLastAccessedDetailsWithEntitiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.GetServiceLastAccessedDetailsWithEntitiesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetServiceLastAccessedDetailsWithEntitiesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceLastAccessedDetailsWithEntitiesWithContext'
type MockIAMAPI_GetServiceLastAccessedDetailsWithEntitiesWithContext_Call struct {
	*mock.Call
}

// GetServiceLastAccessedDetailsWithEntitiesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetServiceLastAccessedDetailsWithEntitiesInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) GetServiceLastAccessedDetailsWithEntitiesWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_GetServiceLastAccessedDetailsWithEntitiesWithContext_Call {
	return &MockIAMAPI_GetServiceLastAccessedDetailsWithEntitiesWithContext_Call{Call: _e.mock.On("GetServiceLastAccessedDetailsWithEntitiesWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_GetServiceLastAccessedDetailsWithEntitiesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetServiceLastAccessedDetailsWithEntitiesInput, _a2 ...request.Option)) *MockIAMAPI_GetServiceLastAccessedDetailsWithEntitiesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetServiceLastAccessedDetailsWithEntitiesInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GetServiceLastAccessedDetailsWithEntitiesWithContext_Call) Return(_a0 *iam.GetServiceLastAccessedDetailsWithEntitiesOutput, _a1 error) *MockIAMAPI_GetServiceLastAccessedDetailsWithEntitiesWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetServiceLastAccessedDetailsWithEntitiesWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetServiceLastAccessedDetailsWithEntitiesInput, ...request.Option) (*iam.GetServiceLastAccessedDetailsWithEntitiesOutput, error)) *MockIAMAPI_GetServiceLastAccessedDetailsWithEntitiesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceLinkedRoleDeletionStatus provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetServiceLinkedRoleDeletionStatus(_a0 *iam.GetServiceLinkedRoleDeletionStatusInput) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GetServiceLinkedRoleDeletionStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.GetServiceLinkedRoleDeletionStatusInput) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetServiceLinkedRoleDeletionStatusInput) *iam.GetServiceLinkedRoleDeletionStatusOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetServiceLinkedRoleDeletionStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetServiceLinkedRoleDeletionStatusInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetServiceLinkedRoleDeletionStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceLinkedRoleDeletionStatus'
type MockIAMAPI_GetServiceLinkedRoleDeletionStatus_Call struct {
	*mock.Call
}

// GetServiceLinkedRoleDeletionStatus is a helper method to define mock.On call
//   - _a0 *iam.GetServiceLinkedRoleDeletionStatusInput
func (_e *MockIAMAPI_Expecter) GetServiceLinkedRoleDeletionStatus(_a0 interface{}) *MockIAMAPI_GetServiceLinkedRoleDeletionStatus_Call {
	return &MockIAMAPI_GetServiceLinkedRoleDeletionStatus_Call{Call: _e.mock.On("GetServiceLinkedRoleDeletionStatus", _a0)}
}

func (_c *MockIAMAPI_GetServiceLinkedRoleDeletionStatus_Call) Run(run func(_a0 *iam.GetServiceLinkedRoleDeletionStatusInput)) *MockIAMAPI_GetServiceLinkedRoleDeletionStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetServiceLinkedRoleDeletionStatusInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetServiceLinkedRoleDeletionStatus_Call) Return(_a0 *iam.GetServiceLinkedRoleDeletionStatusOutput, _a1 error) *MockIAMAPI_GetServiceLinkedRoleDeletionStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetServiceLinkedRoleDeletionStatus_Call) RunAndReturn(run func(*iam.GetServiceLinkedRoleDeletionStatusInput) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error)) *MockIAMAPI_GetServiceLinkedRoleDeletionStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceLinkedRoleDeletionStatusRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetServiceLinkedRoleDeletionStatusRequest(_a0 *iam.GetServiceLinkedRoleDeletionStatusInput) (*request.Request, *iam.GetServiceLinkedRoleDeletionStatusOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.GetServiceLinkedRoleDeletionStatusOutput
	if rf, ok := ret.Get(0).(func(*iam.GetServiceLinkedRoleDeletionStatusInput) (*request.Request, *iam.GetServiceLinkedRoleDeletionStatusOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetServiceLinkedRoleDeletionStatusInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetServiceLinkedRoleDeletionStatusInput) *iam.GetServiceLinkedRoleDeletionStatusOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.GetServiceLinkedRoleDeletionStatusOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_GetServiceLinkedRoleDeletionStatusRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceLinkedRoleDeletionStatusRequest'
type MockIAMAPI_GetServiceLinkedRoleDeletionStatusRequest_Call struct {
	*mock.Call
}

// GetServiceLinkedRoleDeletionStatusRequest is a helper method to define mock.On call
//   - _a0 *iam.GetServiceLinkedRoleDeletionStatusInput
func (_e *MockIAMAPI_Expecter) GetServiceLinkedRoleDeletionStatusRequest(_a0 interface{}) *MockIAMAPI_GetServiceLinkedRoleDeletionStatusRequest_Call {
	return &MockIAMAPI_GetServiceLinkedRoleDeletionStatusRequest_Call{Call: _e.mock.On("GetServiceLinkedRoleDeletionStatusRequest", _a0)}
}

func (_c *MockIAMAPI_GetServiceLinkedRoleDeletionStatusRequest_Call) Run(run func(_a0 *iam.GetServiceLinkedRoleDeletionStatusInput)) *MockIAMAPI_GetServiceLinkedRoleDeletionStatusRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetServiceLinkedRoleDeletionStatusInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetServiceLinkedRoleDeletionStatusRequest_Call) Return(_a0 *request.Request, _a1 *iam.GetServiceLinkedRoleDeletionStatusOutput) *MockIAMAPI_GetServiceLinkedRoleDeletionStatusRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetServiceLinkedRoleDeletionStatusRequest_Call) RunAndReturn(run func(*iam.GetServiceLinkedRoleDeletionStatusInput) (*request.Request, *iam.GetServiceLinkedRoleDeletionStatusOutput)) *MockIAMAPI_GetServiceLinkedRoleDeletionStatusRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceLinkedRoleDeletionStatusWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) GetServiceLinkedRoleDeletionStatusWithContext(_a0 context.Context, _a1 *iam.GetServiceLinkedRoleDeletionStatusInput, _a2 ...request.Option) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.GetServiceLinkedRoleDeletionStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetServiceLinkedRoleDeletionStatusInput, ...request.Option) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetServiceLinkedRoleDeletionStatusInput, ...request.Option) *iam.GetServiceLinkedRoleDeletionStatusOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetServiceLinkedRoleDeletionStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.GetServiceLinkedRoleDeletionStatusInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetServiceLinkedRoleDeletionStatusWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceLinkedRoleDeletionStatusWithContext'
type MockIAMAPI_GetServiceLinkedRoleDeletionStatusWithContext_Call struct {
	*mock.Call
}

// GetServiceLinkedRoleDeletionStatusWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetServiceLinkedRoleDeletionStatusInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) GetServiceLinkedRoleDeletionStatusWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_GetServiceLinkedRoleDeletionStatusWithContext_Call {
	return &MockIAMAPI_GetServiceLinkedRoleDeletionStatusWithContext_Call{Call: _e.mock.On("GetServiceLinkedRoleDeletionStatusWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_GetServiceLinkedRoleDeletionStatusWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetServiceLinkedRoleDeletionStatusInput, _a2 ...request.Option)) *MockIAMAPI_GetServiceLinkedRoleDeletionStatusWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetServiceLinkedRoleDeletionStatusInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GetServiceLinkedRoleDeletionStatusWithContext_Call) Return(_a0 *iam.GetServiceLinkedRoleDeletionStatusOutput, _a1 error) *MockIAMAPI_GetServiceLinkedRoleDeletionStatusWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetServiceLinkedRoleDeletionStatusWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetServiceLinkedRoleDeletionStatusInput, ...request.Option) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error)) *MockIAMAPI_GetServiceLinkedRoleDeletionStatusWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetUser(_a0 *iam.GetUserInput) (*iam.GetUserOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GetUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.GetUserInput) (*iam.GetUserOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetUserInput) *iam.GetUserOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetUserInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockIAMAPI_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - _a0 *iam.GetUserInput
func (_e *MockIAMAPI_Expecter) GetUser(_a0 interface{}) *MockIAMAPI_GetUser_Call {
	return &MockIAMAPI_GetUser_Call{Call: _e.mock.On("GetUser", _a0)}
}

func (_c *MockIAMAPI_GetUser_Call) Run(run func(_a0 *iam.GetUserInput)) *MockIAMAPI_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetUserInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetUser_Call) Return(_a0 *iam.GetUserOutput, _a1 error) *MockIAMAPI_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetUser_Call) RunAndReturn(run func(*iam.GetUserInput) (*iam.GetUserOutput, error)) *MockIAMAPI_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserPolicy provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetUserPolicy(_a0 *iam.GetUserPolicyInput) (*iam.GetUserPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.GetUserPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.GetUserPolicyInput) (*iam.GetUserPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetUserPolicyInput) *iam.GetUserPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetUserPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetUserPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetUserPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserPolicy'
type MockIAMAPI_GetUserPolicy_Call struct {
	*mock.Call
}

// GetUserPolicy is a helper method to define mock.On call
//   - _a0 *iam.GetUserPolicyInput
func (_e *MockIAMAPI_Expecter) GetUserPolicy(_a0 interface{}) *MockIAMAPI_GetUserPolicy_Call {
	return &MockIAMAPI_GetUserPolicy_Call{Call: _e.mock.On("GetUserPolicy", _a0)}
}

func (_c *MockIAMAPI_GetUserPolicy_Call) Run(run func(_a0 *iam.GetUserPolicyInput)) *MockIAMAPI_GetUserPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetUserPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetUserPolicy_Call) Return(_a0 *iam.GetUserPolicyOutput, _a1 error) *MockIAMAPI_GetUserPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetUserPolicy_Call) RunAndReturn(run func(*iam.GetUserPolicyInput) (*iam.GetUserPolicyOutput, error)) *MockIAMAPI_GetUserPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserPolicyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetUserPolicyRequest(_a0 *iam.GetUserPolicyInput) (*request.Request, *iam.GetUserPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.GetUserPolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.GetUserPolicyInput) (*request.Request, *iam.GetUserPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetUserPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetUserPolicyInput) *iam.GetUserPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.GetUserPolicyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_GetUserPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserPolicyRequest'
type MockIAMAPI_GetUserPolicyRequest_Call struct {
	*mock.Call
}

// GetUserPolicyRequest is a helper method to define mock.On call
//   - _a0 *iam.GetUserPolicyInput
func (_e *MockIAMAPI_Expecter) GetUserPolicyRequest(_a0 interface{}) *MockIAMAPI_GetUserPolicyRequest_Call {
	return &MockIAMAPI_GetUserPolicyRequest_Call{Call: _e.mock.On("GetUserPolicyRequest", _a0)}
}

func (_c *MockIAMAPI_GetUserPolicyRequest_Call) Run(run func(_a0 *iam.GetUserPolicyInput)) *MockIAMAPI_GetUserPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetUserPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetUserPolicyRequest_Call) Return(_a0 *request.Request, _a1 *iam.GetUserPolicyOutput) *MockIAMAPI_GetUserPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetUserPolicyRequest_Call) RunAndReturn(run func(*iam.GetUserPolicyInput) (*request.Request, *iam.GetUserPolicyOutput)) *MockIAMAPI_GetUserPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) GetUserPolicyWithContext(_a0 context.Context, _a1 *iam.GetUserPolicyInput, _a2 ...request.Option) (*iam.GetUserPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.GetUserPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetUserPolicyInput, ...request.Option) (*iam.GetUserPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetUserPolicyInput, ...request.Option) *iam.GetUserPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetUserPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.GetUserPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetUserPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserPolicyWithContext'
type MockIAMAPI_GetUserPolicyWithContext_Call struct {
	*mock.Call
}

// GetUserPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetUserPolicyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) GetUserPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_GetUserPolicyWithContext_Call {
	return &MockIAMAPI_GetUserPolicyWithContext_Call{Call: _e.mock.On("GetUserPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_GetUserPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetUserPolicyInput, _a2 ...request.Option)) *MockIAMAPI_GetUserPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetUserPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GetUserPolicyWithContext_Call) Return(_a0 *iam.GetUserPolicyOutput, _a1 error) *MockIAMAPI_GetUserPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetUserPolicyWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetUserPolicyInput, ...request.Option) (*iam.GetUserPolicyOutput, error)) *MockIAMAPI_GetUserPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) GetUserRequest(_a0 *iam.GetUserInput) (*request.Request, *iam.GetUserOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.GetUserOutput
	if rf, ok := ret.Get(0).(func(*iam.GetUserInput) (*request.Request, *iam.GetUserOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.GetUserInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.GetUserInput) *iam.GetUserOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.GetUserOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_GetUserRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRequest'
type MockIAMAPI_GetUserRequest_Call struct {
	*mock.Call
}

// GetUserRequest is a helper method to define mock.On call
//   - _a0 *iam.GetUserInput
func (_e *MockIAMAPI_Expecter) GetUserRequest(_a0 interface{}) *MockIAMAPI_GetUserRequest_Call {
	return &MockIAMAPI_GetUserRequest_Call{Call: _e.mock.On("GetUserRequest", _a0)}
}

func (_c *MockIAMAPI_GetUserRequest_Call) Run(run func(_a0 *iam.GetUserInput)) *MockIAMAPI_GetUserRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetUserInput))
	})
	return _c
}

func (_c *MockIAMAPI_GetUserRequest_Call) Return(_a0 *request.Request, _a1 *iam.GetUserOutput) *MockIAMAPI_GetUserRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetUserRequest_Call) RunAndReturn(run func(*iam.GetUserInput) (*request.Request, *iam.GetUserOutput)) *MockIAMAPI_GetUserRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) GetUserWithContext(_a0 context.Context, _a1 *iam.GetUserInput, _a2 ...request.Option) (*iam.GetUserOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.GetUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetUserInput, ...request.Option) (*iam.GetUserOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetUserInput, ...request.Option) *iam.GetUserOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.GetUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.GetUserInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_GetUserWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserWithContext'
type MockIAMAPI_GetUserWithContext_Call struct {
	*mock.Call
}

// GetUserWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetUserInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) GetUserWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_GetUserWithContext_Call {
	return &MockIAMAPI_GetUserWithContext_Call{Call: _e.mock.On("GetUserWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_GetUserWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetUserInput, _a2 ...request.Option)) *MockIAMAPI_GetUserWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetUserInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_GetUserWithContext_Call) Return(_a0 *iam.GetUserOutput, _a1 error) *MockIAMAPI_GetUserWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_GetUserWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetUserInput, ...request.Option) (*iam.GetUserOutput, error)) *MockIAMAPI_GetUserWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessKeys provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListAccessKeys(_a0 *iam.ListAccessKeysInput) (*iam.ListAccessKeysOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListAccessKeysOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListAccessKeysInput) (*iam.ListAccessKeysOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListAccessKeysInput) *iam.ListAccessKeysOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListAccessKeysOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListAccessKeysInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListAccessKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessKeys'
type MockIAMAPI_ListAccessKeys_Call struct {
	*mock.Call
}

// ListAccessKeys is a helper method to define mock.On call
//   - _a0 *iam.ListAccessKeysInput
func (_e *MockIAMAPI_Expecter) ListAccessKeys(_a0 interface{}) *MockIAMAPI_ListAccessKeys_Call {
	return &MockIAMAPI_ListAccessKeys_Call{Call: _e.mock.On("ListAccessKeys", _a0)}
}

func (_c *MockIAMAPI_ListAccessKeys_Call) Run(run func(_a0 *iam.ListAccessKeysInput)) *MockIAMAPI_ListAccessKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListAccessKeysInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListAccessKeys_Call) Return(_a0 *iam.ListAccessKeysOutput, _a1 error) *MockIAMAPI_ListAccessKeys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListAccessKeys_Call) RunAndReturn(run func(*iam.ListAccessKeysInput) (*iam.ListAccessKeysOutput, error)) *MockIAMAPI_ListAccessKeys_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessKeysPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListAccessKeysPages(_a0 *iam.ListAccessKeysInput, _a1 func(*iam.ListAccessKeysOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListAccessKeysInput, func(*iam.ListAccessKeysOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListAccessKeysPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessKeysPages'
type MockIAMAPI_ListAccessKeysPages_Call struct {
	*mock.Call
}

// ListAccessKeysPages is a helper method to define mock.On call
//   - _a0 *iam.ListAccessKeysInput
//   - _a1 func(*iam.ListAccessKeysOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListAccessKeysPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListAccessKeysPages_Call {
	return &MockIAMAPI_ListAccessKeysPages_Call{Call: _e.mock.On("ListAccessKeysPages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListAccessKeysPages_Call) Run(run func(_a0 *iam.ListAccessKeysInput, _a1 func(*iam.ListAccessKeysOutput, bool) bool)) *MockIAMAPI_ListAccessKeysPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListAccessKeysInput), args[1].(func(*iam.ListAccessKeysOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListAccessKeysPages_Call) Return(_a0 error) *MockIAMAPI_ListAccessKeysPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListAccessKeysPages_Call) RunAndReturn(run func(*iam.ListAccessKeysInput, func(*iam.ListAccessKeysOutput, bool) bool) error) *MockIAMAPI_ListAccessKeysPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessKeysPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListAccessKeysPagesWithContext(_a0 context.Context, _a1 *iam.ListAccessKeysInput, _a2 func(*iam.ListAccessKeysOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListAccessKeysInput, func(*iam.ListAccessKeysOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListAccessKeysPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessKeysPagesWithContext'
type MockIAMAPI_ListAccessKeysPagesWithContext_Call struct {
	*mock.Call
}

// ListAccessKeysPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListAccessKeysInput
//   - _a2 func(*iam.ListAccessKeysOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListAccessKeysPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListAccessKeysPagesWithContext_Call {
	return &MockIAMAPI_ListAccessKeysPagesWithContext_Call{Call: _e.mock.On("ListAccessKeysPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListAccessKeysPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListAccessKeysInput, _a2 func(*iam.ListAccessKeysOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListAccessKeysPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListAccessKeysInput), args[2].(func(*iam.ListAccessKeysOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListAccessKeysPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListAccessKeysPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListAccessKeysPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListAccessKeysInput, func(*iam.ListAccessKeysOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListAccessKeysPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessKeysRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListAccessKeysRequest(_a0 *iam.ListAccessKeysInput) (*request.Request, *iam.ListAccessKeysOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListAccessKeysOutput
	if rf, ok := ret.Get(0).(func(*iam.ListAccessKeysInput) (*request.Request, *iam.ListAccessKeysOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListAccessKeysInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListAccessKeysInput) *iam.ListAccessKeysOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListAccessKeysOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListAccessKeysRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessKeysRequest'
type MockIAMAPI_ListAccessKeysRequest_Call struct {
	*mock.Call
}

// ListAccessKeysRequest is a helper method to define mock.On call
//   - _a0 *iam.ListAccessKeysInput
func (_e *MockIAMAPI_Expecter) ListAccessKeysRequest(_a0 interface{}) *MockIAMAPI_ListAccessKeysRequest_Call {
	return &MockIAMAPI_ListAccessKeysRequest_Call{Call: _e.mock.On("ListAccessKeysRequest", _a0)}
}

func (_c *MockIAMAPI_ListAccessKeysRequest_Call) Run(run func(_a0 *iam.ListAccessKeysInput)) *MockIAMAPI_ListAccessKeysRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListAccessKeysInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListAccessKeysRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListAccessKeysOutput) *MockIAMAPI_ListAccessKeysRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListAccessKeysRequest_Call) RunAndReturn(run func(*iam.ListAccessKeysInput) (*request.Request, *iam.ListAccessKeysOutput)) *MockIAMAPI_ListAccessKeysRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessKeysWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListAccessKeysWithContext(_a0 context.Context, _a1 *iam.ListAccessKeysInput, _a2 ...request.Option) (*iam.ListAccessKeysOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListAccessKeysOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListAccessKeysInput, ...request.Option) (*iam.ListAccessKeysOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListAccessKeysInput, ...request.Option) *iam.ListAccessKeysOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListAccessKeysOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListAccessKeysInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListAccessKeysWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessKeysWithContext'
type MockIAMAPI_ListAccessKeysWithContext_Call struct {
	*mock.Call
}

// ListAccessKeysWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListAccessKeysInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListAccessKeysWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListAccessKeysWithContext_Call {
	return &MockIAMAPI_ListAccessKeysWithContext_Call{Call: _e.mock.On("ListAccessKeysWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListAccessKeysWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListAccessKeysInput, _a2 ...request.Option)) *MockIAMAPI_ListAccessKeysWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListAccessKeysInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListAccessKeysWithContext_Call) Return(_a0 *iam.ListAccessKeysOutput, _a1 error) *MockIAMAPI_ListAccessKeysWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListAccessKeysWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListAccessKeysInput, ...request.Option) (*iam.ListAccessKeysOutput, error)) *MockIAMAPI_ListAccessKeysWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccountAliases provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListAccountAliases(_a0 *iam.ListAccountAliasesInput) (*iam.ListAccountAliasesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListAccountAliasesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListAccountAliasesInput) (*iam.ListAccountAliasesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListAccountAliasesInput) *iam.ListAccountAliasesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListAccountAliasesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListAccountAliasesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListAccountAliases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccountAliases'
type MockIAMAPI_ListAccountAliases_Call struct {
	*mock.Call
}

// ListAccountAliases is a helper method to define mock.On call
//   - _a0 *iam.ListAccountAliasesInput
func (_e *MockIAMAPI_Expecter) ListAccountAliases(_a0 interface{}) *MockIAMAPI_ListAccountAliases_Call {
	return &MockIAMAPI_ListAccountAliases_Call{Call: _e.mock.On("ListAccountAliases", _a0)}
}

func (_c *MockIAMAPI_ListAccountAliases_Call) Run(run func(_a0 *iam.ListAccountAliasesInput)) *MockIAMAPI_ListAccountAliases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListAccountAliasesInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListAccountAliases_Call) Return(_a0 *iam.ListAccountAliasesOutput, _a1 error) *MockIAMAPI_ListAccountAliases_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListAccountAliases_Call) RunAndReturn(run func(*iam.ListAccountAliasesInput) (*iam.ListAccountAliasesOutput, error)) *MockIAMAPI_ListAccountAliases_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccountAliasesPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListAccountAliasesPages(_a0 *iam.ListAccountAliasesInput, _a1 func(*iam.ListAccountAliasesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListAccountAliasesInput, func(*iam.ListAccountAliasesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListAccountAliasesPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccountAliasesPages'
type MockIAMAPI_ListAccountAliasesPages_Call struct {
	*mock.Call
}

// ListAccountAliasesPages is a helper method to define mock.On call
//   - _a0 *iam.ListAccountAliasesInput
//   - _a1 func(*iam.ListAccountAliasesOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListAccountAliasesPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListAccountAliasesPages_Call {
	return &MockIAMAPI_ListAccountAliasesPages_Call{Call: _e.mock.On("ListAccountAliasesPages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListAccountAliasesPages_Call) Run(run func(_a0 *iam.ListAccountAliasesInput, _a1 func(*iam.ListAccountAliasesOutput, bool) bool)) *MockIAMAPI_ListAccountAliasesPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListAccountAliasesInput), args[1].(func(*iam.ListAccountAliasesOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListAccountAliasesPages_Call) Return(_a0 error) *MockIAMAPI_ListAccountAliasesPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListAccountAliasesPages_Call) RunAndReturn(run func(*iam.ListAccountAliasesInput, func(*iam.ListAccountAliasesOutput, bool) bool) error) *MockIAMAPI_ListAccountAliasesPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccountAliasesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListAccountAliasesPagesWithContext(_a0 context.Context, _a1 *iam.ListAccountAliasesInput, _a2 func(*iam.ListAccountAliasesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListAccountAliasesInput, func(*iam.ListAccountAliasesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListAccountAliasesPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccountAliasesPagesWithContext'
type MockIAMAPI_ListAccountAliasesPagesWithContext_Call struct {
	*mock.Call
}

// ListAccountAliasesPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListAccountAliasesInput
//   - _a2 func(*iam.ListAccountAliasesOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListAccountAliasesPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListAccountAliasesPagesWithContext_Call {
	return &MockIAMAPI_ListAccountAliasesPagesWithContext_Call{Call: _e.mock.On("ListAccountAliasesPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListAccountAliasesPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListAccountAliasesInput, _a2 func(*iam.ListAccountAliasesOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListAccountAliasesPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListAccountAliasesInput), args[2].(func(*iam.ListAccountAliasesOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListAccountAliasesPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListAccountAliasesPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListAccountAliasesPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListAccountAliasesInput, func(*iam.ListAccountAliasesOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListAccountAliasesPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccountAliasesRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListAccountAliasesRequest(_a0 *iam.ListAccountAliasesInput) (*request.Request, *iam.ListAccountAliasesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListAccountAliasesOutput
	if rf, ok := ret.Get(0).(func(*iam.ListAccountAliasesInput) (*request.Request, *iam.ListAccountAliasesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListAccountAliasesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListAccountAliasesInput) *iam.ListAccountAliasesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListAccountAliasesOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListAccountAliasesRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccountAliasesRequest'
type MockIAMAPI_ListAccountAliasesRequest_Call struct {
	*mock.Call
}

// ListAccountAliasesRequest is a helper method to define mock.On call
//   - _a0 *iam.ListAccountAliasesInput
func (_e *MockIAMAPI_Expecter) ListAccountAliasesRequest(_a0 interface{}) *MockIAMAPI_ListAccountAliasesRequest_Call {
	return &MockIAMAPI_ListAccountAliasesRequest_Call{Call: _e.mock.On("ListAccountAliasesRequest", _a0)}
}

func (_c *MockIAMAPI_ListAccountAliasesRequest_Call) Run(run func(_a0 *iam.ListAccountAliasesInput)) *MockIAMAPI_ListAccountAliasesRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListAccountAliasesInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListAccountAliasesRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListAccountAliasesOutput) *MockIAMAPI_ListAccountAliasesRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListAccountAliasesRequest_Call) RunAndReturn(run func(*iam.ListAccountAliasesInput) (*request.Request, *iam.ListAccountAliasesOutput)) *MockIAMAPI_ListAccountAliasesRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccountAliasesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListAccountAliasesWithContext(_a0 context.Context, _a1 *iam.ListAccountAliasesInput, _a2 ...request.Option) (*iam.ListAccountAliasesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListAccountAliasesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListAccountAliasesInput, ...request.Option) (*iam.ListAccountAliasesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListAccountAliasesInput, ...request.Option) *iam.ListAccountAliasesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListAccountAliasesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListAccountAliasesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListAccountAliasesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccountAliasesWithContext'
type MockIAMAPI_ListAccountAliasesWithContext_Call struct {
	*mock.Call
}

// ListAccountAliasesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListAccountAliasesInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListAccountAliasesWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListAccountAliasesWithContext_Call {
	return &MockIAMAPI_ListAccountAliasesWithContext_Call{Call: _e.mock.On("ListAccountAliasesWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListAccountAliasesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListAccountAliasesInput, _a2 ...request.Option)) *MockIAMAPI_ListAccountAliasesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListAccountAliasesInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListAccountAliasesWithContext_Call) Return(_a0 *iam.ListAccountAliasesOutput, _a1 error) *MockIAMAPI_ListAccountAliasesWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListAccountAliasesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListAccountAliasesInput, ...request.Option) (*iam.ListAccountAliasesOutput, error)) *MockIAMAPI_ListAccountAliasesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListAttachedGroupPolicies provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListAttachedGroupPolicies(_a0 *iam.ListAttachedGroupPoliciesInput) (*iam.ListAttachedGroupPoliciesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListAttachedGroupPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListAttachedGroupPoliciesInput) (*iam.ListAttachedGroupPoliciesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListAttachedGroupPoliciesInput) *iam.ListAttachedGroupPoliciesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListAttachedGroupPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListAttachedGroupPoliciesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListAttachedGroupPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAttachedGroupPolicies'
type MockIAMAPI_ListAttachedGroupPolicies_Call struct {
	*mock.Call
}

// ListAttachedGroupPolicies is a helper method to define mock.On call
//   - _a0 *iam.ListAttachedGroupPoliciesInput
func (_e *MockIAMAPI_Expecter) ListAttachedGroupPolicies(_a0 interface{}) *MockIAMAPI_ListAttachedGroupPolicies_Call {
	return &MockIAMAPI_ListAttachedGroupPolicies_Call{Call: _e.mock.On("ListAttachedGroupPolicies", _a0)}
}

func (_c *MockIAMAPI_ListAttachedGroupPolicies_Call) Run(run func(_a0 *iam.ListAttachedGroupPoliciesInput)) *MockIAMAPI_ListAttachedGroupPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListAttachedGroupPoliciesInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListAttachedGroupPolicies_Call) Return(_a0 *iam.ListAttachedGroupPoliciesOutput, _a1 error) *MockIAMAPI_ListAttachedGroupPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListAttachedGroupPolicies_Call) RunAndReturn(run func(*iam.ListAttachedGroupPoliciesInput) (*iam.ListAttachedGroupPoliciesOutput, error)) *MockIAMAPI_ListAttachedGroupPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// ListAttachedGroupPoliciesPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListAttachedGroupPoliciesPages(_a0 *iam.ListAttachedGroupPoliciesInput, _a1 func(*iam.ListAttachedGroupPoliciesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListAttachedGroupPoliciesInput, func(*iam.ListAttachedGroupPoliciesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListAttachedGroupPoliciesPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAttachedGroupPoliciesPages'
type MockIAMAPI_ListAttachedGroupPoliciesPages_Call struct {
	*mock.Call
}

// ListAttachedGroupPoliciesPages is a helper method to define mock.On call
//   - _a0 *iam.ListAttachedGroupPoliciesInput
//   - _a1 func(*iam.ListAttachedGroupPoliciesOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListAttachedGroupPoliciesPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListAttachedGroupPoliciesPages_Call {
	return &MockIAMAPI_ListAttachedGroupPoliciesPages_Call{Call: _e.mock.On("ListAttachedGroupPoliciesPages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListAttachedGroupPoliciesPages_Call) Run(run func(_a0 *iam.ListAttachedGroupPoliciesInput, _a1 func(*iam.ListAttachedGroupPoliciesOutput, bool) bool)) *MockIAMAPI_ListAttachedGroupPoliciesPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListAttachedGroupPoliciesInput), args[1].(func(*iam.ListAttachedGroupPoliciesOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListAttachedGroupPoliciesPages_Call) Return(_a0 error) *MockIAMAPI_ListAttachedGroupPoliciesPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListAttachedGroupPoliciesPages_Call) RunAndReturn(run func(*iam.ListAttachedGroupPoliciesInput, func(*iam.ListAttachedGroupPoliciesOutput, bool) bool) error) *MockIAMAPI_ListAttachedGroupPoliciesPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListAttachedGroupPoliciesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListAttachedGroupPoliciesPagesWithContext(_a0 context.Context, _a1 *iam.ListAttachedGroupPoliciesInput, _a2 func(*iam.ListAttachedGroupPoliciesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListAttachedGroupPoliciesInput, func(*iam.ListAttachedGroupPoliciesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListAttachedGroupPoliciesPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAttachedGroupPoliciesPagesWithContext'
type MockIAMAPI_ListAttachedGroupPoliciesPagesWithContext_Call struct {
	*mock.Call
}

// ListAttachedGroupPoliciesPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListAttachedGroupPoliciesInput
//   - _a2 func(*iam.ListAttachedGroupPoliciesOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListAttachedGroupPoliciesPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListAttachedGroupPoliciesPagesWithContext_Call {
	return &MockIAMAPI_ListAttachedGroupPoliciesPagesWithContext_Call{Call: _e.mock.On("ListAttachedGroupPoliciesPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListAttachedGroupPoliciesPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListAttachedGroupPoliciesInput, _a2 func(*iam.ListAttachedGroupPoliciesOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListAttachedGroupPoliciesPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListAttachedGroupPoliciesInput), args[2].(func(*iam.ListAttachedGroupPoliciesOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListAttachedGroupPoliciesPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListAttachedGroupPoliciesPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListAttachedGroupPoliciesPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListAttachedGroupPoliciesInput, func(*iam.ListAttachedGroupPoliciesOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListAttachedGroupPoliciesPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListAttachedGroupPoliciesRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListAttachedGroupPoliciesRequest(_a0 *iam.ListAttachedGroupPoliciesInput) (*request.Request, *iam.ListAttachedGroupPoliciesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListAttachedGroupPoliciesOutput
	if rf, ok := ret.Get(0).(func(*iam.ListAttachedGroupPoliciesInput) (*request.Request, *iam.ListAttachedGroupPoliciesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListAttachedGroupPoliciesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListAttachedGroupPoliciesInput) *iam.ListAttachedGroupPoliciesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListAttachedGroupPoliciesOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListAttachedGroupPoliciesRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAttachedGroupPoliciesRequest'
type MockIAMAPI_ListAttachedGroupPoliciesRequest_Call struct {
	*mock.Call
}

// ListAttachedGroupPoliciesRequest is a helper method to define mock.On call
//   - _a0 *iam.ListAttachedGroupPoliciesInput
func (_e *MockIAMAPI_Expecter) ListAttachedGroupPoliciesRequest(_a0 interface{}) *MockIAMAPI_ListAttachedGroupPoliciesRequest_Call {
	return &MockIAMAPI_ListAttachedGroupPoliciesRequest_Call{Call: _e.mock.On("ListAttachedGroupPoliciesRequest", _a0)}
}

func (_c *MockIAMAPI_ListAttachedGroupPoliciesRequest_Call) Run(run func(_a0 *iam.ListAttachedGroupPoliciesInput)) *MockIAMAPI_ListAttachedGroupPoliciesRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListAttachedGroupPoliciesInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListAttachedGroupPoliciesRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListAttachedGroupPoliciesOutput) *MockIAMAPI_ListAttachedGroupPoliciesRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListAttachedGroupPoliciesRequest_Call) RunAndReturn(run func(*iam.ListAttachedGroupPoliciesInput) (*request.Request, *iam.ListAttachedGroupPoliciesOutput)) *MockIAMAPI_ListAttachedGroupPoliciesRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListAttachedGroupPoliciesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListAttachedGroupPoliciesWithContext(_a0 context.Context, _a1 *iam.ListAttachedGroupPoliciesInput, _a2 ...request.Option) (*iam.ListAttachedGroupPoliciesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListAttachedGroupPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListAttachedGroupPoliciesInput, ...request.Option) (*iam.ListAttachedGroupPoliciesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListAttachedGroupPoliciesInput, ...request.Option) *iam.ListAttachedGroupPoliciesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListAttachedGroupPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListAttachedGroupPoliciesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListAttachedGroupPoliciesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAttachedGroupPoliciesWithContext'
type MockIAMAPI_ListAttachedGroupPoliciesWithContext_Call struct {
	*mock.Call
}

// ListAttachedGroupPoliciesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListAttachedGroupPoliciesInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListAttachedGroupPoliciesWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListAttachedGroupPoliciesWithContext_Call {
	return &MockIAMAPI_ListAttachedGroupPoliciesWithContext_Call{Call: _e.mock.On("ListAttachedGroupPoliciesWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListAttachedGroupPoliciesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListAttachedGroupPoliciesInput, _a2 ...request.Option)) *MockIAMAPI_ListAttachedGroupPoliciesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListAttachedGroupPoliciesInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListAttachedGroupPoliciesWithContext_Call) Return(_a0 *iam.ListAttachedGroupPoliciesOutput, _a1 error) *MockIAMAPI_ListAttachedGroupPoliciesWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListAttachedGroupPoliciesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListAttachedGroupPoliciesInput, ...request.Option) (*iam.ListAttachedGroupPoliciesOutput, error)) *MockIAMAPI_ListAttachedGroupPoliciesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListAttachedRolePolicies provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListAttachedRolePolicies(_a0 *iam.ListAttachedRolePoliciesInput) (*iam.ListAttachedRolePoliciesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListAttachedRolePoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListAttachedRolePoliciesInput) (*iam.ListAttachedRolePoliciesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListAttachedRolePoliciesInput) *iam.ListAttachedRolePoliciesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListAttachedRolePoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListAttachedRolePoliciesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListAttachedRolePolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAttachedRolePolicies'
type MockIAMAPI_ListAttachedRolePolicies_Call struct {
	*mock.Call
}

// ListAttachedRolePolicies is a helper method to define mock.On call
//   - _a0 *iam.ListAttachedRolePoliciesInput
func (_e *MockIAMAPI_Expecter) ListAttachedRolePolicies(_a0 interface{}) *MockIAMAPI_ListAttachedRolePolicies_Call {
	return &MockIAMAPI_ListAttachedRolePolicies_Call{Call: _e.mock.On("ListAttachedRolePolicies", _a0)}
}

func (_c *MockIAMAPI_ListAttachedRolePolicies_Call) Run(run func(_a0 *iam.ListAttachedRolePoliciesInput)) *MockIAMAPI_ListAttachedRolePolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListAttachedRolePoliciesInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListAttachedRolePolicies_Call) Return(_a0 *iam.ListAttachedRolePoliciesOutput, _a1 error) *MockIAMAPI_ListAttachedRolePolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListAttachedRolePolicies_Call) RunAndReturn(run func(*iam.ListAttachedRolePoliciesInput) (*iam.ListAttachedRolePoliciesOutput, error)) *MockIAMAPI_ListAttachedRolePolicies_Call {
	_c.Call.Return(run)
	return _c
}

// ListAttachedRolePoliciesPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListAttachedRolePoliciesPages(_a0 *iam.ListAttachedRolePoliciesInput, _a1 func(*iam.ListAttachedRolePoliciesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListAttachedRolePoliciesInput, func(*iam.ListAttachedRolePoliciesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListAttachedRolePoliciesPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAttachedRolePoliciesPages'
type MockIAMAPI_ListAttachedRolePoliciesPages_Call struct {
	*mock.Call
}

// ListAttachedRolePoliciesPages is a helper method to define mock.On call
//   - _a0 *iam.ListAttachedRolePoliciesInput
//   - _a1 func(*iam.ListAttachedRolePoliciesOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListAttachedRolePoliciesPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListAttachedRolePoliciesPages_Call {
	return &MockIAMAPI_ListAttachedRolePoliciesPages_Call{Call: _e.mock.On("ListAttachedRolePoliciesPages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListAttachedRolePoliciesPages_Call) Run(run func(_a0 *iam.ListAttachedRolePoliciesInput, _a1 func(*iam.ListAttachedRolePoliciesOutput, bool) bool)) *MockIAMAPI_ListAttachedRolePoliciesPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListAttachedRolePoliciesInput), args[1].(func(*iam.ListAttachedRolePoliciesOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListAttachedRolePoliciesPages_Call) Return(_a0 error) *MockIAMAPI_ListAttachedRolePoliciesPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListAttachedRolePoliciesPages_Call) RunAndReturn(run func(*iam.ListAttachedRolePoliciesInput, func(*iam.ListAttachedRolePoliciesOutput, bool) bool) error) *MockIAMAPI_ListAttachedRolePoliciesPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListAttachedRolePoliciesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListAttachedRolePoliciesPagesWithContext(_a0 context.Context, _a1 *iam.ListAttachedRolePoliciesInput, _a2 func(*iam.ListAttachedRolePoliciesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListAttachedRolePoliciesInput, func(*iam.ListAttachedRolePoliciesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListAttachedRolePoliciesPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAttachedRolePoliciesPagesWithContext'
type MockIAMAPI_ListAttachedRolePoliciesPagesWithContext_Call struct {
	*mock.Call
}

// ListAttachedRolePoliciesPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListAttachedRolePoliciesInput
//   - _a2 func(*iam.ListAttachedRolePoliciesOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListAttachedRolePoliciesPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListAttachedRolePoliciesPagesWithContext_Call {
	return &MockIAMAPI_ListAttachedRolePoliciesPagesWithContext_Call{Call: _e.mock.On("ListAttachedRolePoliciesPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListAttachedRolePoliciesPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListAttachedRolePoliciesInput, _a2 func(*iam.ListAttachedRolePoliciesOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListAttachedRolePoliciesPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListAttachedRolePoliciesInput), args[2].(func(*iam.ListAttachedRolePoliciesOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListAttachedRolePoliciesPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListAttachedRolePoliciesPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListAttachedRolePoliciesPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListAttachedRolePoliciesInput, func(*iam.ListAttachedRolePoliciesOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListAttachedRolePoliciesPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListAttachedRolePoliciesRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListAttachedRolePoliciesRequest(_a0 *iam.ListAttachedRolePoliciesInput) (*request.Request, *iam.ListAttachedRolePoliciesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListAttachedRolePoliciesOutput
	if rf, ok := ret.Get(0).(func(*iam.ListAttachedRolePoliciesInput) (*request.Request, *iam.ListAttachedRolePoliciesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListAttachedRolePoliciesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListAttachedRolePoliciesInput) *iam.ListAttachedRolePoliciesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListAttachedRolePoliciesOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListAttachedRolePoliciesRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAttachedRolePoliciesRequest'
type MockIAMAPI_ListAttachedRolePoliciesRequest_Call struct {
	*mock.Call
}

// ListAttachedRolePoliciesRequest is a helper method to define mock.On call
//   - _a0 *iam.ListAttachedRolePoliciesInput
func (_e *MockIAMAPI_Expecter) ListAttachedRolePoliciesRequest(_a0 interface{}) *MockIAMAPI_ListAttachedRolePoliciesRequest_Call {
	return &MockIAMAPI_ListAttachedRolePoliciesRequest_Call{Call: _e.mock.On("ListAttachedRolePoliciesRequest", _a0)}
}

func (_c *MockIAMAPI_ListAttachedRolePoliciesRequest_Call) Run(run func(_a0 *iam.ListAttachedRolePoliciesInput)) *MockIAMAPI_ListAttachedRolePoliciesRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListAttachedRolePoliciesInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListAttachedRolePoliciesRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListAttachedRolePoliciesOutput) *MockIAMAPI_ListAttachedRolePoliciesRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListAttachedRolePoliciesRequest_Call) RunAndReturn(run func(*iam.ListAttachedRolePoliciesInput) (*request.Request, *iam.ListAttachedRolePoliciesOutput)) *MockIAMAPI_ListAttachedRolePoliciesRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListAttachedRolePoliciesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListAttachedRolePoliciesWithContext(_a0 context.Context, _a1 *iam.ListAttachedRolePoliciesInput, _a2 ...request.Option) (*iam.ListAttachedRolePoliciesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListAttachedRolePoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListAttachedRolePoliciesInput, ...request.Option) (*iam.ListAttachedRolePoliciesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListAttachedRolePoliciesInput, ...request.Option) *iam.ListAttachedRolePoliciesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListAttachedRolePoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListAttachedRolePoliciesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListAttachedRolePoliciesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAttachedRolePoliciesWithContext'
type MockIAMAPI_ListAttachedRolePoliciesWithContext_Call struct {
	*mock.Call
}

// ListAttachedRolePoliciesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListAttachedRolePoliciesInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListAttachedRolePoliciesWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListAttachedRolePoliciesWithContext_Call {
	return &MockIAMAPI_ListAttachedRolePoliciesWithContext_Call{Call: _e.mock.On("ListAttachedRolePoliciesWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListAttachedRolePoliciesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListAttachedRolePoliciesInput, _a2 ...request.Option)) *MockIAMAPI_ListAttachedRolePoliciesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListAttachedRolePoliciesInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListAttachedRolePoliciesWithContext_Call) Return(_a0 *iam.ListAttachedRolePoliciesOutput, _a1 error) *MockIAMAPI_ListAttachedRolePoliciesWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListAttachedRolePoliciesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListAttachedRolePoliciesInput, ...request.Option) (*iam.ListAttachedRolePoliciesOutput, error)) *MockIAMAPI_ListAttachedRolePoliciesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListAttachedUserPolicies provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListAttachedUserPolicies(_a0 *iam.ListAttachedUserPoliciesInput) (*iam.ListAttachedUserPoliciesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListAttachedUserPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListAttachedUserPoliciesInput) (*iam.ListAttachedUserPoliciesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListAttachedUserPoliciesInput) *iam.ListAttachedUserPoliciesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListAttachedUserPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListAttachedUserPoliciesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListAttachedUserPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAttachedUserPolicies'
type MockIAMAPI_ListAttachedUserPolicies_Call struct {
	*mock.Call
}

// ListAttachedUserPolicies is a helper method to define mock.On call
//   - _a0 *iam.ListAttachedUserPoliciesInput
func (_e *MockIAMAPI_Expecter) ListAttachedUserPolicies(_a0 interface{}) *MockIAMAPI_ListAttachedUserPolicies_Call {
	return &MockIAMAPI_ListAttachedUserPolicies_Call{Call: _e.mock.On("ListAttachedUserPolicies", _a0)}
}

func (_c *MockIAMAPI_ListAttachedUserPolicies_Call) Run(run func(_a0 *iam.ListAttachedUserPoliciesInput)) *MockIAMAPI_ListAttachedUserPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListAttachedUserPoliciesInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListAttachedUserPolicies_Call) Return(_a0 *iam.ListAttachedUserPoliciesOutput, _a1 error) *MockIAMAPI_ListAttachedUserPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListAttachedUserPolicies_Call) RunAndReturn(run func(*iam.ListAttachedUserPoliciesInput) (*iam.ListAttachedUserPoliciesOutput, error)) *MockIAMAPI_ListAttachedUserPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// ListAttachedUserPoliciesPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListAttachedUserPoliciesPages(_a0 *iam.ListAttachedUserPoliciesInput, _a1 func(*iam.ListAttachedUserPoliciesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListAttachedUserPoliciesInput, func(*iam.ListAttachedUserPoliciesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListAttachedUserPoliciesPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAttachedUserPoliciesPages'
type MockIAMAPI_ListAttachedUserPoliciesPages_Call struct {
	*mock.Call
}

// ListAttachedUserPoliciesPages is a helper method to define mock.On call
//   - _a0 *iam.ListAttachedUserPoliciesInput
//   - _a1 func(*iam.ListAttachedUserPoliciesOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListAttachedUserPoliciesPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListAttachedUserPoliciesPages_Call {
	return &MockIAMAPI_ListAttachedUserPoliciesPages_Call{Call: _e.mock.On("ListAttachedUserPoliciesPages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListAttachedUserPoliciesPages_Call) Run(run func(_a0 *iam.ListAttachedUserPoliciesInput, _a1 func(*iam.ListAttachedUserPoliciesOutput, bool) bool)) *MockIAMAPI_ListAttachedUserPoliciesPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListAttachedUserPoliciesInput), args[1].(func(*iam.ListAttachedUserPoliciesOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListAttachedUserPoliciesPages_Call) Return(_a0 error) *MockIAMAPI_ListAttachedUserPoliciesPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListAttachedUserPoliciesPages_Call) RunAndReturn(run func(*iam.ListAttachedUserPoliciesInput, func(*iam.ListAttachedUserPoliciesOutput, bool) bool) error) *MockIAMAPI_ListAttachedUserPoliciesPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListAttachedUserPoliciesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListAttachedUserPoliciesPagesWithContext(_a0 context.Context, _a1 *iam.ListAttachedUserPoliciesInput, _a2 func(*iam.ListAttachedUserPoliciesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListAttachedUserPoliciesInput, func(*iam.ListAttachedUserPoliciesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListAttachedUserPoliciesPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAttachedUserPoliciesPagesWithContext'
type MockIAMAPI_ListAttachedUserPoliciesPagesWithContext_Call struct {
	*mock.Call
}

// ListAttachedUserPoliciesPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListAttachedUserPoliciesInput
//   - _a2 func(*iam.ListAttachedUserPoliciesOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListAttachedUserPoliciesPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListAttachedUserPoliciesPagesWithContext_Call {
	return &MockIAMAPI_ListAttachedUserPoliciesPagesWithContext_Call{Call: _e.mock.On("ListAttachedUserPoliciesPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListAttachedUserPoliciesPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListAttachedUserPoliciesInput, _a2 func(*iam.ListAttachedUserPoliciesOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListAttachedUserPoliciesPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListAttachedUserPoliciesInput), args[2].(func(*iam.ListAttachedUserPoliciesOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListAttachedUserPoliciesPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListAttachedUserPoliciesPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListAttachedUserPoliciesPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListAttachedUserPoliciesInput, func(*iam.ListAttachedUserPoliciesOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListAttachedUserPoliciesPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListAttachedUserPoliciesRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListAttachedUserPoliciesRequest(_a0 *iam.ListAttachedUserPoliciesInput) (*request.Request, *iam.ListAttachedUserPoliciesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListAttachedUserPoliciesOutput
	if rf, ok := ret.Get(0).(func(*iam.ListAttachedUserPoliciesInput) (*request.Request, *iam.ListAttachedUserPoliciesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListAttachedUserPoliciesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListAttachedUserPoliciesInput) *iam.ListAttachedUserPoliciesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListAttachedUserPoliciesOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListAttachedUserPoliciesRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAttachedUserPoliciesRequest'
type MockIAMAPI_ListAttachedUserPoliciesRequest_Call struct {
	*mock.Call
}

// ListAttachedUserPoliciesRequest is a helper method to define mock.On call
//   - _a0 *iam.ListAttachedUserPoliciesInput
func (_e *MockIAMAPI_Expecter) ListAttachedUserPoliciesRequest(_a0 interface{}) *MockIAMAPI_ListAttachedUserPoliciesRequest_Call {
	return &MockIAMAPI_ListAttachedUserPoliciesRequest_Call{Call: _e.mock.On("ListAttachedUserPoliciesRequest", _a0)}
}

func (_c *MockIAMAPI_ListAttachedUserPoliciesRequest_Call) Run(run func(_a0 *iam.ListAttachedUserPoliciesInput)) *MockIAMAPI_ListAttachedUserPoliciesRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListAttachedUserPoliciesInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListAttachedUserPoliciesRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListAttachedUserPoliciesOutput) *MockIAMAPI_ListAttachedUserPoliciesRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListAttachedUserPoliciesRequest_Call) RunAndReturn(run func(*iam.ListAttachedUserPoliciesInput) (*request.Request, *iam.ListAttachedUserPoliciesOutput)) *MockIAMAPI_ListAttachedUserPoliciesRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListAttachedUserPoliciesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListAttachedUserPoliciesWithContext(_a0 context.Context, _a1 *iam.ListAttachedUserPoliciesInput, _a2 ...request.Option) (*iam.ListAttachedUserPoliciesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListAttachedUserPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListAttachedUserPoliciesInput, ...request.Option) (*iam.ListAttachedUserPoliciesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListAttachedUserPoliciesInput, ...request.Option) *iam.ListAttachedUserPoliciesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListAttachedUserPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListAttachedUserPoliciesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListAttachedUserPoliciesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAttachedUserPoliciesWithContext'
type MockIAMAPI_ListAttachedUserPoliciesWithContext_Call struct {
	*mock.Call
}

// ListAttachedUserPoliciesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListAttachedUserPoliciesInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListAttachedUserPoliciesWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListAttachedUserPoliciesWithContext_Call {
	return &MockIAMAPI_ListAttachedUserPoliciesWithContext_Call{Call: _e.mock.On("ListAttachedUserPoliciesWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListAttachedUserPoliciesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListAttachedUserPoliciesInput, _a2 ...request.Option)) *MockIAMAPI_ListAttachedUserPoliciesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListAttachedUserPoliciesInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListAttachedUserPoliciesWithContext_Call) Return(_a0 *iam.ListAttachedUserPoliciesOutput, _a1 error) *MockIAMAPI_ListAttachedUserPoliciesWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListAttachedUserPoliciesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListAttachedUserPoliciesInput, ...request.Option) (*iam.ListAttachedUserPoliciesOutput, error)) *MockIAMAPI_ListAttachedUserPoliciesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListEntitiesForPolicy provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListEntitiesForPolicy(_a0 *iam.ListEntitiesForPolicyInput) (*iam.ListEntitiesForPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListEntitiesForPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListEntitiesForPolicyInput) (*iam.ListEntitiesForPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListEntitiesForPolicyInput) *iam.ListEntitiesForPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListEntitiesForPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListEntitiesForPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListEntitiesForPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEntitiesForPolicy'
type MockIAMAPI_ListEntitiesForPolicy_Call struct {
	*mock.Call
}

// ListEntitiesForPolicy is a helper method to define mock.On call
//   - _a0 *iam.ListEntitiesForPolicyInput
func (_e *MockIAMAPI_Expecter) ListEntitiesForPolicy(_a0 interface{}) *MockIAMAPI_ListEntitiesForPolicy_Call {
	return &MockIAMAPI_ListEntitiesForPolicy_Call{Call: _e.mock.On("ListEntitiesForPolicy", _a0)}
}

func (_c *MockIAMAPI_ListEntitiesForPolicy_Call) Run(run func(_a0 *iam.ListEntitiesForPolicyInput)) *MockIAMAPI_ListEntitiesForPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListEntitiesForPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListEntitiesForPolicy_Call) Return(_a0 *iam.ListEntitiesForPolicyOutput, _a1 error) *MockIAMAPI_ListEntitiesForPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListEntitiesForPolicy_Call) RunAndReturn(run func(*iam.ListEntitiesForPolicyInput) (*iam.ListEntitiesForPolicyOutput, error)) *MockIAMAPI_ListEntitiesForPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// ListEntitiesForPolicyPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListEntitiesForPolicyPages(_a0 *iam.ListEntitiesForPolicyInput, _a1 func(*iam.ListEntitiesForPolicyOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListEntitiesForPolicyInput, func(*iam.ListEntitiesForPolicyOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListEntitiesForPolicyPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEntitiesForPolicyPages'
type MockIAMAPI_ListEntitiesForPolicyPages_Call struct {
	*mock.Call
}

// ListEntitiesForPolicyPages is a helper method to define mock.On call
//   - _a0 *iam.ListEntitiesForPolicyInput
//   - _a1 func(*iam.ListEntitiesForPolicyOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListEntitiesForPolicyPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListEntitiesForPolicyPages_Call {
	return &MockIAMAPI_ListEntitiesForPolicyPages_Call{Call: _e.mock.On("ListEntitiesForPolicyPages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListEntitiesForPolicyPages_Call) Run(run func(_a0 *iam.ListEntitiesForPolicyInput, _a1 func(*iam.ListEntitiesForPolicyOutput, bool) bool)) *MockIAMAPI_ListEntitiesForPolicyPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListEntitiesForPolicyInput), args[1].(func(*iam.ListEntitiesForPolicyOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListEntitiesForPolicyPages_Call) Return(_a0 error) *MockIAMAPI_ListEntitiesForPolicyPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListEntitiesForPolicyPages_Call) RunAndReturn(run func(*iam.ListEntitiesForPolicyInput, func(*iam.ListEntitiesForPolicyOutput, bool) bool) error) *MockIAMAPI_ListEntitiesForPolicyPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListEntitiesForPolicyPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListEntitiesForPolicyPagesWithContext(_a0 context.Context, _a1 *iam.ListEntitiesForPolicyInput, _a2 func(*iam.ListEntitiesForPolicyOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListEntitiesForPolicyInput, func(*iam.ListEntitiesForPolicyOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListEntitiesForPolicyPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEntitiesForPolicyPagesWithContext'
type MockIAMAPI_ListEntitiesForPolicyPagesWithContext_Call struct {
	*mock.Call
}

// ListEntitiesForPolicyPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListEntitiesForPolicyInput
//   - _a2 func(*iam.ListEntitiesForPolicyOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListEntitiesForPolicyPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListEntitiesForPolicyPagesWithContext_Call {
	return &MockIAMAPI_ListEntitiesForPolicyPagesWithContext_Call{Call: _e.mock.On("ListEntitiesForPolicyPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListEntitiesForPolicyPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListEntitiesForPolicyInput, _a2 func(*iam.ListEntitiesForPolicyOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListEntitiesForPolicyPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListEntitiesForPolicyInput), args[2].(func(*iam.ListEntitiesForPolicyOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListEntitiesForPolicyPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListEntitiesForPolicyPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListEntitiesForPolicyPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListEntitiesForPolicyInput, func(*iam.ListEntitiesForPolicyOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListEntitiesForPolicyPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListEntitiesForPolicyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListEntitiesForPolicyRequest(_a0 *iam.ListEntitiesForPolicyInput) (*request.Request, *iam.ListEntitiesForPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListEntitiesForPolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.ListEntitiesForPolicyInput) (*request.Request, *iam.ListEntitiesForPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListEntitiesForPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListEntitiesForPolicyInput) *iam.ListEntitiesForPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListEntitiesForPolicyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListEntitiesForPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEntitiesForPolicyRequest'
type MockIAMAPI_ListEntitiesForPolicyRequest_Call struct {
	*mock.Call
}

// ListEntitiesForPolicyRequest is a helper method to define mock.On call
//   - _a0 *iam.ListEntitiesForPolicyInput
func (_e *MockIAMAPI_Expecter) ListEntitiesForPolicyRequest(_a0 interface{}) *MockIAMAPI_ListEntitiesForPolicyRequest_Call {
	return &MockIAMAPI_ListEntitiesForPolicyRequest_Call{Call: _e.mock.On("ListEntitiesForPolicyRequest", _a0)}
}

func (_c *MockIAMAPI_ListEntitiesForPolicyRequest_Call) Run(run func(_a0 *iam.ListEntitiesForPolicyInput)) *MockIAMAPI_ListEntitiesForPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListEntitiesForPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListEntitiesForPolicyRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListEntitiesForPolicyOutput) *MockIAMAPI_ListEntitiesForPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListEntitiesForPolicyRequest_Call) RunAndReturn(run func(*iam.ListEntitiesForPolicyInput) (*request.Request, *iam.ListEntitiesForPolicyOutput)) *MockIAMAPI_ListEntitiesForPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListEntitiesForPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListEntitiesForPolicyWithContext(_a0 context.Context, _a1 *iam.ListEntitiesForPolicyInput, _a2 ...request.Option) (*iam.ListEntitiesForPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListEntitiesForPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListEntitiesForPolicyInput, ...request.Option) (*iam.ListEntitiesForPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListEntitiesForPolicyInput, ...request.Option) *iam.ListEntitiesForPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListEntitiesForPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListEntitiesForPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListEntitiesForPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEntitiesForPolicyWithContext'
type MockIAMAPI_ListEntitiesForPolicyWithContext_Call struct {
	*mock.Call
}

// ListEntitiesForPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListEntitiesForPolicyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListEntitiesForPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListEntitiesForPolicyWithContext_Call {
	return &MockIAMAPI_ListEntitiesForPolicyWithContext_Call{Call: _e.mock.On("ListEntitiesForPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListEntitiesForPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListEntitiesForPolicyInput, _a2 ...request.Option)) *MockIAMAPI_ListEntitiesForPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListEntitiesForPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListEntitiesForPolicyWithContext_Call) Return(_a0 *iam.ListEntitiesForPolicyOutput, _a1 error) *MockIAMAPI_ListEntitiesForPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListEntitiesForPolicyWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListEntitiesForPolicyInput, ...request.Option) (*iam.ListEntitiesForPolicyOutput, error)) *MockIAMAPI_ListEntitiesForPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupPolicies provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListGroupPolicies(_a0 *iam.ListGroupPoliciesInput) (*iam.ListGroupPoliciesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListGroupPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListGroupPoliciesInput) (*iam.ListGroupPoliciesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListGroupPoliciesInput) *iam.ListGroupPoliciesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListGroupPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListGroupPoliciesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListGroupPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupPolicies'
type MockIAMAPI_ListGroupPolicies_Call struct {
	*mock.Call
}

// ListGroupPolicies is a helper method to define mock.On call
//   - _a0 *iam.ListGroupPoliciesInput
func (_e *MockIAMAPI_Expecter) ListGroupPolicies(_a0 interface{}) *MockIAMAPI_ListGroupPolicies_Call {
	return &MockIAMAPI_ListGroupPolicies_Call{Call: _e.mock.On("ListGroupPolicies", _a0)}
}

func (_c *MockIAMAPI_ListGroupPolicies_Call) Run(run func(_a0 *iam.ListGroupPoliciesInput)) *MockIAMAPI_ListGroupPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListGroupPoliciesInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListGroupPolicies_Call) Return(_a0 *iam.ListGroupPoliciesOutput, _a1 error) *MockIAMAPI_ListGroupPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListGroupPolicies_Call) RunAndReturn(run func(*iam.ListGroupPoliciesInput) (*iam.ListGroupPoliciesOutput, error)) *MockIAMAPI_ListGroupPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupPoliciesPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListGroupPoliciesPages(_a0 *iam.ListGroupPoliciesInput, _a1 func(*iam.ListGroupPoliciesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListGroupPoliciesInput, func(*iam.ListGroupPoliciesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListGroupPoliciesPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupPoliciesPages'
type MockIAMAPI_ListGroupPoliciesPages_Call struct {
	*mock.Call
}

// ListGroupPoliciesPages is a helper method to define mock.On call
//   - _a0 *iam.ListGroupPoliciesInput
//   - _a1 func(*iam.ListGroupPoliciesOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListGroupPoliciesPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListGroupPoliciesPages_Call {
	return &MockIAMAPI_ListGroupPoliciesPages_Call{Call: _e.mock.On("ListGroupPoliciesPages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListGroupPoliciesPages_Call) Run(run func(_a0 *iam.ListGroupPoliciesInput, _a1 func(*iam.ListGroupPoliciesOutput, bool) bool)) *MockIAMAPI_ListGroupPoliciesPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListGroupPoliciesInput), args[1].(func(*iam.ListGroupPoliciesOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListGroupPoliciesPages_Call) Return(_a0 error) *MockIAMAPI_ListGroupPoliciesPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListGroupPoliciesPages_Call) RunAndReturn(run func(*iam.ListGroupPoliciesInput, func(*iam.ListGroupPoliciesOutput, bool) bool) error) *MockIAMAPI_ListGroupPoliciesPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupPoliciesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListGroupPoliciesPagesWithContext(_a0 context.Context, _a1 *iam.ListGroupPoliciesInput, _a2 func(*iam.ListGroupPoliciesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListGroupPoliciesInput, func(*iam.ListGroupPoliciesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListGroupPoliciesPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupPoliciesPagesWithContext'
type MockIAMAPI_ListGroupPoliciesPagesWithContext_Call struct {
	*mock.Call
}

// ListGroupPoliciesPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListGroupPoliciesInput
//   - _a2 func(*iam.ListGroupPoliciesOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListGroupPoliciesPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListGroupPoliciesPagesWithContext_Call {
	return &MockIAMAPI_ListGroupPoliciesPagesWithContext_Call{Call: _e.mock.On("ListGroupPoliciesPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListGroupPoliciesPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListGroupPoliciesInput, _a2 func(*iam.ListGroupPoliciesOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListGroupPoliciesPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListGroupPoliciesInput), args[2].(func(*iam.ListGroupPoliciesOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListGroupPoliciesPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListGroupPoliciesPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListGroupPoliciesPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListGroupPoliciesInput, func(*iam.ListGroupPoliciesOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListGroupPoliciesPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupPoliciesRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListGroupPoliciesRequest(_a0 *iam.ListGroupPoliciesInput) (*request.Request, *iam.ListGroupPoliciesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListGroupPoliciesOutput
	if rf, ok := ret.Get(0).(func(*iam.ListGroupPoliciesInput) (*request.Request, *iam.ListGroupPoliciesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListGroupPoliciesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListGroupPoliciesInput) *iam.ListGroupPoliciesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListGroupPoliciesOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListGroupPoliciesRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupPoliciesRequest'
type MockIAMAPI_ListGroupPoliciesRequest_Call struct {
	*mock.Call
}

// ListGroupPoliciesRequest is a helper method to define mock.On call
//   - _a0 *iam.ListGroupPoliciesInput
func (_e *MockIAMAPI_Expecter) ListGroupPoliciesRequest(_a0 interface{}) *MockIAMAPI_ListGroupPoliciesRequest_Call {
	return &MockIAMAPI_ListGroupPoliciesRequest_Call{Call: _e.mock.On("ListGroupPoliciesRequest", _a0)}
}

func (_c *MockIAMAPI_ListGroupPoliciesRequest_Call) Run(run func(_a0 *iam.ListGroupPoliciesInput)) *MockIAMAPI_ListGroupPoliciesRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListGroupPoliciesInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListGroupPoliciesRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListGroupPoliciesOutput) *MockIAMAPI_ListGroupPoliciesRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListGroupPoliciesRequest_Call) RunAndReturn(run func(*iam.ListGroupPoliciesInput) (*request.Request, *iam.ListGroupPoliciesOutput)) *MockIAMAPI_ListGroupPoliciesRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupPoliciesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListGroupPoliciesWithContext(_a0 context.Context, _a1 *iam.ListGroupPoliciesInput, _a2 ...request.Option) (*iam.ListGroupPoliciesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListGroupPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListGroupPoliciesInput, ...request.Option) (*iam.ListGroupPoliciesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListGroupPoliciesInput, ...request.Option) *iam.ListGroupPoliciesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListGroupPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListGroupPoliciesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListGroupPoliciesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupPoliciesWithContext'
type MockIAMAPI_ListGroupPoliciesWithContext_Call struct {
	*mock.Call
}

// ListGroupPoliciesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListGroupPoliciesInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListGroupPoliciesWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListGroupPoliciesWithContext_Call {
	return &MockIAMAPI_ListGroupPoliciesWithContext_Call{Call: _e.mock.On("ListGroupPoliciesWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListGroupPoliciesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListGroupPoliciesInput, _a2 ...request.Option)) *MockIAMAPI_ListGroupPoliciesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListGroupPoliciesInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListGroupPoliciesWithContext_Call) Return(_a0 *iam.ListGroupPoliciesOutput, _a1 error) *MockIAMAPI_ListGroupPoliciesWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListGroupPoliciesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListGroupPoliciesInput, ...request.Option) (*iam.ListGroupPoliciesOutput, error)) *MockIAMAPI_ListGroupPoliciesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroups provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListGroups(_a0 *iam.ListGroupsInput) (*iam.ListGroupsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListGroupsInput) (*iam.ListGroupsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListGroupsInput) *iam.ListGroupsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListGroupsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroups'
type MockIAMAPI_ListGroups_Call struct {
	*mock.Call
}

// ListGroups is a helper method to define mock.On call
//   - _a0 *iam.ListGroupsInput
func (_e *MockIAMAPI_Expecter) ListGroups(_a0 interface{}) *MockIAMAPI_ListGroups_Call {
	return &MockIAMAPI_ListGroups_Call{Call: _e.mock.On("ListGroups", _a0)}
}

func (_c *MockIAMAPI_ListGroups_Call) Run(run func(_a0 *iam.ListGroupsInput)) *MockIAMAPI_ListGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListGroupsInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListGroups_Call) Return(_a0 *iam.ListGroupsOutput, _a1 error) *MockIAMAPI_ListGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListGroups_Call) RunAndReturn(run func(*iam.ListGroupsInput) (*iam.ListGroupsOutput, error)) *MockIAMAPI_ListGroups_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupsForUser provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListGroupsForUser(_a0 *iam.ListGroupsForUserInput) (*iam.ListGroupsForUserOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListGroupsForUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListGroupsForUserInput) (*iam.ListGroupsForUserOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListGroupsForUserInput) *iam.ListGroupsForUserOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListGroupsForUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListGroupsForUserInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListGroupsForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupsForUser'
type MockIAMAPI_ListGroupsForUser_Call struct {
	*mock.Call
}

// ListGroupsForUser is a helper method to define mock.On call
//   - _a0 *iam.ListGroupsForUserInput
func (_e *MockIAMAPI_Expecter) ListGroupsForUser(_a0 interface{}) *MockIAMAPI_ListGroupsForUser_Call {
	return &MockIAMAPI_ListGroupsForUser_Call{Call: _e.mock.On("ListGroupsForUser", _a0)}
}

func (_c *MockIAMAPI_ListGroupsForUser_Call) Run(run func(_a0 *iam.ListGroupsForUserInput)) *MockIAMAPI_ListGroupsForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListGroupsForUserInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListGroupsForUser_Call) Return(_a0 *iam.ListGroupsForUserOutput, _a1 error) *MockIAMAPI_ListGroupsForUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListGroupsForUser_Call) RunAndReturn(run func(*iam.ListGroupsForUserInput) (*iam.ListGroupsForUserOutput, error)) *MockIAMAPI_ListGroupsForUser_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupsForUserPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListGroupsForUserPages(_a0 *iam.ListGroupsForUserInput, _a1 func(*iam.ListGroupsForUserOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListGroupsForUserInput, func(*iam.ListGroupsForUserOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListGroupsForUserPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupsForUserPages'
type MockIAMAPI_ListGroupsForUserPages_Call struct {
	*mock.Call
}

// ListGroupsForUserPages is a helper method to define mock.On call
//   - _a0 *iam.ListGroupsForUserInput
//   - _a1 func(*iam.ListGroupsForUserOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListGroupsForUserPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListGroupsForUserPages_Call {
	return &MockIAMAPI_ListGroupsForUserPages_Call{Call: _e.mock.On("ListGroupsForUserPages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListGroupsForUserPages_Call) Run(run func(_a0 *iam.ListGroupsForUserInput, _a1 func(*iam.ListGroupsForUserOutput, bool) bool)) *MockIAMAPI_ListGroupsForUserPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListGroupsForUserInput), args[1].(func(*iam.ListGroupsForUserOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListGroupsForUserPages_Call) Return(_a0 error) *MockIAMAPI_ListGroupsForUserPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListGroupsForUserPages_Call) RunAndReturn(run func(*iam.ListGroupsForUserInput, func(*iam.ListGroupsForUserOutput, bool) bool) error) *MockIAMAPI_ListGroupsForUserPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupsForUserPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListGroupsForUserPagesWithContext(_a0 context.Context, _a1 *iam.ListGroupsForUserInput, _a2 func(*iam.ListGroupsForUserOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListGroupsForUserInput, func(*iam.ListGroupsForUserOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListGroupsForUserPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupsForUserPagesWithContext'
type MockIAMAPI_ListGroupsForUserPagesWithContext_Call struct {
	*mock.Call
}

// ListGroupsForUserPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListGroupsForUserInput
//   - _a2 func(*iam.ListGroupsForUserOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListGroupsForUserPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListGroupsForUserPagesWithContext_Call {
	return &MockIAMAPI_ListGroupsForUserPagesWithContext_Call{Call: _e.mock.On("ListGroupsForUserPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListGroupsForUserPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListGroupsForUserInput, _a2 func(*iam.ListGroupsForUserOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListGroupsForUserPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListGroupsForUserInput), args[2].(func(*iam.ListGroupsForUserOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListGroupsForUserPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListGroupsForUserPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListGroupsForUserPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListGroupsForUserInput, func(*iam.ListGroupsForUserOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListGroupsForUserPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupsForUserRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListGroupsForUserRequest(_a0 *iam.ListGroupsForUserInput) (*request.Request, *iam.ListGroupsForUserOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListGroupsForUserOutput
	if rf, ok := ret.Get(0).(func(*iam.ListGroupsForUserInput) (*request.Request, *iam.ListGroupsForUserOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListGroupsForUserInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListGroupsForUserInput) *iam.ListGroupsForUserOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListGroupsForUserOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListGroupsForUserRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupsForUserRequest'
type MockIAMAPI_ListGroupsForUserRequest_Call struct {
	*mock.Call
}

// ListGroupsForUserRequest is a helper method to define mock.On call
//   - _a0 *iam.ListGroupsForUserInput
func (_e *MockIAMAPI_Expecter) ListGroupsForUserRequest(_a0 interface{}) *MockIAMAPI_ListGroupsForUserRequest_Call {
	return &MockIAMAPI_ListGroupsForUserRequest_Call{Call: _e.mock.On("ListGroupsForUserRequest", _a0)}
}

func (_c *MockIAMAPI_ListGroupsForUserRequest_Call) Run(run func(_a0 *iam.ListGroupsForUserInput)) *MockIAMAPI_ListGroupsForUserRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListGroupsForUserInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListGroupsForUserRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListGroupsForUserOutput) *MockIAMAPI_ListGroupsForUserRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListGroupsForUserRequest_Call) RunAndReturn(run func(*iam.ListGroupsForUserInput) (*request.Request, *iam.ListGroupsForUserOutput)) *MockIAMAPI_ListGroupsForUserRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupsForUserWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListGroupsForUserWithContext(_a0 context.Context, _a1 *iam.ListGroupsForUserInput, _a2 ...request.Option) (*iam.ListGroupsForUserOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListGroupsForUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListGroupsForUserInput, ...request.Option) (*iam.ListGroupsForUserOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListGroupsForUserInput, ...request.Option) *iam.ListGroupsForUserOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListGroupsForUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListGroupsForUserInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListGroupsForUserWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupsForUserWithContext'
type MockIAMAPI_ListGroupsForUserWithContext_Call struct {
	*mock.Call
}

// ListGroupsForUserWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListGroupsForUserInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListGroupsForUserWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListGroupsForUserWithContext_Call {
	return &MockIAMAPI_ListGroupsForUserWithContext_Call{Call: _e.mock.On("ListGroupsForUserWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListGroupsForUserWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListGroupsForUserInput, _a2 ...request.Option)) *MockIAMAPI_ListGroupsForUserWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListGroupsForUserInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListGroupsForUserWithContext_Call) Return(_a0 *iam.ListGroupsForUserOutput, _a1 error) *MockIAMAPI_ListGroupsForUserWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListGroupsForUserWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListGroupsForUserInput, ...request.Option) (*iam.ListGroupsForUserOutput, error)) *MockIAMAPI_ListGroupsForUserWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupsPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListGroupsPages(_a0 *iam.ListGroupsInput, _a1 func(*iam.ListGroupsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListGroupsInput, func(*iam.ListGroupsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListGroupsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupsPages'
type MockIAMAPI_ListGroupsPages_Call struct {
	*mock.Call
}

// ListGroupsPages is a helper method to define mock.On call
//   - _a0 *iam.ListGroupsInput
//   - _a1 func(*iam.ListGroupsOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListGroupsPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListGroupsPages_Call {
	return &MockIAMAPI_ListGroupsPages_Call{Call: _e.mock.On("ListGroupsPages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListGroupsPages_Call) Run(run func(_a0 *iam.ListGroupsInput, _a1 func(*iam.ListGroupsOutput, bool) bool)) *MockIAMAPI_ListGroupsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListGroupsInput), args[1].(func(*iam.ListGroupsOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListGroupsPages_Call) Return(_a0 error) *MockIAMAPI_ListGroupsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListGroupsPages_Call) RunAndReturn(run func(*iam.ListGroupsInput, func(*iam.ListGroupsOutput, bool) bool) error) *MockIAMAPI_ListGroupsPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListGroupsPagesWithContext(_a0 context.Context, _a1 *iam.ListGroupsInput, _a2 func(*iam.ListGroupsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListGroupsInput, func(*iam.ListGroupsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListGroupsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupsPagesWithContext'
type MockIAMAPI_ListGroupsPagesWithContext_Call struct {
	*mock.Call
}

// ListGroupsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListGroupsInput
//   - _a2 func(*iam.ListGroupsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListGroupsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListGroupsPagesWithContext_Call {
	return &MockIAMAPI_ListGroupsPagesWithContext_Call{Call: _e.mock.On("ListGroupsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListGroupsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListGroupsInput, _a2 func(*iam.ListGroupsOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListGroupsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListGroupsInput), args[2].(func(*iam.ListGroupsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListGroupsPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListGroupsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListGroupsPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListGroupsInput, func(*iam.ListGroupsOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListGroupsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupsRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListGroupsRequest(_a0 *iam.ListGroupsInput) (*request.Request, *iam.ListGroupsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListGroupsOutput
	if rf, ok := ret.Get(0).(func(*iam.ListGroupsInput) (*request.Request, *iam.ListGroupsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListGroupsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListGroupsInput) *iam.ListGroupsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListGroupsOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListGroupsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupsRequest'
type MockIAMAPI_ListGroupsRequest_Call struct {
	*mock.Call
}

// ListGroupsRequest is a helper method to define mock.On call
//   - _a0 *iam.ListGroupsInput
func (_e *MockIAMAPI_Expecter) ListGroupsRequest(_a0 interface{}) *MockIAMAPI_ListGroupsRequest_Call {
	return &MockIAMAPI_ListGroupsRequest_Call{Call: _e.mock.On("ListGroupsRequest", _a0)}
}

func (_c *MockIAMAPI_ListGroupsRequest_Call) Run(run func(_a0 *iam.ListGroupsInput)) *MockIAMAPI_ListGroupsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListGroupsInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListGroupsRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListGroupsOutput) *MockIAMAPI_ListGroupsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListGroupsRequest_Call) RunAndReturn(run func(*iam.ListGroupsInput) (*request.Request, *iam.ListGroupsOutput)) *MockIAMAPI_ListGroupsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroupsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListGroupsWithContext(_a0 context.Context, _a1 *iam.ListGroupsInput, _a2 ...request.Option) (*iam.ListGroupsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListGroupsInput, ...request.Option) (*iam.ListGroupsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListGroupsInput, ...request.Option) *iam.ListGroupsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListGroupsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListGroupsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroupsWithContext'
type MockIAMAPI_ListGroupsWithContext_Call struct {
	*mock.Call
}

// ListGroupsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListGroupsInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListGroupsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListGroupsWithContext_Call {
	return &MockIAMAPI_ListGroupsWithContext_Call{Call: _e.mock.On("ListGroupsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListGroupsWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListGroupsInput, _a2 ...request.Option)) *MockIAMAPI_ListGroupsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListGroupsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListGroupsWithContext_Call) Return(_a0 *iam.ListGroupsOutput, _a1 error) *MockIAMAPI_ListGroupsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListGroupsWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListGroupsInput, ...request.Option) (*iam.ListGroupsOutput, error)) *MockIAMAPI_ListGroupsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListInstanceProfileTags provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListInstanceProfileTags(_a0 *iam.ListInstanceProfileTagsInput) (*iam.ListInstanceProfileTagsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListInstanceProfileTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListInstanceProfileTagsInput) (*iam.ListInstanceProfileTagsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListInstanceProfileTagsInput) *iam.ListInstanceProfileTagsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListInstanceProfileTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListInstanceProfileTagsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListInstanceProfileTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInstanceProfileTags'
type MockIAMAPI_ListInstanceProfileTags_Call struct {
	*mock.Call
}

// ListInstanceProfileTags is a helper method to define mock.On call
//   - _a0 *iam.ListInstanceProfileTagsInput
func (_e *MockIAMAPI_Expecter) ListInstanceProfileTags(_a0 interface{}) *MockIAMAPI_ListInstanceProfileTags_Call {
	return &MockIAMAPI_ListInstanceProfileTags_Call{Call: _e.mock.On("ListInstanceProfileTags", _a0)}
}

func (_c *MockIAMAPI_ListInstanceProfileTags_Call) Run(run func(_a0 *iam.ListInstanceProfileTagsInput)) *MockIAMAPI_ListInstanceProfileTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListInstanceProfileTagsInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfileTags_Call) Return(_a0 *iam.ListInstanceProfileTagsOutput, _a1 error) *MockIAMAPI_ListInstanceProfileTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfileTags_Call) RunAndReturn(run func(*iam.ListInstanceProfileTagsInput) (*iam.ListInstanceProfileTagsOutput, error)) *MockIAMAPI_ListInstanceProfileTags_Call {
	_c.Call.Return(run)
	return _c
}

// ListInstanceProfileTagsPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListInstanceProfileTagsPages(_a0 *iam.ListInstanceProfileTagsInput, _a1 func(*iam.ListInstanceProfileTagsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListInstanceProfileTagsInput, func(*iam.ListInstanceProfileTagsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListInstanceProfileTagsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInstanceProfileTagsPages'
type MockIAMAPI_ListInstanceProfileTagsPages_Call struct {
	*mock.Call
}

// ListInstanceProfileTagsPages is a helper method to define mock.On call
//   - _a0 *iam.ListInstanceProfileTagsInput
//   - _a1 func(*iam.ListInstanceProfileTagsOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListInstanceProfileTagsPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListInstanceProfileTagsPages_Call {
	return &MockIAMAPI_ListInstanceProfileTagsPages_Call{Call: _e.mock.On("ListInstanceProfileTagsPages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListInstanceProfileTagsPages_Call) Run(run func(_a0 *iam.ListInstanceProfileTagsInput, _a1 func(*iam.ListInstanceProfileTagsOutput, bool) bool)) *MockIAMAPI_ListInstanceProfileTagsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListInstanceProfileTagsInput), args[1].(func(*iam.ListInstanceProfileTagsOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfileTagsPages_Call) Return(_a0 error) *MockIAMAPI_ListInstanceProfileTagsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfileTagsPages_Call) RunAndReturn(run func(*iam.ListInstanceProfileTagsInput, func(*iam.ListInstanceProfileTagsOutput, bool) bool) error) *MockIAMAPI_ListInstanceProfileTagsPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListInstanceProfileTagsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListInstanceProfileTagsPagesWithContext(_a0 context.Context, _a1 *iam.ListInstanceProfileTagsInput, _a2 func(*iam.ListInstanceProfileTagsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListInstanceProfileTagsInput, func(*iam.ListInstanceProfileTagsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListInstanceProfileTagsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInstanceProfileTagsPagesWithContext'
type MockIAMAPI_ListInstanceProfileTagsPagesWithContext_Call struct {
	*mock.Call
}

// ListInstanceProfileTagsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListInstanceProfileTagsInput
//   - _a2 func(*iam.ListInstanceProfileTagsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListInstanceProfileTagsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListInstanceProfileTagsPagesWithContext_Call {
	return &MockIAMAPI_ListInstanceProfileTagsPagesWithContext_Call{Call: _e.mock.On("ListInstanceProfileTagsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListInstanceProfileTagsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListInstanceProfileTagsInput, _a2 func(*iam.ListInstanceProfileTagsOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListInstanceProfileTagsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListInstanceProfileTagsInput), args[2].(func(*iam.ListInstanceProfileTagsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfileTagsPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListInstanceProfileTagsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfileTagsPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListInstanceProfileTagsInput, func(*iam.ListInstanceProfileTagsOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListInstanceProfileTagsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListInstanceProfileTagsRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListInstanceProfileTagsRequest(_a0 *iam.ListInstanceProfileTagsInput) (*request.Request, *iam.ListInstanceProfileTagsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListInstanceProfileTagsOutput
	if rf, ok := ret.Get(0).(func(*iam.ListInstanceProfileTagsInput) (*request.Request, *iam.ListInstanceProfileTagsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListInstanceProfileTagsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListInstanceProfileTagsInput) *iam.ListInstanceProfileTagsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListInstanceProfileTagsOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListInstanceProfileTagsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInstanceProfileTagsRequest'
type MockIAMAPI_ListInstanceProfileTagsRequest_Call struct {
	*mock.Call
}

// ListInstanceProfileTagsRequest is a helper method to define mock.On call
//   - _a0 *iam.ListInstanceProfileTagsInput
func (_e *MockIAMAPI_Expecter) ListInstanceProfileTagsRequest(_a0 interface{}) *MockIAMAPI_ListInstanceProfileTagsRequest_Call {
	return &MockIAMAPI_ListInstanceProfileTagsRequest_Call{Call: _e.mock.On("ListInstanceProfileTagsRequest", _a0)}
}

func (_c *MockIAMAPI_ListInstanceProfileTagsRequest_Call) Run(run func(_a0 *iam.ListInstanceProfileTagsInput)) *MockIAMAPI_ListInstanceProfileTagsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListInstanceProfileTagsInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfileTagsRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListInstanceProfileTagsOutput) *MockIAMAPI_ListInstanceProfileTagsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfileTagsRequest_Call) RunAndReturn(run func(*iam.ListInstanceProfileTagsInput) (*request.Request, *iam.ListInstanceProfileTagsOutput)) *MockIAMAPI_ListInstanceProfileTagsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListInstanceProfileTagsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListInstanceProfileTagsWithContext(_a0 context.Context, _a1 *iam.ListInstanceProfileTagsInput, _a2 ...request.Option) (*iam.ListInstanceProfileTagsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListInstanceProfileTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListInstanceProfileTagsInput, ...request.Option) (*iam.ListInstanceProfileTagsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListInstanceProfileTagsInput, ...request.Option) *iam.ListInstanceProfileTagsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListInstanceProfileTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListInstanceProfileTagsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListInstanceProfileTagsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInstanceProfileTagsWithContext'
type MockIAMAPI_ListInstanceProfileTagsWithContext_Call struct {
	*mock.Call
}

// ListInstanceProfileTagsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListInstanceProfileTagsInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListInstanceProfileTagsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListInstanceProfileTagsWithContext_Call {
	return &MockIAMAPI_ListInstanceProfileTagsWithContext_Call{Call: _e.mock.On("ListInstanceProfileTagsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListInstanceProfileTagsWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListInstanceProfileTagsInput, _a2 ...request.Option)) *MockIAMAPI_ListInstanceProfileTagsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListInstanceProfileTagsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfileTagsWithContext_Call) Return(_a0 *iam.ListInstanceProfileTagsOutput, _a1 error) *MockIAMAPI_ListInstanceProfileTagsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfileTagsWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListInstanceProfileTagsInput, ...request.Option) (*iam.ListInstanceProfileTagsOutput, error)) *MockIAMAPI_ListInstanceProfileTagsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListInstanceProfiles provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListInstanceProfiles(_a0 *iam.ListInstanceProfilesInput) (*iam.ListInstanceProfilesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListInstanceProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListInstanceProfilesInput) (*iam.ListInstanceProfilesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListInstanceProfilesInput) *iam.ListInstanceProfilesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListInstanceProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListInstanceProfilesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListInstanceProfiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInstanceProfiles'
type MockIAMAPI_ListInstanceProfiles_Call struct {
	*mock.Call
}

// ListInstanceProfiles is a helper method to define mock.On call
//   - _a0 *iam.ListInstanceProfilesInput
func (_e *MockIAMAPI_Expecter) ListInstanceProfiles(_a0 interface{}) *MockIAMAPI_ListInstanceProfiles_Call {
	return &MockIAMAPI_ListInstanceProfiles_Call{Call: _e.mock.On("ListInstanceProfiles", _a0)}
}

func (_c *MockIAMAPI_ListInstanceProfiles_Call) Run(run func(_a0 *iam.ListInstanceProfilesInput)) *MockIAMAPI_ListInstanceProfiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListInstanceProfilesInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfiles_Call) Return(_a0 *iam.ListInstanceProfilesOutput, _a1 error) *MockIAMAPI_ListInstanceProfiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfiles_Call) RunAndReturn(run func(*iam.ListInstanceProfilesInput) (*iam.ListInstanceProfilesOutput, error)) *MockIAMAPI_ListInstanceProfiles_Call {
	_c.Call.Return(run)
	return _c
}

// ListInstanceProfilesForRole provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListInstanceProfilesForRole(_a0 *iam.ListInstanceProfilesForRoleInput) (*iam.ListInstanceProfilesForRoleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListInstanceProfilesForRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListInstanceProfilesForRoleInput) (*iam.ListInstanceProfilesForRoleOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListInstanceProfilesForRoleInput) *iam.ListInstanceProfilesForRoleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListInstanceProfilesForRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListInstanceProfilesForRoleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListInstanceProfilesForRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInstanceProfilesForRole'
type MockIAMAPI_ListInstanceProfilesForRole_Call struct {
	*mock.Call
}

// ListInstanceProfilesForRole is a helper method to define mock.On call
//   - _a0 *iam.ListInstanceProfilesForRoleInput
func (_e *MockIAMAPI_Expecter) ListInstanceProfilesForRole(_a0 interface{}) *MockIAMAPI_ListInstanceProfilesForRole_Call {
	return &MockIAMAPI_ListInstanceProfilesForRole_Call{Call: _e.mock.On("ListInstanceProfilesForRole", _a0)}
}

func (_c *MockIAMAPI_ListInstanceProfilesForRole_Call) Run(run func(_a0 *iam.ListInstanceProfilesForRoleInput)) *MockIAMAPI_ListInstanceProfilesForRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListInstanceProfilesForRoleInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfilesForRole_Call) Return(_a0 *iam.ListInstanceProfilesForRoleOutput, _a1 error) *MockIAMAPI_ListInstanceProfilesForRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfilesForRole_Call) RunAndReturn(run func(*iam.ListInstanceProfilesForRoleInput) (*iam.ListInstanceProfilesForRoleOutput, error)) *MockIAMAPI_ListInstanceProfilesForRole_Call {
	_c.Call.Return(run)
	return _c
}

// ListInstanceProfilesForRolePages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListInstanceProfilesForRolePages(_a0 *iam.ListInstanceProfilesForRoleInput, _a1 func(*iam.ListInstanceProfilesForRoleOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListInstanceProfilesForRoleInput, func(*iam.ListInstanceProfilesForRoleOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListInstanceProfilesForRolePages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInstanceProfilesForRolePages'
type MockIAMAPI_ListInstanceProfilesForRolePages_Call struct {
	*mock.Call
}

// ListInstanceProfilesForRolePages is a helper method to define mock.On call
//   - _a0 *iam.ListInstanceProfilesForRoleInput
//   - _a1 func(*iam.ListInstanceProfilesForRoleOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListInstanceProfilesForRolePages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListInstanceProfilesForRolePages_Call {
	return &MockIAMAPI_ListInstanceProfilesForRolePages_Call{Call: _e.mock.On("ListInstanceProfilesForRolePages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListInstanceProfilesForRolePages_Call) Run(run func(_a0 *iam.ListInstanceProfilesForRoleInput, _a1 func(*iam.ListInstanceProfilesForRoleOutput, bool) bool)) *MockIAMAPI_ListInstanceProfilesForRolePages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListInstanceProfilesForRoleInput), args[1].(func(*iam.ListInstanceProfilesForRoleOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfilesForRolePages_Call) Return(_a0 error) *MockIAMAPI_ListInstanceProfilesForRolePages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfilesForRolePages_Call) RunAndReturn(run func(*iam.ListInstanceProfilesForRoleInput, func(*iam.ListInstanceProfilesForRoleOutput, bool) bool) error) *MockIAMAPI_ListInstanceProfilesForRolePages_Call {
	_c.Call.Return(run)
	return _c
}

// ListInstanceProfilesForRolePagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListInstanceProfilesForRolePagesWithContext(_a0 context.Context, _a1 *iam.ListInstanceProfilesForRoleInput, _a2 func(*iam.ListInstanceProfilesForRoleOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListInstanceProfilesForRoleInput, func(*iam.ListInstanceProfilesForRoleOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListInstanceProfilesForRolePagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInstanceProfilesForRolePagesWithContext'
type MockIAMAPI_ListInstanceProfilesForRolePagesWithContext_Call struct {
	*mock.Call
}

// ListInstanceProfilesForRolePagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListInstanceProfilesForRoleInput
//   - _a2 func(*iam.ListInstanceProfilesForRoleOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListInstanceProfilesForRolePagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListInstanceProfilesForRolePagesWithContext_Call {
	return &MockIAMAPI_ListInstanceProfilesForRolePagesWithContext_Call{Call: _e.mock.On("ListInstanceProfilesForRolePagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListInstanceProfilesForRolePagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListInstanceProfilesForRoleInput, _a2 func(*iam.ListInstanceProfilesForRoleOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListInstanceProfilesForRolePagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListInstanceProfilesForRoleInput), args[2].(func(*iam.ListInstanceProfilesForRoleOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfilesForRolePagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListInstanceProfilesForRolePagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfilesForRolePagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListInstanceProfilesForRoleInput, func(*iam.ListInstanceProfilesForRoleOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListInstanceProfilesForRolePagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListInstanceProfilesForRoleRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListInstanceProfilesForRoleRequest(_a0 *iam.ListInstanceProfilesForRoleInput) (*request.Request, *iam.ListInstanceProfilesForRoleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListInstanceProfilesForRoleOutput
	if rf, ok := ret.Get(0).(func(*iam.ListInstanceProfilesForRoleInput) (*request.Request, *iam.ListInstanceProfilesForRoleOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListInstanceProfilesForRoleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListInstanceProfilesForRoleInput) *iam.ListInstanceProfilesForRoleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListInstanceProfilesForRoleOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListInstanceProfilesForRoleRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInstanceProfilesForRoleRequest'
type MockIAMAPI_ListInstanceProfilesForRoleRequest_Call struct {
	*mock.Call
}

// ListInstanceProfilesForRoleRequest is a helper method to define mock.On call
//   - _a0 *iam.ListInstanceProfilesForRoleInput
func (_e *MockIAMAPI_Expecter) ListInstanceProfilesForRoleRequest(_a0 interface{}) *MockIAMAPI_ListInstanceProfilesForRoleRequest_Call {
	return &MockIAMAPI_ListInstanceProfilesForRoleRequest_Call{Call: _e.mock.On("ListInstanceProfilesForRoleRequest", _a0)}
}

func (_c *MockIAMAPI_ListInstanceProfilesForRoleRequest_Call) Run(run func(_a0 *iam.ListInstanceProfilesForRoleInput)) *MockIAMAPI_ListInstanceProfilesForRoleRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListInstanceProfilesForRoleInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfilesForRoleRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListInstanceProfilesForRoleOutput) *MockIAMAPI_ListInstanceProfilesForRoleRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfilesForRoleRequest_Call) RunAndReturn(run func(*iam.ListInstanceProfilesForRoleInput) (*request.Request, *iam.ListInstanceProfilesForRoleOutput)) *MockIAMAPI_ListInstanceProfilesForRoleRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListInstanceProfilesForRoleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListInstanceProfilesForRoleWithContext(_a0 context.Context, _a1 *iam.ListInstanceProfilesForRoleInput, _a2 ...request.Option) (*iam.ListInstanceProfilesForRoleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListInstanceProfilesForRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListInstanceProfilesForRoleInput, ...request.Option) (*iam.ListInstanceProfilesForRoleOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListInstanceProfilesForRoleInput, ...request.Option) *iam.ListInstanceProfilesForRoleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListInstanceProfilesForRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListInstanceProfilesForRoleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListInstanceProfilesForRoleWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInstanceProfilesForRoleWithContext'
type MockIAMAPI_ListInstanceProfilesForRoleWithContext_Call struct {
	*mock.Call
}

// ListInstanceProfilesForRoleWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListInstanceProfilesForRoleInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListInstanceProfilesForRoleWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListInstanceProfilesForRoleWithContext_Call {
	return &MockIAMAPI_ListInstanceProfilesForRoleWithContext_Call{Call: _e.mock.On("ListInstanceProfilesForRoleWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListInstanceProfilesForRoleWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListInstanceProfilesForRoleInput, _a2 ...request.Option)) *MockIAMAPI_ListInstanceProfilesForRoleWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListInstanceProfilesForRoleInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfilesForRoleWithContext_Call) Return(_a0 *iam.ListInstanceProfilesForRoleOutput, _a1 error) *MockIAMAPI_ListInstanceProfilesForRoleWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfilesForRoleWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListInstanceProfilesForRoleInput, ...request.Option) (*iam.ListInstanceProfilesForRoleOutput, error)) *MockIAMAPI_ListInstanceProfilesForRoleWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListInstanceProfilesPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListInstanceProfilesPages(_a0 *iam.ListInstanceProfilesInput, _a1 func(*iam.ListInstanceProfilesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListInstanceProfilesInput, func(*iam.ListInstanceProfilesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListInstanceProfilesPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInstanceProfilesPages'
type MockIAMAPI_ListInstanceProfilesPages_Call struct {
	*mock.Call
}

// ListInstanceProfilesPages is a helper method to define mock.On call
//   - _a0 *iam.ListInstanceProfilesInput
//   - _a1 func(*iam.ListInstanceProfilesOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListInstanceProfilesPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListInstanceProfilesPages_Call {
	return &MockIAMAPI_ListInstanceProfilesPages_Call{Call: _e.mock.On("ListInstanceProfilesPages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListInstanceProfilesPages_Call) Run(run func(_a0 *iam.ListInstanceProfilesInput, _a1 func(*iam.ListInstanceProfilesOutput, bool) bool)) *MockIAMAPI_ListInstanceProfilesPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListInstanceProfilesInput), args[1].(func(*iam.ListInstanceProfilesOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfilesPages_Call) Return(_a0 error) *MockIAMAPI_ListInstanceProfilesPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfilesPages_Call) RunAndReturn(run func(*iam.ListInstanceProfilesInput, func(*iam.ListInstanceProfilesOutput, bool) bool) error) *MockIAMAPI_ListInstanceProfilesPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListInstanceProfilesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListInstanceProfilesPagesWithContext(_a0 context.Context, _a1 *iam.ListInstanceProfilesInput, _a2 func(*iam.ListInstanceProfilesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListInstanceProfilesInput, func(*iam.ListInstanceProfilesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListInstanceProfilesPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInstanceProfilesPagesWithContext'
type MockIAMAPI_ListInstanceProfilesPagesWithContext_Call struct {
	*mock.Call
}

// ListInstanceProfilesPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListInstanceProfilesInput
//   - _a2 func(*iam.ListInstanceProfilesOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListInstanceProfilesPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListInstanceProfilesPagesWithContext_Call {
	return &MockIAMAPI_ListInstanceProfilesPagesWithContext_Call{Call: _e.mock.On("ListInstanceProfilesPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListInstanceProfilesPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListInstanceProfilesInput, _a2 func(*iam.ListInstanceProfilesOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListInstanceProfilesPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListInstanceProfilesInput), args[2].(func(*iam.ListInstanceProfilesOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfilesPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListInstanceProfilesPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfilesPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListInstanceProfilesInput, func(*iam.ListInstanceProfilesOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListInstanceProfilesPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListInstanceProfilesRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListInstanceProfilesRequest(_a0 *iam.ListInstanceProfilesInput) (*request.Request, *iam.ListInstanceProfilesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListInstanceProfilesOutput
	if rf, ok := ret.Get(0).(func(*iam.ListInstanceProfilesInput) (*request.Request, *iam.ListInstanceProfilesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListInstanceProfilesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListInstanceProfilesInput) *iam.ListInstanceProfilesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListInstanceProfilesOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListInstanceProfilesRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInstanceProfilesRequest'
type MockIAMAPI_ListInstanceProfilesRequest_Call struct {
	*mock.Call
}

// ListInstanceProfilesRequest is a helper method to define mock.On call
//   - _a0 *iam.ListInstanceProfilesInput
func (_e *MockIAMAPI_Expecter) ListInstanceProfilesRequest(_a0 interface{}) *MockIAMAPI_ListInstanceProfilesRequest_Call {
	return &MockIAMAPI_ListInstanceProfilesRequest_Call{Call: _e.mock.On("ListInstanceProfilesRequest", _a0)}
}

func (_c *MockIAMAPI_ListInstanceProfilesRequest_Call) Run(run func(_a0 *iam.ListInstanceProfilesInput)) *MockIAMAPI_ListInstanceProfilesRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListInstanceProfilesInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfilesRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListInstanceProfilesOutput) *MockIAMAPI_ListInstanceProfilesRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfilesRequest_Call) RunAndReturn(run func(*iam.ListInstanceProfilesInput) (*request.Request, *iam.ListInstanceProfilesOutput)) *MockIAMAPI_ListInstanceProfilesRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListInstanceProfilesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListInstanceProfilesWithContext(_a0 context.Context, _a1 *iam.ListInstanceProfilesInput, _a2 ...request.Option) (*iam.ListInstanceProfilesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListInstanceProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListInstanceProfilesInput, ...request.Option) (*iam.ListInstanceProfilesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListInstanceProfilesInput, ...request.Option) *iam.ListInstanceProfilesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListInstanceProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListInstanceProfilesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListInstanceProfilesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInstanceProfilesWithContext'
type MockIAMAPI_ListInstanceProfilesWithContext_Call struct {
	*mock.Call
}

// ListInstanceProfilesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListInstanceProfilesInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListInstanceProfilesWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListInstanceProfilesWithContext_Call {
	return &MockIAMAPI_ListInstanceProfilesWithContext_Call{Call: _e.mock.On("ListInstanceProfilesWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListInstanceProfilesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListInstanceProfilesInput, _a2 ...request.Option)) *MockIAMAPI_ListInstanceProfilesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListInstanceProfilesInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfilesWithContext_Call) Return(_a0 *iam.ListInstanceProfilesOutput, _a1 error) *MockIAMAPI_ListInstanceProfilesWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListInstanceProfilesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListInstanceProfilesInput, ...request.Option) (*iam.ListInstanceProfilesOutput, error)) *MockIAMAPI_ListInstanceProfilesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListMFADeviceTags provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListMFADeviceTags(_a0 *iam.ListMFADeviceTagsInput) (*iam.ListMFADeviceTagsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListMFADeviceTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListMFADeviceTagsInput) (*iam.ListMFADeviceTagsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListMFADeviceTagsInput) *iam.ListMFADeviceTagsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListMFADeviceTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListMFADeviceTagsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListMFADeviceTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMFADeviceTags'
type MockIAMAPI_ListMFADeviceTags_Call struct {
	*mock.Call
}

// ListMFADeviceTags is a helper method to define mock.On call
//   - _a0 *iam.ListMFADeviceTagsInput
func (_e *MockIAMAPI_Expecter) ListMFADeviceTags(_a0 interface{}) *MockIAMAPI_ListMFADeviceTags_Call {
	return &MockIAMAPI_ListMFADeviceTags_Call{Call: _e.mock.On("ListMFADeviceTags", _a0)}
}

func (_c *MockIAMAPI_ListMFADeviceTags_Call) Run(run func(_a0 *iam.ListMFADeviceTagsInput)) *MockIAMAPI_ListMFADeviceTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListMFADeviceTagsInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListMFADeviceTags_Call) Return(_a0 *iam.ListMFADeviceTagsOutput, _a1 error) *MockIAMAPI_ListMFADeviceTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListMFADeviceTags_Call) RunAndReturn(run func(*iam.ListMFADeviceTagsInput) (*iam.ListMFADeviceTagsOutput, error)) *MockIAMAPI_ListMFADeviceTags_Call {
	_c.Call.Return(run)
	return _c
}

// ListMFADeviceTagsPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListMFADeviceTagsPages(_a0 *iam.ListMFADeviceTagsInput, _a1 func(*iam.ListMFADeviceTagsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListMFADeviceTagsInput, func(*iam.ListMFADeviceTagsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListMFADeviceTagsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMFADeviceTagsPages'
type MockIAMAPI_ListMFADeviceTagsPages_Call struct {
	*mock.Call
}

// ListMFADeviceTagsPages is a helper method to define mock.On call
//   - _a0 *iam.ListMFADeviceTagsInput
//   - _a1 func(*iam.ListMFADeviceTagsOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListMFADeviceTagsPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListMFADeviceTagsPages_Call {
	return &MockIAMAPI_ListMFADeviceTagsPages_Call{Call: _e.mock.On("ListMFADeviceTagsPages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListMFADeviceTagsPages_Call) Run(run func(_a0 *iam.ListMFADeviceTagsInput, _a1 func(*iam.ListMFADeviceTagsOutput, bool) bool)) *MockIAMAPI_ListMFADeviceTagsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListMFADeviceTagsInput), args[1].(func(*iam.ListMFADeviceTagsOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListMFADeviceTagsPages_Call) Return(_a0 error) *MockIAMAPI_ListMFADeviceTagsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListMFADeviceTagsPages_Call) RunAndReturn(run func(*iam.ListMFADeviceTagsInput, func(*iam.ListMFADeviceTagsOutput, bool) bool) error) *MockIAMAPI_ListMFADeviceTagsPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListMFADeviceTagsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListMFADeviceTagsPagesWithContext(_a0 context.Context, _a1 *iam.ListMFADeviceTagsInput, _a2 func(*iam.ListMFADeviceTagsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListMFADeviceTagsInput, func(*iam.ListMFADeviceTagsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListMFADeviceTagsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMFADeviceTagsPagesWithContext'
type MockIAMAPI_ListMFADeviceTagsPagesWithContext_Call struct {
	*mock.Call
}

// ListMFADeviceTagsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListMFADeviceTagsInput
//   - _a2 func(*iam.ListMFADeviceTagsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListMFADeviceTagsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListMFADeviceTagsPagesWithContext_Call {
	return &MockIAMAPI_ListMFADeviceTagsPagesWithContext_Call{Call: _e.mock.On("ListMFADeviceTagsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListMFADeviceTagsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListMFADeviceTagsInput, _a2 func(*iam.ListMFADeviceTagsOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListMFADeviceTagsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListMFADeviceTagsInput), args[2].(func(*iam.ListMFADeviceTagsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListMFADeviceTagsPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListMFADeviceTagsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListMFADeviceTagsPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListMFADeviceTagsInput, func(*iam.ListMFADeviceTagsOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListMFADeviceTagsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListMFADeviceTagsRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListMFADeviceTagsRequest(_a0 *iam.ListMFADeviceTagsInput) (*request.Request, *iam.ListMFADeviceTagsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListMFADeviceTagsOutput
	if rf, ok := ret.Get(0).(func(*iam.ListMFADeviceTagsInput) (*request.Request, *iam.ListMFADeviceTagsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListMFADeviceTagsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListMFADeviceTagsInput) *iam.ListMFADeviceTagsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListMFADeviceTagsOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListMFADeviceTagsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMFADeviceTagsRequest'
type MockIAMAPI_ListMFADeviceTagsRequest_Call struct {
	*mock.Call
}

// ListMFADeviceTagsRequest is a helper method to define mock.On call
//   - _a0 *iam.ListMFADeviceTagsInput
func (_e *MockIAMAPI_Expecter) ListMFADeviceTagsRequest(_a0 interface{}) *MockIAMAPI_ListMFADeviceTagsRequest_Call {
	return &MockIAMAPI_ListMFADeviceTagsRequest_Call{Call: _e.mock.On("ListMFADeviceTagsRequest", _a0)}
}

func (_c *MockIAMAPI_ListMFADeviceTagsRequest_Call) Run(run func(_a0 *iam.ListMFADeviceTagsInput)) *MockIAMAPI_ListMFADeviceTagsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListMFADeviceTagsInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListMFADeviceTagsRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListMFADeviceTagsOutput) *MockIAMAPI_ListMFADeviceTagsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListMFADeviceTagsRequest_Call) RunAndReturn(run func(*iam.ListMFADeviceTagsInput) (*request.Request, *iam.ListMFADeviceTagsOutput)) *MockIAMAPI_ListMFADeviceTagsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListMFADeviceTagsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListMFADeviceTagsWithContext(_a0 context.Context, _a1 *iam.ListMFADeviceTagsInput, _a2 ...request.Option) (*iam.ListMFADeviceTagsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListMFADeviceTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListMFADeviceTagsInput, ...request.Option) (*iam.ListMFADeviceTagsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListMFADeviceTagsInput, ...request.Option) *iam.ListMFADeviceTagsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListMFADeviceTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListMFADeviceTagsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListMFADeviceTagsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMFADeviceTagsWithContext'
type MockIAMAPI_ListMFADeviceTagsWithContext_Call struct {
	*mock.Call
}

// ListMFADeviceTagsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListMFADeviceTagsInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListMFADeviceTagsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListMFADeviceTagsWithContext_Call {
	return &MockIAMAPI_ListMFADeviceTagsWithContext_Call{Call: _e.mock.On("ListMFADeviceTagsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListMFADeviceTagsWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListMFADeviceTagsInput, _a2 ...request.Option)) *MockIAMAPI_ListMFADeviceTagsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListMFADeviceTagsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListMFADeviceTagsWithContext_Call) Return(_a0 *iam.ListMFADeviceTagsOutput, _a1 error) *MockIAMAPI_ListMFADeviceTagsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListMFADeviceTagsWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListMFADeviceTagsInput, ...request.Option) (*iam.ListMFADeviceTagsOutput, error)) *MockIAMAPI_ListMFADeviceTagsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListMFADevices provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListMFADevices(_a0 *iam.ListMFADevicesInput) (*iam.ListMFADevicesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListMFADevicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListMFADevicesInput) (*iam.ListMFADevicesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListMFADevicesInput) *iam.ListMFADevicesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListMFADevicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListMFADevicesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListMFADevices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMFADevices'
type MockIAMAPI_ListMFADevices_Call struct {
	*mock.Call
}

// ListMFADevices is a helper method to define mock.On call
//   - _a0 *iam.ListMFADevicesInput
func (_e *MockIAMAPI_Expecter) ListMFADevices(_a0 interface{}) *MockIAMAPI_ListMFADevices_Call {
	return &MockIAMAPI_ListMFADevices_Call{Call: _e.mock.On("ListMFADevices", _a0)}
}

func (_c *MockIAMAPI_ListMFADevices_Call) Run(run func(_a0 *iam.ListMFADevicesInput)) *MockIAMAPI_ListMFADevices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListMFADevicesInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListMFADevices_Call) Return(_a0 *iam.ListMFADevicesOutput, _a1 error) *MockIAMAPI_ListMFADevices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListMFADevices_Call) RunAndReturn(run func(*iam.ListMFADevicesInput) (*iam.ListMFADevicesOutput, error)) *MockIAMAPI_ListMFADevices_Call {
	_c.Call.Return(run)
	return _c
}

// ListMFADevicesPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListMFADevicesPages(_a0 *iam.ListMFADevicesInput, _a1 func(*iam.ListMFADevicesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListMFADevicesInput, func(*iam.ListMFADevicesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListMFADevicesPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMFADevicesPages'
type MockIAMAPI_ListMFADevicesPages_Call struct {
	*mock.Call
}

// ListMFADevicesPages is a helper method to define mock.On call
//   - _a0 *iam.ListMFADevicesInput
//   - _a1 func(*iam.ListMFADevicesOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListMFADevicesPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListMFADevicesPages_Call {
	return &MockIAMAPI_ListMFADevicesPages_Call{Call: _e.mock.On("ListMFADevicesPages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListMFADevicesPages_Call) Run(run func(_a0 *iam.ListMFADevicesInput, _a1 func(*iam.ListMFADevicesOutput, bool) bool)) *MockIAMAPI_ListMFADevicesPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListMFADevicesInput), args[1].(func(*iam.ListMFADevicesOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListMFADevicesPages_Call) Return(_a0 error) *MockIAMAPI_ListMFADevicesPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListMFADevicesPages_Call) RunAndReturn(run func(*iam.ListMFADevicesInput, func(*iam.ListMFADevicesOutput, bool) bool) error) *MockIAMAPI_ListMFADevicesPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListMFADevicesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListMFADevicesPagesWithContext(_a0 context.Context, _a1 *iam.ListMFADevicesInput, _a2 func(*iam.ListMFADevicesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListMFADevicesInput, func(*iam.ListMFADevicesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListMFADevicesPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMFADevicesPagesWithContext'
type MockIAMAPI_ListMFADevicesPagesWithContext_Call struct {
	*mock.Call
}

// ListMFADevicesPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListMFADevicesInput
//   - _a2 func(*iam.ListMFADevicesOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListMFADevicesPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListMFADevicesPagesWithContext_Call {
	return &MockIAMAPI_ListMFADevicesPagesWithContext_Call{Call: _e.mock.On("ListMFADevicesPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListMFADevicesPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListMFADevicesInput, _a2 func(*iam.ListMFADevicesOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListMFADevicesPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListMFADevicesInput), args[2].(func(*iam.ListMFADevicesOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListMFADevicesPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListMFADevicesPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListMFADevicesPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListMFADevicesInput, func(*iam.ListMFADevicesOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListMFADevicesPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListMFADevicesRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListMFADevicesRequest(_a0 *iam.ListMFADevicesInput) (*request.Request, *iam.ListMFADevicesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListMFADevicesOutput
	if rf, ok := ret.Get(0).(func(*iam.ListMFADevicesInput) (*request.Request, *iam.ListMFADevicesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListMFADevicesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListMFADevicesInput) *iam.ListMFADevicesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListMFADevicesOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListMFADevicesRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMFADevicesRequest'
type MockIAMAPI_ListMFADevicesRequest_Call struct {
	*mock.Call
}

// ListMFADevicesRequest is a helper method to define mock.On call
//   - _a0 *iam.ListMFADevicesInput
func (_e *MockIAMAPI_Expecter) ListMFADevicesRequest(_a0 interface{}) *MockIAMAPI_ListMFADevicesRequest_Call {
	return &MockIAMAPI_ListMFADevicesRequest_Call{Call: _e.mock.On("ListMFADevicesRequest", _a0)}
}

func (_c *MockIAMAPI_ListMFADevicesRequest_Call) Run(run func(_a0 *iam.ListMFADevicesInput)) *MockIAMAPI_ListMFADevicesRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListMFADevicesInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListMFADevicesRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListMFADevicesOutput) *MockIAMAPI_ListMFADevicesRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListMFADevicesRequest_Call) RunAndReturn(run func(*iam.ListMFADevicesInput) (*request.Request, *iam.ListMFADevicesOutput)) *MockIAMAPI_ListMFADevicesRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListMFADevicesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListMFADevicesWithContext(_a0 context.Context, _a1 *iam.ListMFADevicesInput, _a2 ...request.Option) (*iam.ListMFADevicesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListMFADevicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListMFADevicesInput, ...request.Option) (*iam.ListMFADevicesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListMFADevicesInput, ...request.Option) *iam.ListMFADevicesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListMFADevicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListMFADevicesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListMFADevicesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMFADevicesWithContext'
type MockIAMAPI_ListMFADevicesWithContext_Call struct {
	*mock.Call
}

// ListMFADevicesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListMFADevicesInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListMFADevicesWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListMFADevicesWithContext_Call {
	return &MockIAMAPI_ListMFADevicesWithContext_Call{Call: _e.mock.On("ListMFADevicesWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListMFADevicesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListMFADevicesInput, _a2 ...request.Option)) *MockIAMAPI_ListMFADevicesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListMFADevicesInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListMFADevicesWithContext_Call) Return(_a0 *iam.ListMFADevicesOutput, _a1 error) *MockIAMAPI_ListMFADevicesWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListMFADevicesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListMFADevicesInput, ...request.Option) (*iam.ListMFADevicesOutput, error)) *MockIAMAPI_ListMFADevicesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListOpenIDConnectProviderTags provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListOpenIDConnectProviderTags(_a0 *iam.ListOpenIDConnectProviderTagsInput) (*iam.ListOpenIDConnectProviderTagsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListOpenIDConnectProviderTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListOpenIDConnectProviderTagsInput) (*iam.ListOpenIDConnectProviderTagsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListOpenIDConnectProviderTagsInput) *iam.ListOpenIDConnectProviderTagsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListOpenIDConnectProviderTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListOpenIDConnectProviderTagsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListOpenIDConnectProviderTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOpenIDConnectProviderTags'
type MockIAMAPI_ListOpenIDConnectProviderTags_Call struct {
	*mock.Call
}

// ListOpenIDConnectProviderTags is a helper method to define mock.On call
//   - _a0 *iam.ListOpenIDConnectProviderTagsInput
func (_e *MockIAMAPI_Expecter) ListOpenIDConnectProviderTags(_a0 interface{}) *MockIAMAPI_ListOpenIDConnectProviderTags_Call {
	return &MockIAMAPI_ListOpenIDConnectProviderTags_Call{Call: _e.mock.On("ListOpenIDConnectProviderTags", _a0)}
}

func (_c *MockIAMAPI_ListOpenIDConnectProviderTags_Call) Run(run func(_a0 *iam.ListOpenIDConnectProviderTagsInput)) *MockIAMAPI_ListOpenIDConnectProviderTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListOpenIDConnectProviderTagsInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListOpenIDConnectProviderTags_Call) Return(_a0 *iam.ListOpenIDConnectProviderTagsOutput, _a1 error) *MockIAMAPI_ListOpenIDConnectProviderTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListOpenIDConnectProviderTags_Call) RunAndReturn(run func(*iam.ListOpenIDConnectProviderTagsInput) (*iam.ListOpenIDConnectProviderTagsOutput, error)) *MockIAMAPI_ListOpenIDConnectProviderTags_Call {
	_c.Call.Return(run)
	return _c
}

// ListOpenIDConnectProviderTagsPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListOpenIDConnectProviderTagsPages(_a0 *iam.ListOpenIDConnectProviderTagsInput, _a1 func(*iam.ListOpenIDConnectProviderTagsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListOpenIDConnectProviderTagsInput, func(*iam.ListOpenIDConnectProviderTagsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListOpenIDConnectProviderTagsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOpenIDConnectProviderTagsPages'
type MockIAMAPI_ListOpenIDConnectProviderTagsPages_Call struct {
	*mock.Call
}

// ListOpenIDConnectProviderTagsPages is a helper method to define mock.On call
//   - _a0 *iam.ListOpenIDConnectProviderTagsInput
//   - _a1 func(*iam.ListOpenIDConnectProviderTagsOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListOpenIDConnectProviderTagsPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListOpenIDConnectProviderTagsPages_Call {
	return &MockIAMAPI_ListOpenIDConnectProviderTagsPages_Call{Call: _e.mock.On("ListOpenIDConnectProviderTagsPages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListOpenIDConnectProviderTagsPages_Call) Run(run func(_a0 *iam.ListOpenIDConnectProviderTagsInput, _a1 func(*iam.ListOpenIDConnectProviderTagsOutput, bool) bool)) *MockIAMAPI_ListOpenIDConnectProviderTagsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListOpenIDConnectProviderTagsInput), args[1].(func(*iam.ListOpenIDConnectProviderTagsOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListOpenIDConnectProviderTagsPages_Call) Return(_a0 error) *MockIAMAPI_ListOpenIDConnectProviderTagsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListOpenIDConnectProviderTagsPages_Call) RunAndReturn(run func(*iam.ListOpenIDConnectProviderTagsInput, func(*iam.ListOpenIDConnectProviderTagsOutput, bool) bool) error) *MockIAMAPI_ListOpenIDConnectProviderTagsPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListOpenIDConnectProviderTagsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListOpenIDConnectProviderTagsPagesWithContext(_a0 context.Context, _a1 *iam.ListOpenIDConnectProviderTagsInput, _a2 func(*iam.ListOpenIDConnectProviderTagsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListOpenIDConnectProviderTagsInput, func(*iam.ListOpenIDConnectProviderTagsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListOpenIDConnectProviderTagsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOpenIDConnectProviderTagsPagesWithContext'
type MockIAMAPI_ListOpenIDConnectProviderTagsPagesWithContext_Call struct {
	*mock.Call
}

// ListOpenIDConnectProviderTagsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListOpenIDConnectProviderTagsInput
//   - _a2 func(*iam.ListOpenIDConnectProviderTagsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListOpenIDConnectProviderTagsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListOpenIDConnectProviderTagsPagesWithContext_Call {
	return &MockIAMAPI_ListOpenIDConnectProviderTagsPagesWithContext_Call{Call: _e.mock.On("ListOpenIDConnectProviderTagsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListOpenIDConnectProviderTagsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListOpenIDConnectProviderTagsInput, _a2 func(*iam.ListOpenIDConnectProviderTagsOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListOpenIDConnectProviderTagsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListOpenIDConnectProviderTagsInput), args[2].(func(*iam.ListOpenIDConnectProviderTagsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListOpenIDConnectProviderTagsPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListOpenIDConnectProviderTagsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListOpenIDConnectProviderTagsPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListOpenIDConnectProviderTagsInput, func(*iam.ListOpenIDConnectProviderTagsOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListOpenIDConnectProviderTagsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListOpenIDConnectProviderTagsRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListOpenIDConnectProviderTagsRequest(_a0 *iam.ListOpenIDConnectProviderTagsInput) (*request.Request, *iam.ListOpenIDConnectProviderTagsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListOpenIDConnectProviderTagsOutput
	if rf, ok := ret.Get(0).(func(*iam.ListOpenIDConnectProviderTagsInput) (*request.Request, *iam.ListOpenIDConnectProviderTagsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListOpenIDConnectProviderTagsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListOpenIDConnectProviderTagsInput) *iam.ListOpenIDConnectProviderTagsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListOpenIDConnectProviderTagsOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListOpenIDConnectProviderTagsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOpenIDConnectProviderTagsRequest'
type MockIAMAPI_ListOpenIDConnectProviderTagsRequest_Call struct {
	*mock.Call
}

// ListOpenIDConnectProviderTagsRequest is a helper method to define mock.On call
//   - _a0 *iam.ListOpenIDConnectProviderTagsInput
func (_e *MockIAMAPI_Expecter) ListOpenIDConnectProviderTagsRequest(_a0 interface{}) *MockIAMAPI_ListOpenIDConnectProviderTagsRequest_Call {
	return &MockIAMAPI_ListOpenIDConnectProviderTagsRequest_Call{Call: _e.mock.On("ListOpenIDConnectProviderTagsRequest", _a0)}
}

func (_c *MockIAMAPI_ListOpenIDConnectProviderTagsRequest_Call) Run(run func(_a0 *iam.ListOpenIDConnectProviderTagsInput)) *MockIAMAPI_ListOpenIDConnectProviderTagsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListOpenIDConnectProviderTagsInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListOpenIDConnectProviderTagsRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListOpenIDConnectProviderTagsOutput) *MockIAMAPI_ListOpenIDConnectProviderTagsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListOpenIDConnectProviderTagsRequest_Call) RunAndReturn(run func(*iam.ListOpenIDConnectProviderTagsInput) (*request.Request, *iam.ListOpenIDConnectProviderTagsOutput)) *MockIAMAPI_ListOpenIDConnectProviderTagsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListOpenIDConnectProviderTagsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListOpenIDConnectProviderTagsWithContext(_a0 context.Context, _a1 *iam.ListOpenIDConnectProviderTagsInput, _a2 ...request.Option) (*iam.ListOpenIDConnectProviderTagsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListOpenIDConnectProviderTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListOpenIDConnectProviderTagsInput, ...request.Option) (*iam.ListOpenIDConnectProviderTagsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListOpenIDConnectProviderTagsInput, ...request.Option) *iam.ListOpenIDConnectProviderTagsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListOpenIDConnectProviderTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListOpenIDConnectProviderTagsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListOpenIDConnectProviderTagsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOpenIDConnectProviderTagsWithContext'
type MockIAMAPI_ListOpenIDConnectProviderTagsWithContext_Call struct {
	*mock.Call
}

// ListOpenIDConnectProviderTagsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListOpenIDConnectProviderTagsInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListOpenIDConnectProviderTagsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListOpenIDConnectProviderTagsWithContext_Call {
	return &MockIAMAPI_ListOpenIDConnectProviderTagsWithContext_Call{Call: _e.mock.On("ListOpenIDConnectProviderTagsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListOpenIDConnectProviderTagsWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListOpenIDConnectProviderTagsInput, _a2 ...request.Option)) *MockIAMAPI_ListOpenIDConnectProviderTagsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListOpenIDConnectProviderTagsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListOpenIDConnectProviderTagsWithContext_Call) Return(_a0 *iam.ListOpenIDConnectProviderTagsOutput, _a1 error) *MockIAMAPI_ListOpenIDConnectProviderTagsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListOpenIDConnectProviderTagsWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListOpenIDConnectProviderTagsInput, ...request.Option) (*iam.ListOpenIDConnectProviderTagsOutput, error)) *MockIAMAPI_ListOpenIDConnectProviderTagsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListOpenIDConnectProviders provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListOpenIDConnectProviders(_a0 *iam.ListOpenIDConnectProvidersInput) (*iam.ListOpenIDConnectProvidersOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListOpenIDConnectProvidersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListOpenIDConnectProvidersInput) (*iam.ListOpenIDConnectProvidersOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListOpenIDConnectProvidersInput) *iam.ListOpenIDConnectProvidersOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListOpenIDConnectProvidersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListOpenIDConnectProvidersInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListOpenIDConnectProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOpenIDConnectProviders'
type MockIAMAPI_ListOpenIDConnectProviders_Call struct {
	*mock.Call
}

// ListOpenIDConnectProviders is a helper method to define mock.On call
//   - _a0 *iam.ListOpenIDConnectProvidersInput
func (_e *MockIAMAPI_Expecter) ListOpenIDConnectProviders(_a0 interface{}) *MockIAMAPI_ListOpenIDConnectProviders_Call {
	return &MockIAMAPI_ListOpenIDConnectProviders_Call{Call: _e.mock.On("ListOpenIDConnectProviders", _a0)}
}

func (_c *MockIAMAPI_ListOpenIDConnectProviders_Call) Run(run func(_a0 *iam.ListOpenIDConnectProvidersInput)) *MockIAMAPI_ListOpenIDConnectProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListOpenIDConnectProvidersInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListOpenIDConnectProviders_Call) Return(_a0 *iam.ListOpenIDConnectProvidersOutput, _a1 error) *MockIAMAPI_ListOpenIDConnectProviders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListOpenIDConnectProviders_Call) RunAndReturn(run func(*iam.ListOpenIDConnectProvidersInput) (*iam.ListOpenIDConnectProvidersOutput, error)) *MockIAMAPI_ListOpenIDConnectProviders_Call {
	_c.Call.Return(run)
	return _c
}

// ListOpenIDConnectProvidersRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListOpenIDConnectProvidersRequest(_a0 *iam.ListOpenIDConnectProvidersInput) (*request.Request, *iam.ListOpenIDConnectProvidersOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListOpenIDConnectProvidersOutput
	if rf, ok := ret.Get(0).(func(*iam.ListOpenIDConnectProvidersInput) (*request.Request, *iam.ListOpenIDConnectProvidersOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListOpenIDConnectProvidersInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListOpenIDConnectProvidersInput) *iam.ListOpenIDConnectProvidersOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListOpenIDConnectProvidersOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListOpenIDConnectProvidersRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOpenIDConnectProvidersRequest'
type MockIAMAPI_ListOpenIDConnectProvidersRequest_Call struct {
	*mock.Call
}

// ListOpenIDConnectProvidersRequest is a helper method to define mock.On call
//   - _a0 *iam.ListOpenIDConnectProvidersInput
func (_e *MockIAMAPI_Expecter) ListOpenIDConnectProvidersRequest(_a0 interface{}) *MockIAMAPI_ListOpenIDConnectProvidersRequest_Call {
	return &MockIAMAPI_ListOpenIDConnectProvidersRequest_Call{Call: _e.mock.On("ListOpenIDConnectProvidersRequest", _a0)}
}

func (_c *MockIAMAPI_ListOpenIDConnectProvidersRequest_Call) Run(run func(_a0 *iam.ListOpenIDConnectProvidersInput)) *MockIAMAPI_ListOpenIDConnectProvidersRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListOpenIDConnectProvidersInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListOpenIDConnectProvidersRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListOpenIDConnectProvidersOutput) *MockIAMAPI_ListOpenIDConnectProvidersRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListOpenIDConnectProvidersRequest_Call) RunAndReturn(run func(*iam.ListOpenIDConnectProvidersInput) (*request.Request, *iam.ListOpenIDConnectProvidersOutput)) *MockIAMAPI_ListOpenIDConnectProvidersRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListOpenIDConnectProvidersWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListOpenIDConnectProvidersWithContext(_a0 context.Context, _a1 *iam.ListOpenIDConnectProvidersInput, _a2 ...request.Option) (*iam.ListOpenIDConnectProvidersOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListOpenIDConnectProvidersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListOpenIDConnectProvidersInput, ...request.Option) (*iam.ListOpenIDConnectProvidersOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListOpenIDConnectProvidersInput, ...request.Option) *iam.ListOpenIDConnectProvidersOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListOpenIDConnectProvidersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListOpenIDConnectProvidersInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListOpenIDConnectProvidersWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOpenIDConnectProvidersWithContext'
type MockIAMAPI_ListOpenIDConnectProvidersWithContext_Call struct {
	*mock.Call
}

// ListOpenIDConnectProvidersWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListOpenIDConnectProvidersInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListOpenIDConnectProvidersWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListOpenIDConnectProvidersWithContext_Call {
	return &MockIAMAPI_ListOpenIDConnectProvidersWithContext_Call{Call: _e.mock.On("ListOpenIDConnectProvidersWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListOpenIDConnectProvidersWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListOpenIDConnectProvidersInput, _a2 ...request.Option)) *MockIAMAPI_ListOpenIDConnectProvidersWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListOpenIDConnectProvidersInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListOpenIDConnectProvidersWithContext_Call) Return(_a0 *iam.ListOpenIDConnectProvidersOutput, _a1 error) *MockIAMAPI_ListOpenIDConnectProvidersWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListOpenIDConnectProvidersWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListOpenIDConnectProvidersInput, ...request.Option) (*iam.ListOpenIDConnectProvidersOutput, error)) *MockIAMAPI_ListOpenIDConnectProvidersWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListPolicies provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListPolicies(_a0 *iam.ListPoliciesInput) (*iam.ListPoliciesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListPoliciesInput) (*iam.ListPoliciesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListPoliciesInput) *iam.ListPoliciesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListPoliciesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPolicies'
type MockIAMAPI_ListPolicies_Call struct {
	*mock.Call
}

// ListPolicies is a helper method to define mock.On call
//   - _a0 *iam.ListPoliciesInput
func (_e *MockIAMAPI_Expecter) ListPolicies(_a0 interface{}) *MockIAMAPI_ListPolicies_Call {
	return &MockIAMAPI_ListPolicies_Call{Call: _e.mock.On("ListPolicies", _a0)}
}

func (_c *MockIAMAPI_ListPolicies_Call) Run(run func(_a0 *iam.ListPoliciesInput)) *MockIAMAPI_ListPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListPoliciesInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListPolicies_Call) Return(_a0 *iam.ListPoliciesOutput, _a1 error) *MockIAMAPI_ListPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListPolicies_Call) RunAndReturn(run func(*iam.ListPoliciesInput) (*iam.ListPoliciesOutput, error)) *MockIAMAPI_ListPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// ListPoliciesGrantingServiceAccess provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListPoliciesGrantingServiceAccess(_a0 *iam.ListPoliciesGrantingServiceAccessInput) (*iam.ListPoliciesGrantingServiceAccessOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListPoliciesGrantingServiceAccessOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListPoliciesGrantingServiceAccessInput) (*iam.ListPoliciesGrantingServiceAccessOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListPoliciesGrantingServiceAccessInput) *iam.ListPoliciesGrantingServiceAccessOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListPoliciesGrantingServiceAccessOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListPoliciesGrantingServiceAccessInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListPoliciesGrantingServiceAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPoliciesGrantingServiceAccess'
type MockIAMAPI_ListPoliciesGrantingServiceAccess_Call struct {
	*mock.Call
}

// ListPoliciesGrantingServiceAccess is a helper method to define mock.On call
//   - _a0 *iam.ListPoliciesGrantingServiceAccessInput
func (_e *MockIAMAPI_Expecter) ListPoliciesGrantingServiceAccess(_a0 interface{}) *MockIAMAPI_ListPoliciesGrantingServiceAccess_Call {
	return &MockIAMAPI_ListPoliciesGrantingServiceAccess_Call{Call: _e.mock.On("ListPoliciesGrantingServiceAccess", _a0)}
}

func (_c *MockIAMAPI_ListPoliciesGrantingServiceAccess_Call) Run(run func(_a0 *iam.ListPoliciesGrantingServiceAccessInput)) *MockIAMAPI_ListPoliciesGrantingServiceAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListPoliciesGrantingServiceAccessInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListPoliciesGrantingServiceAccess_Call) Return(_a0 *iam.ListPoliciesGrantingServiceAccessOutput, _a1 error) *MockIAMAPI_ListPoliciesGrantingServiceAccess_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListPoliciesGrantingServiceAccess_Call) RunAndReturn(run func(*iam.ListPoliciesGrantingServiceAccessInput) (*iam.ListPoliciesGrantingServiceAccessOutput, error)) *MockIAMAPI_ListPoliciesGrantingServiceAccess_Call {
	_c.Call.Return(run)
	return _c
}

// ListPoliciesGrantingServiceAccessRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListPoliciesGrantingServiceAccessRequest(_a0 *iam.ListPoliciesGrantingServiceAccessInput) (*request.Request, *iam.ListPoliciesGrantingServiceAccessOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListPoliciesGrantingServiceAccessOutput
	if rf, ok := ret.Get(0).(func(*iam.ListPoliciesGrantingServiceAccessInput) (*request.Request, *iam.ListPoliciesGrantingServiceAccessOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListPoliciesGrantingServiceAccessInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListPoliciesGrantingServiceAccessInput) *iam.ListPoliciesGrantingServiceAccessOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListPoliciesGrantingServiceAccessOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListPoliciesGrantingServiceAccessRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPoliciesGrantingServiceAccessRequest'
type MockIAMAPI_ListPoliciesGrantingServiceAccessRequest_Call struct {
	*mock.Call
}

// ListPoliciesGrantingServiceAccessRequest is a helper method to define mock.On call
//   - _a0 *iam.ListPoliciesGrantingServiceAccessInput
func (_e *MockIAMAPI_Expecter) ListPoliciesGrantingServiceAccessRequest(_a0 interface{}) *MockIAMAPI_ListPoliciesGrantingServiceAccessRequest_Call {
	return &MockIAMAPI_ListPoliciesGrantingServiceAccessRequest_Call{Call: _e.mock.On("ListPoliciesGrantingServiceAccessRequest", _a0)}
}

func (_c *MockIAMAPI_ListPoliciesGrantingServiceAccessRequest_Call) Run(run func(_a0 *iam.ListPoliciesGrantingServiceAccessInput)) *MockIAMAPI_ListPoliciesGrantingServiceAccessRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListPoliciesGrantingServiceAccessInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListPoliciesGrantingServiceAccessRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListPoliciesGrantingServiceAccessOutput) *MockIAMAPI_ListPoliciesGrantingServiceAccessRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListPoliciesGrantingServiceAccessRequest_Call) RunAndReturn(run func(*iam.ListPoliciesGrantingServiceAccessInput) (*request.Request, *iam.ListPoliciesGrantingServiceAccessOutput)) *MockIAMAPI_ListPoliciesGrantingServiceAccessRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListPoliciesGrantingServiceAccessWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListPoliciesGrantingServiceAccessWithContext(_a0 context.Context, _a1 *iam.ListPoliciesGrantingServiceAccessInput, _a2 ...request.Option) (*iam.ListPoliciesGrantingServiceAccessOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListPoliciesGrantingServiceAccessOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListPoliciesGrantingServiceAccessInput, ...request.Option) (*iam.ListPoliciesGrantingServiceAccessOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListPoliciesGrantingServiceAccessInput, ...request.Option) *iam.ListPoliciesGrantingServiceAccessOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListPoliciesGrantingServiceAccessOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListPoliciesGrantingServiceAccessInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListPoliciesGrantingServiceAccessWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPoliciesGrantingServiceAccessWithContext'
type MockIAMAPI_ListPoliciesGrantingServiceAccessWithContext_Call struct {
	*mock.Call
}

// ListPoliciesGrantingServiceAccessWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListPoliciesGrantingServiceAccessInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListPoliciesGrantingServiceAccessWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListPoliciesGrantingServiceAccessWithContext_Call {
	return &MockIAMAPI_ListPoliciesGrantingServiceAccessWithContext_Call{Call: _e.mock.On("ListPoliciesGrantingServiceAccessWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListPoliciesGrantingServiceAccessWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListPoliciesGrantingServiceAccessInput, _a2 ...request.Option)) *MockIAMAPI_ListPoliciesGrantingServiceAccessWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListPoliciesGrantingServiceAccessInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListPoliciesGrantingServiceAccessWithContext_Call) Return(_a0 *iam.ListPoliciesGrantingServiceAccessOutput, _a1 error) *MockIAMAPI_ListPoliciesGrantingServiceAccessWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListPoliciesGrantingServiceAccessWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListPoliciesGrantingServiceAccessInput, ...request.Option) (*iam.ListPoliciesGrantingServiceAccessOutput, error)) *MockIAMAPI_ListPoliciesGrantingServiceAccessWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListPoliciesPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListPoliciesPages(_a0 *iam.ListPoliciesInput, _a1 func(*iam.ListPoliciesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListPoliciesInput, func(*iam.ListPoliciesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListPoliciesPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPoliciesPages'
type MockIAMAPI_ListPoliciesPages_Call struct {
	*mock.Call
}

// ListPoliciesPages is a helper method to define mock.On call
//   - _a0 *iam.ListPoliciesInput
//   - _a1 func(*iam.ListPoliciesOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListPoliciesPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListPoliciesPages_Call {
	return &MockIAMAPI_ListPoliciesPages_Call{Call: _e.mock.On("ListPoliciesPages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListPoliciesPages_Call) Run(run func(_a0 *iam.ListPoliciesInput, _a1 func(*iam.ListPoliciesOutput, bool) bool)) *MockIAMAPI_ListPoliciesPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListPoliciesInput), args[1].(func(*iam.ListPoliciesOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListPoliciesPages_Call) Return(_a0 error) *MockIAMAPI_ListPoliciesPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListPoliciesPages_Call) RunAndReturn(run func(*iam.ListPoliciesInput, func(*iam.ListPoliciesOutput, bool) bool) error) *MockIAMAPI_ListPoliciesPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListPoliciesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListPoliciesPagesWithContext(_a0 context.Context, _a1 *iam.ListPoliciesInput, _a2 func(*iam.ListPoliciesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListPoliciesInput, func(*iam.ListPoliciesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListPoliciesPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPoliciesPagesWithContext'
type MockIAMAPI_ListPoliciesPagesWithContext_Call struct {
	*mock.Call
}

// ListPoliciesPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListPoliciesInput
//   - _a2 func(*iam.ListPoliciesOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListPoliciesPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListPoliciesPagesWithContext_Call {
	return &MockIAMAPI_ListPoliciesPagesWithContext_Call{Call: _e.mock.On("ListPoliciesPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListPoliciesPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListPoliciesInput, _a2 func(*iam.ListPoliciesOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListPoliciesPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListPoliciesInput), args[2].(func(*iam.ListPoliciesOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListPoliciesPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListPoliciesPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListPoliciesPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListPoliciesInput, func(*iam.ListPoliciesOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListPoliciesPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListPoliciesRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListPoliciesRequest(_a0 *iam.ListPoliciesInput) (*request.Request, *iam.ListPoliciesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListPoliciesOutput
	if rf, ok := ret.Get(0).(func(*iam.ListPoliciesInput) (*request.Request, *iam.ListPoliciesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListPoliciesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListPoliciesInput) *iam.ListPoliciesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListPoliciesOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListPoliciesRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPoliciesRequest'
type MockIAMAPI_ListPoliciesRequest_Call struct {
	*mock.Call
}

// ListPoliciesRequest is a helper method to define mock.On call
//   - _a0 *iam.ListPoliciesInput
func (_e *MockIAMAPI_Expecter) ListPoliciesRequest(_a0 interface{}) *MockIAMAPI_ListPoliciesRequest_Call {
	return &MockIAMAPI_ListPoliciesRequest_Call{Call: _e.mock.On("ListPoliciesRequest", _a0)}
}

func (_c *MockIAMAPI_ListPoliciesRequest_Call) Run(run func(_a0 *iam.ListPoliciesInput)) *MockIAMAPI_ListPoliciesRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListPoliciesInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListPoliciesRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListPoliciesOutput) *MockIAMAPI_ListPoliciesRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListPoliciesRequest_Call) RunAndReturn(run func(*iam.ListPoliciesInput) (*request.Request, *iam.ListPoliciesOutput)) *MockIAMAPI_ListPoliciesRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListPoliciesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListPoliciesWithContext(_a0 context.Context, _a1 *iam.ListPoliciesInput, _a2 ...request.Option) (*iam.ListPoliciesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListPoliciesInput, ...request.Option) (*iam.ListPoliciesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListPoliciesInput, ...request.Option) *iam.ListPoliciesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListPoliciesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListPoliciesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPoliciesWithContext'
type MockIAMAPI_ListPoliciesWithContext_Call struct {
	*mock.Call
}

// ListPoliciesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListPoliciesInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListPoliciesWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListPoliciesWithContext_Call {
	return &MockIAMAPI_ListPoliciesWithContext_Call{Call: _e.mock.On("ListPoliciesWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListPoliciesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListPoliciesInput, _a2 ...request.Option)) *MockIAMAPI_ListPoliciesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListPoliciesInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListPoliciesWithContext_Call) Return(_a0 *iam.ListPoliciesOutput, _a1 error) *MockIAMAPI_ListPoliciesWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListPoliciesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListPoliciesInput, ...request.Option) (*iam.ListPoliciesOutput, error)) *MockIAMAPI_ListPoliciesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListPolicyTags provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListPolicyTags(_a0 *iam.ListPolicyTagsInput) (*iam.ListPolicyTagsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListPolicyTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListPolicyTagsInput) (*iam.ListPolicyTagsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListPolicyTagsInput) *iam.ListPolicyTagsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListPolicyTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListPolicyTagsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListPolicyTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPolicyTags'
type MockIAMAPI_ListPolicyTags_Call struct {
	*mock.Call
}

// ListPolicyTags is a helper method to define mock.On call
//   - _a0 *iam.ListPolicyTagsInput
func (_e *MockIAMAPI_Expecter) ListPolicyTags(_a0 interface{}) *MockIAMAPI_ListPolicyTags_Call {
	return &MockIAMAPI_ListPolicyTags_Call{Call: _e.mock.On("ListPolicyTags", _a0)}
}

func (_c *MockIAMAPI_ListPolicyTags_Call) Run(run func(_a0 *iam.ListPolicyTagsInput)) *MockIAMAPI_ListPolicyTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListPolicyTagsInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListPolicyTags_Call) Return(_a0 *iam.ListPolicyTagsOutput, _a1 error) *MockIAMAPI_ListPolicyTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListPolicyTags_Call) RunAndReturn(run func(*iam.ListPolicyTagsInput) (*iam.ListPolicyTagsOutput, error)) *MockIAMAPI_ListPolicyTags_Call {
	_c.Call.Return(run)
	return _c
}

// ListPolicyTagsPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListPolicyTagsPages(_a0 *iam.ListPolicyTagsInput, _a1 func(*iam.ListPolicyTagsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListPolicyTagsInput, func(*iam.ListPolicyTagsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListPolicyTagsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPolicyTagsPages'
type MockIAMAPI_ListPolicyTagsPages_Call struct {
	*mock.Call
}

// ListPolicyTagsPages is a helper method to define mock.On call
//   - _a0 *iam.ListPolicyTagsInput
//   - _a1 func(*iam.ListPolicyTagsOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListPolicyTagsPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListPolicyTagsPages_Call {
	return &MockIAMAPI_ListPolicyTagsPages_Call{Call: _e.mock.On("ListPolicyTagsPages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListPolicyTagsPages_Call) Run(run func(_a0 *iam.ListPolicyTagsInput, _a1 func(*iam.ListPolicyTagsOutput, bool) bool)) *MockIAMAPI_ListPolicyTagsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListPolicyTagsInput), args[1].(func(*iam.ListPolicyTagsOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListPolicyTagsPages_Call) Return(_a0 error) *MockIAMAPI_ListPolicyTagsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListPolicyTagsPages_Call) RunAndReturn(run func(*iam.ListPolicyTagsInput, func(*iam.ListPolicyTagsOutput, bool) bool) error) *MockIAMAPI_ListPolicyTagsPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListPolicyTagsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListPolicyTagsPagesWithContext(_a0 context.Context, _a1 *iam.ListPolicyTagsInput, _a2 func(*iam.ListPolicyTagsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListPolicyTagsInput, func(*iam.ListPolicyTagsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListPolicyTagsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPolicyTagsPagesWithContext'
type MockIAMAPI_ListPolicyTagsPagesWithContext_Call struct {
	*mock.Call
}

// ListPolicyTagsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListPolicyTagsInput
//   - _a2 func(*iam.ListPolicyTagsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListPolicyTagsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListPolicyTagsPagesWithContext_Call {
	return &MockIAMAPI_ListPolicyTagsPagesWithContext_Call{Call: _e.mock.On("ListPolicyTagsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListPolicyTagsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListPolicyTagsInput, _a2 func(*iam.ListPolicyTagsOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListPolicyTagsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListPolicyTagsInput), args[2].(func(*iam.ListPolicyTagsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListPolicyTagsPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListPolicyTagsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListPolicyTagsPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListPolicyTagsInput, func(*iam.ListPolicyTagsOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListPolicyTagsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListPolicyTagsRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListPolicyTagsRequest(_a0 *iam.ListPolicyTagsInput) (*request.Request, *iam.ListPolicyTagsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListPolicyTagsOutput
	if rf, ok := ret.Get(0).(func(*iam.ListPolicyTagsInput) (*request.Request, *iam.ListPolicyTagsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListPolicyTagsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListPolicyTagsInput) *iam.ListPolicyTagsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListPolicyTagsOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListPolicyTagsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPolicyTagsRequest'
type MockIAMAPI_ListPolicyTagsRequest_Call struct {
	*mock.Call
}

// ListPolicyTagsRequest is a helper method to define mock.On call
//   - _a0 *iam.ListPolicyTagsInput
func (_e *MockIAMAPI_Expecter) ListPolicyTagsRequest(_a0 interface{}) *MockIAMAPI_ListPolicyTagsRequest_Call {
	return &MockIAMAPI_ListPolicyTagsRequest_Call{Call: _e.mock.On("ListPolicyTagsRequest", _a0)}
}

func (_c *MockIAMAPI_ListPolicyTagsRequest_Call) Run(run func(_a0 *iam.ListPolicyTagsInput)) *MockIAMAPI_ListPolicyTagsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListPolicyTagsInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListPolicyTagsRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListPolicyTagsOutput) *MockIAMAPI_ListPolicyTagsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListPolicyTagsRequest_Call) RunAndReturn(run func(*iam.ListPolicyTagsInput) (*request.Request, *iam.ListPolicyTagsOutput)) *MockIAMAPI_ListPolicyTagsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListPolicyTagsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListPolicyTagsWithContext(_a0 context.Context, _a1 *iam.ListPolicyTagsInput, _a2 ...request.Option) (*iam.ListPolicyTagsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListPolicyTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListPolicyTagsInput, ...request.Option) (*iam.ListPolicyTagsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListPolicyTagsInput, ...request.Option) *iam.ListPolicyTagsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListPolicyTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListPolicyTagsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListPolicyTagsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPolicyTagsWithContext'
type MockIAMAPI_ListPolicyTagsWithContext_Call struct {
	*mock.Call
}

// ListPolicyTagsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListPolicyTagsInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListPolicyTagsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListPolicyTagsWithContext_Call {
	return &MockIAMAPI_ListPolicyTagsWithContext_Call{Call: _e.mock.On("ListPolicyTagsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListPolicyTagsWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListPolicyTagsInput, _a2 ...request.Option)) *MockIAMAPI_ListPolicyTagsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListPolicyTagsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListPolicyTagsWithContext_Call) Return(_a0 *iam.ListPolicyTagsOutput, _a1 error) *MockIAMAPI_ListPolicyTagsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListPolicyTagsWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListPolicyTagsInput, ...request.Option) (*iam.ListPolicyTagsOutput, error)) *MockIAMAPI_ListPolicyTagsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListPolicyVersions provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListPolicyVersions(_a0 *iam.ListPolicyVersionsInput) (*iam.ListPolicyVersionsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListPolicyVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListPolicyVersionsInput) (*iam.ListPolicyVersionsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListPolicyVersionsInput) *iam.ListPolicyVersionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListPolicyVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListPolicyVersionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListPolicyVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPolicyVersions'
type MockIAMAPI_ListPolicyVersions_Call struct {
	*mock.Call
}

// ListPolicyVersions is a helper method to define mock.On call
//   - _a0 *iam.ListPolicyVersionsInput
func (_e *MockIAMAPI_Expecter) ListPolicyVersions(_a0 interface{}) *MockIAMAPI_ListPolicyVersions_Call {
	return &MockIAMAPI_ListPolicyVersions_Call{Call: _e.mock.On("ListPolicyVersions", _a0)}
}

func (_c *MockIAMAPI_ListPolicyVersions_Call) Run(run func(_a0 *iam.ListPolicyVersionsInput)) *MockIAMAPI_ListPolicyVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListPolicyVersionsInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListPolicyVersions_Call) Return(_a0 *iam.ListPolicyVersionsOutput, _a1 error) *MockIAMAPI_ListPolicyVersions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListPolicyVersions_Call) RunAndReturn(run func(*iam.ListPolicyVersionsInput) (*iam.ListPolicyVersionsOutput, error)) *MockIAMAPI_ListPolicyVersions_Call {
	_c.Call.Return(run)
	return _c
}

// ListPolicyVersionsPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListPolicyVersionsPages(_a0 *iam.ListPolicyVersionsInput, _a1 func(*iam.ListPolicyVersionsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListPolicyVersionsInput, func(*iam.ListPolicyVersionsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListPolicyVersionsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPolicyVersionsPages'
type MockIAMAPI_ListPolicyVersionsPages_Call struct {
	*mock.Call
}

// ListPolicyVersionsPages is a helper method to define mock.On call
//   - _a0 *iam.ListPolicyVersionsInput
//   - _a1 func(*iam.ListPolicyVersionsOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListPolicyVersionsPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListPolicyVersionsPages_Call {
	return &MockIAMAPI_ListPolicyVersionsPages_Call{Call: _e.mock.On("ListPolicyVersionsPages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListPolicyVersionsPages_Call) Run(run func(_a0 *iam.ListPolicyVersionsInput, _a1 func(*iam.ListPolicyVersionsOutput, bool) bool)) *MockIAMAPI_ListPolicyVersionsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListPolicyVersionsInput), args[1].(func(*iam.ListPolicyVersionsOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListPolicyVersionsPages_Call) Return(_a0 error) *MockIAMAPI_ListPolicyVersionsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListPolicyVersionsPages_Call) RunAndReturn(run func(*iam.ListPolicyVersionsInput, func(*iam.ListPolicyVersionsOutput, bool) bool) error) *MockIAMAPI_ListPolicyVersionsPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListPolicyVersionsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListPolicyVersionsPagesWithContext(_a0 context.Context, _a1 *iam.ListPolicyVersionsInput, _a2 func(*iam.ListPolicyVersionsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListPolicyVersionsInput, func(*iam.ListPolicyVersionsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListPolicyVersionsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPolicyVersionsPagesWithContext'
type MockIAMAPI_ListPolicyVersionsPagesWithContext_Call struct {
	*mock.Call
}

// ListPolicyVersionsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListPolicyVersionsInput
//   - _a2 func(*iam.ListPolicyVersionsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListPolicyVersionsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListPolicyVersionsPagesWithContext_Call {
	return &MockIAMAPI_ListPolicyVersionsPagesWithContext_Call{Call: _e.mock.On("ListPolicyVersionsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListPolicyVersionsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListPolicyVersionsInput, _a2 func(*iam.ListPolicyVersionsOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListPolicyVersionsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListPolicyVersionsInput), args[2].(func(*iam.ListPolicyVersionsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListPolicyVersionsPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListPolicyVersionsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListPolicyVersionsPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListPolicyVersionsInput, func(*iam.ListPolicyVersionsOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListPolicyVersionsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListPolicyVersionsRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListPolicyVersionsRequest(_a0 *iam.ListPolicyVersionsInput) (*request.Request, *iam.ListPolicyVersionsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListPolicyVersionsOutput
	if rf, ok := ret.Get(0).(func(*iam.ListPolicyVersionsInput) (*request.Request, *iam.ListPolicyVersionsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListPolicyVersionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListPolicyVersionsInput) *iam.ListPolicyVersionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListPolicyVersionsOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListPolicyVersionsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPolicyVersionsRequest'
type MockIAMAPI_ListPolicyVersionsRequest_Call struct {
	*mock.Call
}

// ListPolicyVersionsRequest is a helper method to define mock.On call
//   - _a0 *iam.ListPolicyVersionsInput
func (_e *MockIAMAPI_Expecter) ListPolicyVersionsRequest(_a0 interface{}) *MockIAMAPI_ListPolicyVersionsRequest_Call {
	return &MockIAMAPI_ListPolicyVersionsRequest_Call{Call: _e.mock.On("ListPolicyVersionsRequest", _a0)}
}

func (_c *MockIAMAPI_ListPolicyVersionsRequest_Call) Run(run func(_a0 *iam.ListPolicyVersionsInput)) *MockIAMAPI_ListPolicyVersionsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListPolicyVersionsInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListPolicyVersionsRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListPolicyVersionsOutput) *MockIAMAPI_ListPolicyVersionsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListPolicyVersionsRequest_Call) RunAndReturn(run func(*iam.ListPolicyVersionsInput) (*request.Request, *iam.ListPolicyVersionsOutput)) *MockIAMAPI_ListPolicyVersionsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListPolicyVersionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListPolicyVersionsWithContext(_a0 context.Context, _a1 *iam.ListPolicyVersionsInput, _a2 ...request.Option) (*iam.ListPolicyVersionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListPolicyVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListPolicyVersionsInput, ...request.Option) (*iam.ListPolicyVersionsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListPolicyVersionsInput, ...request.Option) *iam.ListPolicyVersionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListPolicyVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListPolicyVersionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListPolicyVersionsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPolicyVersionsWithContext'
type MockIAMAPI_ListPolicyVersionsWithContext_Call struct {
	*mock.Call
}

// ListPolicyVersionsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListPolicyVersionsInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListPolicyVersionsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListPolicyVersionsWithContext_Call {
	return &MockIAMAPI_ListPolicyVersionsWithContext_Call{Call: _e.mock.On("ListPolicyVersionsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListPolicyVersionsWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListPolicyVersionsInput, _a2 ...request.Option)) *MockIAMAPI_ListPolicyVersionsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListPolicyVersionsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListPolicyVersionsWithContext_Call) Return(_a0 *iam.ListPolicyVersionsOutput, _a1 error) *MockIAMAPI_ListPolicyVersionsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListPolicyVersionsWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListPolicyVersionsInput, ...request.Option) (*iam.ListPolicyVersionsOutput, error)) *MockIAMAPI_ListPolicyVersionsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListRolePolicies provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListRolePolicies(_a0 *iam.ListRolePoliciesInput) (*iam.ListRolePoliciesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListRolePoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListRolePoliciesInput) (*iam.ListRolePoliciesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListRolePoliciesInput) *iam.ListRolePoliciesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListRolePoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListRolePoliciesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListRolePolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRolePolicies'
type MockIAMAPI_ListRolePolicies_Call struct {
	*mock.Call
}

// ListRolePolicies is a helper method to define mock.On call
//   - _a0 *iam.ListRolePoliciesInput
func (_e *MockIAMAPI_Expecter) ListRolePolicies(_a0 interface{}) *MockIAMAPI_ListRolePolicies_Call {
	return &MockIAMAPI_ListRolePolicies_Call{Call: _e.mock.On("ListRolePolicies", _a0)}
}

func (_c *MockIAMAPI_ListRolePolicies_Call) Run(run func(_a0 *iam.ListRolePoliciesInput)) *MockIAMAPI_ListRolePolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListRolePoliciesInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListRolePolicies_Call) Return(_a0 *iam.ListRolePoliciesOutput, _a1 error) *MockIAMAPI_ListRolePolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListRolePolicies_Call) RunAndReturn(run func(*iam.ListRolePoliciesInput) (*iam.ListRolePoliciesOutput, error)) *MockIAMAPI_ListRolePolicies_Call {
	_c.Call.Return(run)
	return _c
}

// ListRolePoliciesPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListRolePoliciesPages(_a0 *iam.ListRolePoliciesInput, _a1 func(*iam.ListRolePoliciesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListRolePoliciesInput, func(*iam.ListRolePoliciesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListRolePoliciesPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRolePoliciesPages'
type MockIAMAPI_ListRolePoliciesPages_Call struct {
	*mock.Call
}

// ListRolePoliciesPages is a helper method to define mock.On call
//   - _a0 *iam.ListRolePoliciesInput
//   - _a1 func(*iam.ListRolePoliciesOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListRolePoliciesPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListRolePoliciesPages_Call {
	return &MockIAMAPI_ListRolePoliciesPages_Call{Call: _e.mock.On("ListRolePoliciesPages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListRolePoliciesPages_Call) Run(run func(_a0 *iam.ListRolePoliciesInput, _a1 func(*iam.ListRolePoliciesOutput, bool) bool)) *MockIAMAPI_ListRolePoliciesPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListRolePoliciesInput), args[1].(func(*iam.ListRolePoliciesOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListRolePoliciesPages_Call) Return(_a0 error) *MockIAMAPI_ListRolePoliciesPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListRolePoliciesPages_Call) RunAndReturn(run func(*iam.ListRolePoliciesInput, func(*iam.ListRolePoliciesOutput, bool) bool) error) *MockIAMAPI_ListRolePoliciesPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListRolePoliciesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListRolePoliciesPagesWithContext(_a0 context.Context, _a1 *iam.ListRolePoliciesInput, _a2 func(*iam.ListRolePoliciesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListRolePoliciesInput, func(*iam.ListRolePoliciesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListRolePoliciesPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRolePoliciesPagesWithContext'
type MockIAMAPI_ListRolePoliciesPagesWithContext_Call struct {
	*mock.Call
}

// ListRolePoliciesPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListRolePoliciesInput
//   - _a2 func(*iam.ListRolePoliciesOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListRolePoliciesPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListRolePoliciesPagesWithContext_Call {
	return &MockIAMAPI_ListRolePoliciesPagesWithContext_Call{Call: _e.mock.On("ListRolePoliciesPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListRolePoliciesPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListRolePoliciesInput, _a2 func(*iam.ListRolePoliciesOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListRolePoliciesPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListRolePoliciesInput), args[2].(func(*iam.ListRolePoliciesOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListRolePoliciesPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListRolePoliciesPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListRolePoliciesPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListRolePoliciesInput, func(*iam.ListRolePoliciesOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListRolePoliciesPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListRolePoliciesRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListRolePoliciesRequest(_a0 *iam.ListRolePoliciesInput) (*request.Request, *iam.ListRolePoliciesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListRolePoliciesOutput
	if rf, ok := ret.Get(0).(func(*iam.ListRolePoliciesInput) (*request.Request, *iam.ListRolePoliciesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListRolePoliciesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListRolePoliciesInput) *iam.ListRolePoliciesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListRolePoliciesOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListRolePoliciesRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRolePoliciesRequest'
type MockIAMAPI_ListRolePoliciesRequest_Call struct {
	*mock.Call
}

// ListRolePoliciesRequest is a helper method to define mock.On call
//   - _a0 *iam.ListRolePoliciesInput
func (_e *MockIAMAPI_Expecter) ListRolePoliciesRequest(_a0 interface{}) *MockIAMAPI_ListRolePoliciesRequest_Call {
	return &MockIAMAPI_ListRolePoliciesRequest_Call{Call: _e.mock.On("ListRolePoliciesRequest", _a0)}
}

func (_c *MockIAMAPI_ListRolePoliciesRequest_Call) Run(run func(_a0 *iam.ListRolePoliciesInput)) *MockIAMAPI_ListRolePoliciesRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListRolePoliciesInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListRolePoliciesRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListRolePoliciesOutput) *MockIAMAPI_ListRolePoliciesRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListRolePoliciesRequest_Call) RunAndReturn(run func(*iam.ListRolePoliciesInput) (*request.Request, *iam.ListRolePoliciesOutput)) *MockIAMAPI_ListRolePoliciesRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListRolePoliciesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListRolePoliciesWithContext(_a0 context.Context, _a1 *iam.ListRolePoliciesInput, _a2 ...request.Option) (*iam.ListRolePoliciesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListRolePoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListRolePoliciesInput, ...request.Option) (*iam.ListRolePoliciesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListRolePoliciesInput, ...request.Option) *iam.ListRolePoliciesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListRolePoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListRolePoliciesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListRolePoliciesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRolePoliciesWithContext'
type MockIAMAPI_ListRolePoliciesWithContext_Call struct {
	*mock.Call
}

// ListRolePoliciesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListRolePoliciesInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListRolePoliciesWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListRolePoliciesWithContext_Call {
	return &MockIAMAPI_ListRolePoliciesWithContext_Call{Call: _e.mock.On("ListRolePoliciesWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListRolePoliciesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListRolePoliciesInput, _a2 ...request.Option)) *MockIAMAPI_ListRolePoliciesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListRolePoliciesInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListRolePoliciesWithContext_Call) Return(_a0 *iam.ListRolePoliciesOutput, _a1 error) *MockIAMAPI_ListRolePoliciesWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListRolePoliciesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListRolePoliciesInput, ...request.Option) (*iam.ListRolePoliciesOutput, error)) *MockIAMAPI_ListRolePoliciesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListRoleTags provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListRoleTags(_a0 *iam.ListRoleTagsInput) (*iam.ListRoleTagsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListRoleTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListRoleTagsInput) (*iam.ListRoleTagsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListRoleTagsInput) *iam.ListRoleTagsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListRoleTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListRoleTagsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListRoleTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoleTags'
type MockIAMAPI_ListRoleTags_Call struct {
	*mock.Call
}

// ListRoleTags is a helper method to define mock.On call
//   - _a0 *iam.ListRoleTagsInput
func (_e *MockIAMAPI_Expecter) ListRoleTags(_a0 interface{}) *MockIAMAPI_ListRoleTags_Call {
	return &MockIAMAPI_ListRoleTags_Call{Call: _e.mock.On("ListRoleTags", _a0)}
}

func (_c *MockIAMAPI_ListRoleTags_Call) Run(run func(_a0 *iam.ListRoleTagsInput)) *MockIAMAPI_ListRoleTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListRoleTagsInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListRoleTags_Call) Return(_a0 *iam.ListRoleTagsOutput, _a1 error) *MockIAMAPI_ListRoleTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListRoleTags_Call) RunAndReturn(run func(*iam.ListRoleTagsInput) (*iam.ListRoleTagsOutput, error)) *MockIAMAPI_ListRoleTags_Call {
	_c.Call.Return(run)
	return _c
}

// ListRoleTagsPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListRoleTagsPages(_a0 *iam.ListRoleTagsInput, _a1 func(*iam.ListRoleTagsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListRoleTagsInput, func(*iam.ListRoleTagsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListRoleTagsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoleTagsPages'
type MockIAMAPI_ListRoleTagsPages_Call struct {
	*mock.Call
}

// ListRoleTagsPages is a helper method to define mock.On call
//   - _a0 *iam.ListRoleTagsInput
//   - _a1 func(*iam.ListRoleTagsOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListRoleTagsPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListRoleTagsPages_Call {
	return &MockIAMAPI_ListRoleTagsPages_Call{Call: _e.mock.On("ListRoleTagsPages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListRoleTagsPages_Call) Run(run func(_a0 *iam.ListRoleTagsInput, _a1 func(*iam.ListRoleTagsOutput, bool) bool)) *MockIAMAPI_ListRoleTagsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListRoleTagsInput), args[1].(func(*iam.ListRoleTagsOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListRoleTagsPages_Call) Return(_a0 error) *MockIAMAPI_ListRoleTagsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListRoleTagsPages_Call) RunAndReturn(run func(*iam.ListRoleTagsInput, func(*iam.ListRoleTagsOutput, bool) bool) error) *MockIAMAPI_ListRoleTagsPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListRoleTagsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListRoleTagsPagesWithContext(_a0 context.Context, _a1 *iam.ListRoleTagsInput, _a2 func(*iam.ListRoleTagsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListRoleTagsInput, func(*iam.ListRoleTagsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListRoleTagsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoleTagsPagesWithContext'
type MockIAMAPI_ListRoleTagsPagesWithContext_Call struct {
	*mock.Call
}

// ListRoleTagsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListRoleTagsInput
//   - _a2 func(*iam.ListRoleTagsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListRoleTagsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListRoleTagsPagesWithContext_Call {
	return &MockIAMAPI_ListRoleTagsPagesWithContext_Call{Call: _e.mock.On("ListRoleTagsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListRoleTagsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListRoleTagsInput, _a2 func(*iam.ListRoleTagsOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListRoleTagsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListRoleTagsInput), args[2].(func(*iam.ListRoleTagsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListRoleTagsPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListRoleTagsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListRoleTagsPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListRoleTagsInput, func(*iam.ListRoleTagsOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListRoleTagsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListRoleTagsRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListRoleTagsRequest(_a0 *iam.ListRoleTagsInput) (*request.Request, *iam.ListRoleTagsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListRoleTagsOutput
	if rf, ok := ret.Get(0).(func(*iam.ListRoleTagsInput) (*request.Request, *iam.ListRoleTagsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListRoleTagsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListRoleTagsInput) *iam.ListRoleTagsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListRoleTagsOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListRoleTagsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoleTagsRequest'
type MockIAMAPI_ListRoleTagsRequest_Call struct {
	*mock.Call
}

// ListRoleTagsRequest is a helper method to define mock.On call
//   - _a0 *iam.ListRoleTagsInput
func (_e *MockIAMAPI_Expecter) ListRoleTagsRequest(_a0 interface{}) *MockIAMAPI_ListRoleTagsRequest_Call {
	return &MockIAMAPI_ListRoleTagsRequest_Call{Call: _e.mock.On("ListRoleTagsRequest", _a0)}
}

func (_c *MockIAMAPI_ListRoleTagsRequest_Call) Run(run func(_a0 *iam.ListRoleTagsInput)) *MockIAMAPI_ListRoleTagsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListRoleTagsInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListRoleTagsRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListRoleTagsOutput) *MockIAMAPI_ListRoleTagsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListRoleTagsRequest_Call) RunAndReturn(run func(*iam.ListRoleTagsInput) (*request.Request, *iam.ListRoleTagsOutput)) *MockIAMAPI_ListRoleTagsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListRoleTagsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListRoleTagsWithContext(_a0 context.Context, _a1 *iam.ListRoleTagsInput, _a2 ...request.Option) (*iam.ListRoleTagsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListRoleTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListRoleTagsInput, ...request.Option) (*iam.ListRoleTagsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListRoleTagsInput, ...request.Option) *iam.ListRoleTagsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListRoleTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListRoleTagsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListRoleTagsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoleTagsWithContext'
type MockIAMAPI_ListRoleTagsWithContext_Call struct {
	*mock.Call
}

// ListRoleTagsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListRoleTagsInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListRoleTagsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListRoleTagsWithContext_Call {
	return &MockIAMAPI_ListRoleTagsWithContext_Call{Call: _e.mock.On("ListRoleTagsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListRoleTagsWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListRoleTagsInput, _a2 ...request.Option)) *MockIAMAPI_ListRoleTagsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListRoleTagsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListRoleTagsWithContext_Call) Return(_a0 *iam.ListRoleTagsOutput, _a1 error) *MockIAMAPI_ListRoleTagsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListRoleTagsWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListRoleTagsInput, ...request.Option) (*iam.ListRoleTagsOutput, error)) *MockIAMAPI_ListRoleTagsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListRoles provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListRoles(_a0 *iam.ListRolesInput) (*iam.ListRolesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListRolesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListRolesInput) (*iam.ListRolesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListRolesInput) *iam.ListRolesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListRolesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListRolesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoles'
type MockIAMAPI_ListRoles_Call struct {
	*mock.Call
}

// ListRoles is a helper method to define mock.On call
//   - _a0 *iam.ListRolesInput
func (_e *MockIAMAPI_Expecter) ListRoles(_a0 interface{}) *MockIAMAPI_ListRoles_Call {
	return &MockIAMAPI_ListRoles_Call{Call: _e.mock.On("ListRoles", _a0)}
}

func (_c *MockIAMAPI_ListRoles_Call) Run(run func(_a0 *iam.ListRolesInput)) *MockIAMAPI_ListRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListRolesInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListRoles_Call) Return(_a0 *iam.ListRolesOutput, _a1 error) *MockIAMAPI_ListRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListRoles_Call) RunAndReturn(run func(*iam.ListRolesInput) (*iam.ListRolesOutput, error)) *MockIAMAPI_ListRoles_Call {
	_c.Call.Return(run)
	return _c
}

// ListRolesPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListRolesPages(_a0 *iam.ListRolesInput, _a1 func(*iam.ListRolesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListRolesInput, func(*iam.ListRolesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListRolesPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRolesPages'
type MockIAMAPI_ListRolesPages_Call struct {
	*mock.Call
}

// ListRolesPages is a helper method to define mock.On call
//   - _a0 *iam.ListRolesInput
//   - _a1 func(*iam.ListRolesOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListRolesPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListRolesPages_Call {
	return &MockIAMAPI_ListRolesPages_Call{Call: _e.mock.On("ListRolesPages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListRolesPages_Call) Run(run func(_a0 *iam.ListRolesInput, _a1 func(*iam.ListRolesOutput, bool) bool)) *MockIAMAPI_ListRolesPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListRolesInput), args[1].(func(*iam.ListRolesOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListRolesPages_Call) Return(_a0 error) *MockIAMAPI_ListRolesPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListRolesPages_Call) RunAndReturn(run func(*iam.ListRolesInput, func(*iam.ListRolesOutput, bool) bool) error) *MockIAMAPI_ListRolesPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListRolesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListRolesPagesWithContext(_a0 context.Context, _a1 *iam.ListRolesInput, _a2 func(*iam.ListRolesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListRolesInput, func(*iam.ListRolesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListRolesPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRolesPagesWithContext'
type MockIAMAPI_ListRolesPagesWithContext_Call struct {
	*mock.Call
}

// ListRolesPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListRolesInput
//   - _a2 func(*iam.ListRolesOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListRolesPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListRolesPagesWithContext_Call {
	return &MockIAMAPI_ListRolesPagesWithContext_Call{Call: _e.mock.On("ListRolesPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListRolesPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListRolesInput, _a2 func(*iam.ListRolesOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListRolesPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListRolesInput), args[2].(func(*iam.ListRolesOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListRolesPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListRolesPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListRolesPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListRolesInput, func(*iam.ListRolesOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListRolesPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListRolesRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListRolesRequest(_a0 *iam.ListRolesInput) (*request.Request, *iam.ListRolesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListRolesOutput
	if rf, ok := ret.Get(0).(func(*iam.ListRolesInput) (*request.Request, *iam.ListRolesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListRolesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListRolesInput) *iam.ListRolesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListRolesOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListRolesRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRolesRequest'
type MockIAMAPI_ListRolesRequest_Call struct {
	*mock.Call
}

// ListRolesRequest is a helper method to define mock.On call
//   - _a0 *iam.ListRolesInput
func (_e *MockIAMAPI_Expecter) ListRolesRequest(_a0 interface{}) *MockIAMAPI_ListRolesRequest_Call {
	return &MockIAMAPI_ListRolesRequest_Call{Call: _e.mock.On("ListRolesRequest", _a0)}
}

func (_c *MockIAMAPI_ListRolesRequest_Call) Run(run func(_a0 *iam.ListRolesInput)) *MockIAMAPI_ListRolesRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListRolesInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListRolesRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListRolesOutput) *MockIAMAPI_ListRolesRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListRolesRequest_Call) RunAndReturn(run func(*iam.ListRolesInput) (*request.Request, *iam.ListRolesOutput)) *MockIAMAPI_ListRolesRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListRolesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListRolesWithContext(_a0 context.Context, _a1 *iam.ListRolesInput, _a2 ...request.Option) (*iam.ListRolesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListRolesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListRolesInput, ...request.Option) (*iam.ListRolesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListRolesInput, ...request.Option) *iam.ListRolesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListRolesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListRolesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListRolesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRolesWithContext'
type MockIAMAPI_ListRolesWithContext_Call struct {
	*mock.Call
}

// ListRolesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListRolesInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListRolesWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListRolesWithContext_Call {
	return &MockIAMAPI_ListRolesWithContext_Call{Call: _e.mock.On("ListRolesWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListRolesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListRolesInput, _a2 ...request.Option)) *MockIAMAPI_ListRolesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListRolesInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListRolesWithContext_Call) Return(_a0 *iam.ListRolesOutput, _a1 error) *MockIAMAPI_ListRolesWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListRolesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListRolesInput, ...request.Option) (*iam.ListRolesOutput, error)) *MockIAMAPI_ListRolesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListSAMLProviderTags provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListSAMLProviderTags(_a0 *iam.ListSAMLProviderTagsInput) (*iam.ListSAMLProviderTagsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListSAMLProviderTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListSAMLProviderTagsInput) (*iam.ListSAMLProviderTagsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListSAMLProviderTagsInput) *iam.ListSAMLProviderTagsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListSAMLProviderTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListSAMLProviderTagsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListSAMLProviderTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSAMLProviderTags'
type MockIAMAPI_ListSAMLProviderTags_Call struct {
	*mock.Call
}

// ListSAMLProviderTags is a helper method to define mock.On call
//   - _a0 *iam.ListSAMLProviderTagsInput
func (_e *MockIAMAPI_Expecter) ListSAMLProviderTags(_a0 interface{}) *MockIAMAPI_ListSAMLProviderTags_Call {
	return &MockIAMAPI_ListSAMLProviderTags_Call{Call: _e.mock.On("ListSAMLProviderTags", _a0)}
}

func (_c *MockIAMAPI_ListSAMLProviderTags_Call) Run(run func(_a0 *iam.ListSAMLProviderTagsInput)) *MockIAMAPI_ListSAMLProviderTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListSAMLProviderTagsInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListSAMLProviderTags_Call) Return(_a0 *iam.ListSAMLProviderTagsOutput, _a1 error) *MockIAMAPI_ListSAMLProviderTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListSAMLProviderTags_Call) RunAndReturn(run func(*iam.ListSAMLProviderTagsInput) (*iam.ListSAMLProviderTagsOutput, error)) *MockIAMAPI_ListSAMLProviderTags_Call {
	_c.Call.Return(run)
	return _c
}

// ListSAMLProviderTagsPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListSAMLProviderTagsPages(_a0 *iam.ListSAMLProviderTagsInput, _a1 func(*iam.ListSAMLProviderTagsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListSAMLProviderTagsInput, func(*iam.ListSAMLProviderTagsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListSAMLProviderTagsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSAMLProviderTagsPages'
type MockIAMAPI_ListSAMLProviderTagsPages_Call struct {
	*mock.Call
}

// ListSAMLProviderTagsPages is a helper method to define mock.On call
//   - _a0 *iam.ListSAMLProviderTagsInput
//   - _a1 func(*iam.ListSAMLProviderTagsOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListSAMLProviderTagsPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListSAMLProviderTagsPages_Call {
	return &MockIAMAPI_ListSAMLProviderTagsPages_Call{Call: _e.mock.On("ListSAMLProviderTagsPages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListSAMLProviderTagsPages_Call) Run(run func(_a0 *iam.ListSAMLProviderTagsInput, _a1 func(*iam.ListSAMLProviderTagsOutput, bool) bool)) *MockIAMAPI_ListSAMLProviderTagsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListSAMLProviderTagsInput), args[1].(func(*iam.ListSAMLProviderTagsOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListSAMLProviderTagsPages_Call) Return(_a0 error) *MockIAMAPI_ListSAMLProviderTagsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListSAMLProviderTagsPages_Call) RunAndReturn(run func(*iam.ListSAMLProviderTagsInput, func(*iam.ListSAMLProviderTagsOutput, bool) bool) error) *MockIAMAPI_ListSAMLProviderTagsPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListSAMLProviderTagsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListSAMLProviderTagsPagesWithContext(_a0 context.Context, _a1 *iam.ListSAMLProviderTagsInput, _a2 func(*iam.ListSAMLProviderTagsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListSAMLProviderTagsInput, func(*iam.ListSAMLProviderTagsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListSAMLProviderTagsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSAMLProviderTagsPagesWithContext'
type MockIAMAPI_ListSAMLProviderTagsPagesWithContext_Call struct {
	*mock.Call
}

// ListSAMLProviderTagsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListSAMLProviderTagsInput
//   - _a2 func(*iam.ListSAMLProviderTagsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListSAMLProviderTagsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListSAMLProviderTagsPagesWithContext_Call {
	return &MockIAMAPI_ListSAMLProviderTagsPagesWithContext_Call{Call: _e.mock.On("ListSAMLProviderTagsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListSAMLProviderTagsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListSAMLProviderTagsInput, _a2 func(*iam.ListSAMLProviderTagsOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListSAMLProviderTagsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListSAMLProviderTagsInput), args[2].(func(*iam.ListSAMLProviderTagsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListSAMLProviderTagsPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListSAMLProviderTagsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListSAMLProviderTagsPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListSAMLProviderTagsInput, func(*iam.ListSAMLProviderTagsOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListSAMLProviderTagsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListSAMLProviderTagsRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListSAMLProviderTagsRequest(_a0 *iam.ListSAMLProviderTagsInput) (*request.Request, *iam.ListSAMLProviderTagsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListSAMLProviderTagsOutput
	if rf, ok := ret.Get(0).(func(*iam.ListSAMLProviderTagsInput) (*request.Request, *iam.ListSAMLProviderTagsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListSAMLProviderTagsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListSAMLProviderTagsInput) *iam.ListSAMLProviderTagsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListSAMLProviderTagsOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListSAMLProviderTagsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSAMLProviderTagsRequest'
type MockIAMAPI_ListSAMLProviderTagsRequest_Call struct {
	*mock.Call
}

// ListSAMLProviderTagsRequest is a helper method to define mock.On call
//   - _a0 *iam.ListSAMLProviderTagsInput
func (_e *MockIAMAPI_Expecter) ListSAMLProviderTagsRequest(_a0 interface{}) *MockIAMAPI_ListSAMLProviderTagsRequest_Call {
	return &MockIAMAPI_ListSAMLProviderTagsRequest_Call{Call: _e.mock.On("ListSAMLProviderTagsRequest", _a0)}
}

func (_c *MockIAMAPI_ListSAMLProviderTagsRequest_Call) Run(run func(_a0 *iam.ListSAMLProviderTagsInput)) *MockIAMAPI_ListSAMLProviderTagsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListSAMLProviderTagsInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListSAMLProviderTagsRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListSAMLProviderTagsOutput) *MockIAMAPI_ListSAMLProviderTagsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListSAMLProviderTagsRequest_Call) RunAndReturn(run func(*iam.ListSAMLProviderTagsInput) (*request.Request, *iam.ListSAMLProviderTagsOutput)) *MockIAMAPI_ListSAMLProviderTagsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListSAMLProviderTagsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListSAMLProviderTagsWithContext(_a0 context.Context, _a1 *iam.ListSAMLProviderTagsInput, _a2 ...request.Option) (*iam.ListSAMLProviderTagsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListSAMLProviderTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListSAMLProviderTagsInput, ...request.Option) (*iam.ListSAMLProviderTagsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListSAMLProviderTagsInput, ...request.Option) *iam.ListSAMLProviderTagsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListSAMLProviderTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListSAMLProviderTagsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListSAMLProviderTagsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSAMLProviderTagsWithContext'
type MockIAMAPI_ListSAMLProviderTagsWithContext_Call struct {
	*mock.Call
}

// ListSAMLProviderTagsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListSAMLProviderTagsInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListSAMLProviderTagsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListSAMLProviderTagsWithContext_Call {
	return &MockIAMAPI_ListSAMLProviderTagsWithContext_Call{Call: _e.mock.On("ListSAMLProviderTagsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListSAMLProviderTagsWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListSAMLProviderTagsInput, _a2 ...request.Option)) *MockIAMAPI_ListSAMLProviderTagsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListSAMLProviderTagsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListSAMLProviderTagsWithContext_Call) Return(_a0 *iam.ListSAMLProviderTagsOutput, _a1 error) *MockIAMAPI_ListSAMLProviderTagsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListSAMLProviderTagsWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListSAMLProviderTagsInput, ...request.Option) (*iam.ListSAMLProviderTagsOutput, error)) *MockIAMAPI_ListSAMLProviderTagsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListSAMLProviders provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListSAMLProviders(_a0 *iam.ListSAMLProvidersInput) (*iam.ListSAMLProvidersOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListSAMLProvidersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListSAMLProvidersInput) (*iam.ListSAMLProvidersOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListSAMLProvidersInput) *iam.ListSAMLProvidersOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListSAMLProvidersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListSAMLProvidersInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListSAMLProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSAMLProviders'
type MockIAMAPI_ListSAMLProviders_Call struct {
	*mock.Call
}

// ListSAMLProviders is a helper method to define mock.On call
//   - _a0 *iam.ListSAMLProvidersInput
func (_e *MockIAMAPI_Expecter) ListSAMLProviders(_a0 interface{}) *MockIAMAPI_ListSAMLProviders_Call {
	return &MockIAMAPI_ListSAMLProviders_Call{Call: _e.mock.On("ListSAMLProviders", _a0)}
}

func (_c *MockIAMAPI_ListSAMLProviders_Call) Run(run func(_a0 *iam.ListSAMLProvidersInput)) *MockIAMAPI_ListSAMLProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListSAMLProvidersInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListSAMLProviders_Call) Return(_a0 *iam.ListSAMLProvidersOutput, _a1 error) *MockIAMAPI_ListSAMLProviders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListSAMLProviders_Call) RunAndReturn(run func(*iam.ListSAMLProvidersInput) (*iam.ListSAMLProvidersOutput, error)) *MockIAMAPI_ListSAMLProviders_Call {
	_c.Call.Return(run)
	return _c
}

// ListSAMLProvidersRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListSAMLProvidersRequest(_a0 *iam.ListSAMLProvidersInput) (*request.Request, *iam.ListSAMLProvidersOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListSAMLProvidersOutput
	if rf, ok := ret.Get(0).(func(*iam.ListSAMLProvidersInput) (*request.Request, *iam.ListSAMLProvidersOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListSAMLProvidersInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListSAMLProvidersInput) *iam.ListSAMLProvidersOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListSAMLProvidersOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListSAMLProvidersRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSAMLProvidersRequest'
type MockIAMAPI_ListSAMLProvidersRequest_Call struct {
	*mock.Call
}

// ListSAMLProvidersRequest is a helper method to define mock.On call
//   - _a0 *iam.ListSAMLProvidersInput
func (_e *MockIAMAPI_Expecter) ListSAMLProvidersRequest(_a0 interface{}) *MockIAMAPI_ListSAMLProvidersRequest_Call {
	return &MockIAMAPI_ListSAMLProvidersRequest_Call{Call: _e.mock.On("ListSAMLProvidersRequest", _a0)}
}

func (_c *MockIAMAPI_ListSAMLProvidersRequest_Call) Run(run func(_a0 *iam.ListSAMLProvidersInput)) *MockIAMAPI_ListSAMLProvidersRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListSAMLProvidersInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListSAMLProvidersRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListSAMLProvidersOutput) *MockIAMAPI_ListSAMLProvidersRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListSAMLProvidersRequest_Call) RunAndReturn(run func(*iam.ListSAMLProvidersInput) (*request.Request, *iam.ListSAMLProvidersOutput)) *MockIAMAPI_ListSAMLProvidersRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListSAMLProvidersWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListSAMLProvidersWithContext(_a0 context.Context, _a1 *iam.ListSAMLProvidersInput, _a2 ...request.Option) (*iam.ListSAMLProvidersOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListSAMLProvidersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListSAMLProvidersInput, ...request.Option) (*iam.ListSAMLProvidersOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListSAMLProvidersInput, ...request.Option) *iam.ListSAMLProvidersOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListSAMLProvidersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListSAMLProvidersInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListSAMLProvidersWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSAMLProvidersWithContext'
type MockIAMAPI_ListSAMLProvidersWithContext_Call struct {
	*mock.Call
}

// ListSAMLProvidersWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListSAMLProvidersInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListSAMLProvidersWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListSAMLProvidersWithContext_Call {
	return &MockIAMAPI_ListSAMLProvidersWithContext_Call{Call: _e.mock.On("ListSAMLProvidersWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListSAMLProvidersWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListSAMLProvidersInput, _a2 ...request.Option)) *MockIAMAPI_ListSAMLProvidersWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListSAMLProvidersInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListSAMLProvidersWithContext_Call) Return(_a0 *iam.ListSAMLProvidersOutput, _a1 error) *MockIAMAPI_ListSAMLProvidersWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListSAMLProvidersWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListSAMLProvidersInput, ...request.Option) (*iam.ListSAMLProvidersOutput, error)) *MockIAMAPI_ListSAMLProvidersWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListSSHPublicKeys provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListSSHPublicKeys(_a0 *iam.ListSSHPublicKeysInput) (*iam.ListSSHPublicKeysOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListSSHPublicKeysOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListSSHPublicKeysInput) (*iam.ListSSHPublicKeysOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListSSHPublicKeysInput) *iam.ListSSHPublicKeysOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListSSHPublicKeysOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListSSHPublicKeysInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListSSHPublicKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSSHPublicKeys'
type MockIAMAPI_ListSSHPublicKeys_Call struct {
	*mock.Call
}

// ListSSHPublicKeys is a helper method to define mock.On call
//   - _a0 *iam.ListSSHPublicKeysInput
func (_e *MockIAMAPI_Expecter) ListSSHPublicKeys(_a0 interface{}) *MockIAMAPI_ListSSHPublicKeys_Call {
	return &MockIAMAPI_ListSSHPublicKeys_Call{Call: _e.mock.On("ListSSHPublicKeys", _a0)}
}

func (_c *MockIAMAPI_ListSSHPublicKeys_Call) Run(run func(_a0 *iam.ListSSHPublicKeysInput)) *MockIAMAPI_ListSSHPublicKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListSSHPublicKeysInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListSSHPublicKeys_Call) Return(_a0 *iam.ListSSHPublicKeysOutput, _a1 error) *MockIAMAPI_ListSSHPublicKeys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListSSHPublicKeys_Call) RunAndReturn(run func(*iam.ListSSHPublicKeysInput) (*iam.ListSSHPublicKeysOutput, error)) *MockIAMAPI_ListSSHPublicKeys_Call {
	_c.Call.Return(run)
	return _c
}

// ListSSHPublicKeysPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListSSHPublicKeysPages(_a0 *iam.ListSSHPublicKeysInput, _a1 func(*iam.ListSSHPublicKeysOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListSSHPublicKeysInput, func(*iam.ListSSHPublicKeysOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListSSHPublicKeysPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSSHPublicKeysPages'
type MockIAMAPI_ListSSHPublicKeysPages_Call struct {
	*mock.Call
}

// ListSSHPublicKeysPages is a helper method to define mock.On call
//   - _a0 *iam.ListSSHPublicKeysInput
//   - _a1 func(*iam.ListSSHPublicKeysOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListSSHPublicKeysPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListSSHPublicKeysPages_Call {
	return &MockIAMAPI_ListSSHPublicKeysPages_Call{Call: _e.mock.On("ListSSHPublicKeysPages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListSSHPublicKeysPages_Call) Run(run func(_a0 *iam.ListSSHPublicKeysInput, _a1 func(*iam.ListSSHPublicKeysOutput, bool) bool)) *MockIAMAPI_ListSSHPublicKeysPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListSSHPublicKeysInput), args[1].(func(*iam.ListSSHPublicKeysOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListSSHPublicKeysPages_Call) Return(_a0 error) *MockIAMAPI_ListSSHPublicKeysPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListSSHPublicKeysPages_Call) RunAndReturn(run func(*iam.ListSSHPublicKeysInput, func(*iam.ListSSHPublicKeysOutput, bool) bool) error) *MockIAMAPI_ListSSHPublicKeysPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListSSHPublicKeysPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListSSHPublicKeysPagesWithContext(_a0 context.Context, _a1 *iam.ListSSHPublicKeysInput, _a2 func(*iam.ListSSHPublicKeysOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListSSHPublicKeysInput, func(*iam.ListSSHPublicKeysOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListSSHPublicKeysPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSSHPublicKeysPagesWithContext'
type MockIAMAPI_ListSSHPublicKeysPagesWithContext_Call struct {
	*mock.Call
}

// ListSSHPublicKeysPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListSSHPublicKeysInput
//   - _a2 func(*iam.ListSSHPublicKeysOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListSSHPublicKeysPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListSSHPublicKeysPagesWithContext_Call {
	return &MockIAMAPI_ListSSHPublicKeysPagesWithContext_Call{Call: _e.mock.On("ListSSHPublicKeysPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListSSHPublicKeysPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListSSHPublicKeysInput, _a2 func(*iam.ListSSHPublicKeysOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListSSHPublicKeysPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListSSHPublicKeysInput), args[2].(func(*iam.ListSSHPublicKeysOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListSSHPublicKeysPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListSSHPublicKeysPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListSSHPublicKeysPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListSSHPublicKeysInput, func(*iam.ListSSHPublicKeysOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListSSHPublicKeysPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListSSHPublicKeysRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListSSHPublicKeysRequest(_a0 *iam.ListSSHPublicKeysInput) (*request.Request, *iam.ListSSHPublicKeysOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListSSHPublicKeysOutput
	if rf, ok := ret.Get(0).(func(*iam.ListSSHPublicKeysInput) (*request.Request, *iam.ListSSHPublicKeysOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListSSHPublicKeysInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListSSHPublicKeysInput) *iam.ListSSHPublicKeysOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListSSHPublicKeysOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListSSHPublicKeysRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSSHPublicKeysRequest'
type MockIAMAPI_ListSSHPublicKeysRequest_Call struct {
	*mock.Call
}

// ListSSHPublicKeysRequest is a helper method to define mock.On call
//   - _a0 *iam.ListSSHPublicKeysInput
func (_e *MockIAMAPI_Expecter) ListSSHPublicKeysRequest(_a0 interface{}) *MockIAMAPI_ListSSHPublicKeysRequest_Call {
	return &MockIAMAPI_ListSSHPublicKeysRequest_Call{Call: _e.mock.On("ListSSHPublicKeysRequest", _a0)}
}

func (_c *MockIAMAPI_ListSSHPublicKeysRequest_Call) Run(run func(_a0 *iam.ListSSHPublicKeysInput)) *MockIAMAPI_ListSSHPublicKeysRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListSSHPublicKeysInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListSSHPublicKeysRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListSSHPublicKeysOutput) *MockIAMAPI_ListSSHPublicKeysRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListSSHPublicKeysRequest_Call) RunAndReturn(run func(*iam.ListSSHPublicKeysInput) (*request.Request, *iam.ListSSHPublicKeysOutput)) *MockIAMAPI_ListSSHPublicKeysRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListSSHPublicKeysWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListSSHPublicKeysWithContext(_a0 context.Context, _a1 *iam.ListSSHPublicKeysInput, _a2 ...request.Option) (*iam.ListSSHPublicKeysOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListSSHPublicKeysOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListSSHPublicKeysInput, ...request.Option) (*iam.ListSSHPublicKeysOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListSSHPublicKeysInput, ...request.Option) *iam.ListSSHPublicKeysOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListSSHPublicKeysOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListSSHPublicKeysInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListSSHPublicKeysWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSSHPublicKeysWithContext'
type MockIAMAPI_ListSSHPublicKeysWithContext_Call struct {
	*mock.Call
}

// ListSSHPublicKeysWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListSSHPublicKeysInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListSSHPublicKeysWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListSSHPublicKeysWithContext_Call {
	return &MockIAMAPI_ListSSHPublicKeysWithContext_Call{Call: _e.mock.On("ListSSHPublicKeysWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListSSHPublicKeysWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListSSHPublicKeysInput, _a2 ...request.Option)) *MockIAMAPI_ListSSHPublicKeysWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListSSHPublicKeysInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListSSHPublicKeysWithContext_Call) Return(_a0 *iam.ListSSHPublicKeysOutput, _a1 error) *MockIAMAPI_ListSSHPublicKeysWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListSSHPublicKeysWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListSSHPublicKeysInput, ...request.Option) (*iam.ListSSHPublicKeysOutput, error)) *MockIAMAPI_ListSSHPublicKeysWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListServerCertificateTags provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListServerCertificateTags(_a0 *iam.ListServerCertificateTagsInput) (*iam.ListServerCertificateTagsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListServerCertificateTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListServerCertificateTagsInput) (*iam.ListServerCertificateTagsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListServerCertificateTagsInput) *iam.ListServerCertificateTagsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListServerCertificateTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListServerCertificateTagsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListServerCertificateTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServerCertificateTags'
type MockIAMAPI_ListServerCertificateTags_Call struct {
	*mock.Call
}

// ListServerCertificateTags is a helper method to define mock.On call
//   - _a0 *iam.ListServerCertificateTagsInput
func (_e *MockIAMAPI_Expecter) ListServerCertificateTags(_a0 interface{}) *MockIAMAPI_ListServerCertificateTags_Call {
	return &MockIAMAPI_ListServerCertificateTags_Call{Call: _e.mock.On("ListServerCertificateTags", _a0)}
}

func (_c *MockIAMAPI_ListServerCertificateTags_Call) Run(run func(_a0 *iam.ListServerCertificateTagsInput)) *MockIAMAPI_ListServerCertificateTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListServerCertificateTagsInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListServerCertificateTags_Call) Return(_a0 *iam.ListServerCertificateTagsOutput, _a1 error) *MockIAMAPI_ListServerCertificateTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListServerCertificateTags_Call) RunAndReturn(run func(*iam.ListServerCertificateTagsInput) (*iam.ListServerCertificateTagsOutput, error)) *MockIAMAPI_ListServerCertificateTags_Call {
	_c.Call.Return(run)
	return _c
}

// ListServerCertificateTagsPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListServerCertificateTagsPages(_a0 *iam.ListServerCertificateTagsInput, _a1 func(*iam.ListServerCertificateTagsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListServerCertificateTagsInput, func(*iam.ListServerCertificateTagsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListServerCertificateTagsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServerCertificateTagsPages'
type MockIAMAPI_ListServerCertificateTagsPages_Call struct {
	*mock.Call
}

// ListServerCertificateTagsPages is a helper method to define mock.On call
//   - _a0 *iam.ListServerCertificateTagsInput
//   - _a1 func(*iam.ListServerCertificateTagsOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListServerCertificateTagsPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListServerCertificateTagsPages_Call {
	return &MockIAMAPI_ListServerCertificateTagsPages_Call{Call: _e.mock.On("ListServerCertificateTagsPages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListServerCertificateTagsPages_Call) Run(run func(_a0 *iam.ListServerCertificateTagsInput, _a1 func(*iam.ListServerCertificateTagsOutput, bool) bool)) *MockIAMAPI_ListServerCertificateTagsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListServerCertificateTagsInput), args[1].(func(*iam.ListServerCertificateTagsOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListServerCertificateTagsPages_Call) Return(_a0 error) *MockIAMAPI_ListServerCertificateTagsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListServerCertificateTagsPages_Call) RunAndReturn(run func(*iam.ListServerCertificateTagsInput, func(*iam.ListServerCertificateTagsOutput, bool) bool) error) *MockIAMAPI_ListServerCertificateTagsPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListServerCertificateTagsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListServerCertificateTagsPagesWithContext(_a0 context.Context, _a1 *iam.ListServerCertificateTagsInput, _a2 func(*iam.ListServerCertificateTagsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListServerCertificateTagsInput, func(*iam.ListServerCertificateTagsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListServerCertificateTagsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServerCertificateTagsPagesWithContext'
type MockIAMAPI_ListServerCertificateTagsPagesWithContext_Call struct {
	*mock.Call
}

// ListServerCertificateTagsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListServerCertificateTagsInput
//   - _a2 func(*iam.ListServerCertificateTagsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListServerCertificateTagsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListServerCertificateTagsPagesWithContext_Call {
	return &MockIAMAPI_ListServerCertificateTagsPagesWithContext_Call{Call: _e.mock.On("ListServerCertificateTagsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListServerCertificateTagsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListServerCertificateTagsInput, _a2 func(*iam.ListServerCertificateTagsOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListServerCertificateTagsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListServerCertificateTagsInput), args[2].(func(*iam.ListServerCertificateTagsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListServerCertificateTagsPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListServerCertificateTagsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListServerCertificateTagsPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListServerCertificateTagsInput, func(*iam.ListServerCertificateTagsOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListServerCertificateTagsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListServerCertificateTagsRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListServerCertificateTagsRequest(_a0 *iam.ListServerCertificateTagsInput) (*request.Request, *iam.ListServerCertificateTagsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListServerCertificateTagsOutput
	if rf, ok := ret.Get(0).(func(*iam.ListServerCertificateTagsInput) (*request.Request, *iam.ListServerCertificateTagsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListServerCertificateTagsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListServerCertificateTagsInput) *iam.ListServerCertificateTagsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListServerCertificateTagsOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListServerCertificateTagsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServerCertificateTagsRequest'
type MockIAMAPI_ListServerCertificateTagsRequest_Call struct {
	*mock.Call
}

// ListServerCertificateTagsRequest is a helper method to define mock.On call
//   - _a0 *iam.ListServerCertificateTagsInput
func (_e *MockIAMAPI_Expecter) ListServerCertificateTagsRequest(_a0 interface{}) *MockIAMAPI_ListServerCertificateTagsRequest_Call {
	return &MockIAMAPI_ListServerCertificateTagsRequest_Call{Call: _e.mock.On("ListServerCertificateTagsRequest", _a0)}
}

func (_c *MockIAMAPI_ListServerCertificateTagsRequest_Call) Run(run func(_a0 *iam.ListServerCertificateTagsInput)) *MockIAMAPI_ListServerCertificateTagsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListServerCertificateTagsInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListServerCertificateTagsRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListServerCertificateTagsOutput) *MockIAMAPI_ListServerCertificateTagsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListServerCertificateTagsRequest_Call) RunAndReturn(run func(*iam.ListServerCertificateTagsInput) (*request.Request, *iam.ListServerCertificateTagsOutput)) *MockIAMAPI_ListServerCertificateTagsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListServerCertificateTagsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListServerCertificateTagsWithContext(_a0 context.Context, _a1 *iam.ListServerCertificateTagsInput, _a2 ...request.Option) (*iam.ListServerCertificateTagsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListServerCertificateTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListServerCertificateTagsInput, ...request.Option) (*iam.ListServerCertificateTagsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListServerCertificateTagsInput, ...request.Option) *iam.ListServerCertificateTagsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListServerCertificateTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListServerCertificateTagsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListServerCertificateTagsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServerCertificateTagsWithContext'
type MockIAMAPI_ListServerCertificateTagsWithContext_Call struct {
	*mock.Call
}

// ListServerCertificateTagsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListServerCertificateTagsInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListServerCertificateTagsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListServerCertificateTagsWithContext_Call {
	return &MockIAMAPI_ListServerCertificateTagsWithContext_Call{Call: _e.mock.On("ListServerCertificateTagsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListServerCertificateTagsWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListServerCertificateTagsInput, _a2 ...request.Option)) *MockIAMAPI_ListServerCertificateTagsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListServerCertificateTagsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListServerCertificateTagsWithContext_Call) Return(_a0 *iam.ListServerCertificateTagsOutput, _a1 error) *MockIAMAPI_ListServerCertificateTagsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListServerCertificateTagsWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListServerCertificateTagsInput, ...request.Option) (*iam.ListServerCertificateTagsOutput, error)) *MockIAMAPI_ListServerCertificateTagsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListServerCertificates provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListServerCertificates(_a0 *iam.ListServerCertificatesInput) (*iam.ListServerCertificatesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListServerCertificatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListServerCertificatesInput) (*iam.ListServerCertificatesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListServerCertificatesInput) *iam.ListServerCertificatesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListServerCertificatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListServerCertificatesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListServerCertificates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServerCertificates'
type MockIAMAPI_ListServerCertificates_Call struct {
	*mock.Call
}

// ListServerCertificates is a helper method to define mock.On call
//   - _a0 *iam.ListServerCertificatesInput
func (_e *MockIAMAPI_Expecter) ListServerCertificates(_a0 interface{}) *MockIAMAPI_ListServerCertificates_Call {
	return &MockIAMAPI_ListServerCertificates_Call{Call: _e.mock.On("ListServerCertificates", _a0)}
}

func (_c *MockIAMAPI_ListServerCertificates_Call) Run(run func(_a0 *iam.ListServerCertificatesInput)) *MockIAMAPI_ListServerCertificates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListServerCertificatesInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListServerCertificates_Call) Return(_a0 *iam.ListServerCertificatesOutput, _a1 error) *MockIAMAPI_ListServerCertificates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListServerCertificates_Call) RunAndReturn(run func(*iam.ListServerCertificatesInput) (*iam.ListServerCertificatesOutput, error)) *MockIAMAPI_ListServerCertificates_Call {
	_c.Call.Return(run)
	return _c
}

// ListServerCertificatesPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListServerCertificatesPages(_a0 *iam.ListServerCertificatesInput, _a1 func(*iam.ListServerCertificatesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListServerCertificatesInput, func(*iam.ListServerCertificatesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListServerCertificatesPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServerCertificatesPages'
type MockIAMAPI_ListServerCertificatesPages_Call struct {
	*mock.Call
}

// ListServerCertificatesPages is a helper method to define mock.On call
//   - _a0 *iam.ListServerCertificatesInput
//   - _a1 func(*iam.ListServerCertificatesOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListServerCertificatesPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListServerCertificatesPages_Call {
	return &MockIAMAPI_ListServerCertificatesPages_Call{Call: _e.mock.On("ListServerCertificatesPages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListServerCertificatesPages_Call) Run(run func(_a0 *iam.ListServerCertificatesInput, _a1 func(*iam.ListServerCertificatesOutput, bool) bool)) *MockIAMAPI_ListServerCertificatesPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListServerCertificatesInput), args[1].(func(*iam.ListServerCertificatesOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListServerCertificatesPages_Call) Return(_a0 error) *MockIAMAPI_ListServerCertificatesPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListServerCertificatesPages_Call) RunAndReturn(run func(*iam.ListServerCertificatesInput, func(*iam.ListServerCertificatesOutput, bool) bool) error) *MockIAMAPI_ListServerCertificatesPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListServerCertificatesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListServerCertificatesPagesWithContext(_a0 context.Context, _a1 *iam.ListServerCertificatesInput, _a2 func(*iam.ListServerCertificatesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListServerCertificatesInput, func(*iam.ListServerCertificatesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListServerCertificatesPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServerCertificatesPagesWithContext'
type MockIAMAPI_ListServerCertificatesPagesWithContext_Call struct {
	*mock.Call
}

// ListServerCertificatesPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListServerCertificatesInput
//   - _a2 func(*iam.ListServerCertificatesOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListServerCertificatesPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListServerCertificatesPagesWithContext_Call {
	return &MockIAMAPI_ListServerCertificatesPagesWithContext_Call{Call: _e.mock.On("ListServerCertificatesPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListServerCertificatesPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListServerCertificatesInput, _a2 func(*iam.ListServerCertificatesOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListServerCertificatesPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListServerCertificatesInput), args[2].(func(*iam.ListServerCertificatesOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListServerCertificatesPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListServerCertificatesPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListServerCertificatesPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListServerCertificatesInput, func(*iam.ListServerCertificatesOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListServerCertificatesPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListServerCertificatesRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListServerCertificatesRequest(_a0 *iam.ListServerCertificatesInput) (*request.Request, *iam.ListServerCertificatesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListServerCertificatesOutput
	if rf, ok := ret.Get(0).(func(*iam.ListServerCertificatesInput) (*request.Request, *iam.ListServerCertificatesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListServerCertificatesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListServerCertificatesInput) *iam.ListServerCertificatesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListServerCertificatesOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListServerCertificatesRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServerCertificatesRequest'
type MockIAMAPI_ListServerCertificatesRequest_Call struct {
	*mock.Call
}

// ListServerCertificatesRequest is a helper method to define mock.On call
//   - _a0 *iam.ListServerCertificatesInput
func (_e *MockIAMAPI_Expecter) ListServerCertificatesRequest(_a0 interface{}) *MockIAMAPI_ListServerCertificatesRequest_Call {
	return &MockIAMAPI_ListServerCertificatesRequest_Call{Call: _e.mock.On("ListServerCertificatesRequest", _a0)}
}

func (_c *MockIAMAPI_ListServerCertificatesRequest_Call) Run(run func(_a0 *iam.ListServerCertificatesInput)) *MockIAMAPI_ListServerCertificatesRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListServerCertificatesInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListServerCertificatesRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListServerCertificatesOutput) *MockIAMAPI_ListServerCertificatesRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListServerCertificatesRequest_Call) RunAndReturn(run func(*iam.ListServerCertificatesInput) (*request.Request, *iam.ListServerCertificatesOutput)) *MockIAMAPI_ListServerCertificatesRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListServerCertificatesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListServerCertificatesWithContext(_a0 context.Context, _a1 *iam.ListServerCertificatesInput, _a2 ...request.Option) (*iam.ListServerCertificatesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListServerCertificatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListServerCertificatesInput, ...request.Option) (*iam.ListServerCertificatesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListServerCertificatesInput, ...request.Option) *iam.ListServerCertificatesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListServerCertificatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListServerCertificatesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListServerCertificatesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServerCertificatesWithContext'
type MockIAMAPI_ListServerCertificatesWithContext_Call struct {
	*mock.Call
}

// ListServerCertificatesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListServerCertificatesInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListServerCertificatesWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListServerCertificatesWithContext_Call {
	return &MockIAMAPI_ListServerCertificatesWithContext_Call{Call: _e.mock.On("ListServerCertificatesWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListServerCertificatesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListServerCertificatesInput, _a2 ...request.Option)) *MockIAMAPI_ListServerCertificatesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListServerCertificatesInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListServerCertificatesWithContext_Call) Return(_a0 *iam.ListServerCertificatesOutput, _a1 error) *MockIAMAPI_ListServerCertificatesWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListServerCertificatesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListServerCertificatesInput, ...request.Option) (*iam.ListServerCertificatesOutput, error)) *MockIAMAPI_ListServerCertificatesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListServiceSpecificCredentials provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListServiceSpecificCredentials(_a0 *iam.ListServiceSpecificCredentialsInput) (*iam.ListServiceSpecificCredentialsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListServiceSpecificCredentialsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListServiceSpecificCredentialsInput) (*iam.ListServiceSpecificCredentialsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListServiceSpecificCredentialsInput) *iam.ListServiceSpecificCredentialsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListServiceSpecificCredentialsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListServiceSpecificCredentialsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListServiceSpecificCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServiceSpecificCredentials'
type MockIAMAPI_ListServiceSpecificCredentials_Call struct {
	*mock.Call
}

// ListServiceSpecificCredentials is a helper method to define mock.On call
//   - _a0 *iam.ListServiceSpecificCredentialsInput
func (_e *MockIAMAPI_Expecter) ListServiceSpecificCredentials(_a0 interface{}) *MockIAMAPI_ListServiceSpecificCredentials_Call {
	return &MockIAMAPI_ListServiceSpecificCredentials_Call{Call: _e.mock.On("ListServiceSpecificCredentials", _a0)}
}

func (_c *MockIAMAPI_ListServiceSpecificCredentials_Call) Run(run func(_a0 *iam.ListServiceSpecificCredentialsInput)) *MockIAMAPI_ListServiceSpecificCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListServiceSpecificCredentialsInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListServiceSpecificCredentials_Call) Return(_a0 *iam.ListServiceSpecificCredentialsOutput, _a1 error) *MockIAMAPI_ListServiceSpecificCredentials_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListServiceSpecificCredentials_Call) RunAndReturn(run func(*iam.ListServiceSpecificCredentialsInput) (*iam.ListServiceSpecificCredentialsOutput, error)) *MockIAMAPI_ListServiceSpecificCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// ListServiceSpecificCredentialsRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListServiceSpecificCredentialsRequest(_a0 *iam.ListServiceSpecificCredentialsInput) (*request.Request, *iam.ListServiceSpecificCredentialsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListServiceSpecificCredentialsOutput
	if rf, ok := ret.Get(0).(func(*iam.ListServiceSpecificCredentialsInput) (*request.Request, *iam.ListServiceSpecificCredentialsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListServiceSpecificCredentialsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListServiceSpecificCredentialsInput) *iam.ListServiceSpecificCredentialsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListServiceSpecificCredentialsOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListServiceSpecificCredentialsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServiceSpecificCredentialsRequest'
type MockIAMAPI_ListServiceSpecificCredentialsRequest_Call struct {
	*mock.Call
}

// ListServiceSpecificCredentialsRequest is a helper method to define mock.On call
//   - _a0 *iam.ListServiceSpecificCredentialsInput
func (_e *MockIAMAPI_Expecter) ListServiceSpecificCredentialsRequest(_a0 interface{}) *MockIAMAPI_ListServiceSpecificCredentialsRequest_Call {
	return &MockIAMAPI_ListServiceSpecificCredentialsRequest_Call{Call: _e.mock.On("ListServiceSpecificCredentialsRequest", _a0)}
}

func (_c *MockIAMAPI_ListServiceSpecificCredentialsRequest_Call) Run(run func(_a0 *iam.ListServiceSpecificCredentialsInput)) *MockIAMAPI_ListServiceSpecificCredentialsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListServiceSpecificCredentialsInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListServiceSpecificCredentialsRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListServiceSpecificCredentialsOutput) *MockIAMAPI_ListServiceSpecificCredentialsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListServiceSpecificCredentialsRequest_Call) RunAndReturn(run func(*iam.ListServiceSpecificCredentialsInput) (*request.Request, *iam.ListServiceSpecificCredentialsOutput)) *MockIAMAPI_ListServiceSpecificCredentialsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListServiceSpecificCredentialsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListServiceSpecificCredentialsWithContext(_a0 context.Context, _a1 *iam.ListServiceSpecificCredentialsInput, _a2 ...request.Option) (*iam.ListServiceSpecificCredentialsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListServiceSpecificCredentialsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListServiceSpecificCredentialsInput, ...request.Option) (*iam.ListServiceSpecificCredentialsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListServiceSpecificCredentialsInput, ...request.Option) *iam.ListServiceSpecificCredentialsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListServiceSpecificCredentialsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListServiceSpecificCredentialsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListServiceSpecificCredentialsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServiceSpecificCredentialsWithContext'
type MockIAMAPI_ListServiceSpecificCredentialsWithContext_Call struct {
	*mock.Call
}

// ListServiceSpecificCredentialsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListServiceSpecificCredentialsInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListServiceSpecificCredentialsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListServiceSpecificCredentialsWithContext_Call {
	return &MockIAMAPI_ListServiceSpecificCredentialsWithContext_Call{Call: _e.mock.On("ListServiceSpecificCredentialsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListServiceSpecificCredentialsWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListServiceSpecificCredentialsInput, _a2 ...request.Option)) *MockIAMAPI_ListServiceSpecificCredentialsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListServiceSpecificCredentialsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListServiceSpecificCredentialsWithContext_Call) Return(_a0 *iam.ListServiceSpecificCredentialsOutput, _a1 error) *MockIAMAPI_ListServiceSpecificCredentialsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListServiceSpecificCredentialsWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListServiceSpecificCredentialsInput, ...request.Option) (*iam.ListServiceSpecificCredentialsOutput, error)) *MockIAMAPI_ListServiceSpecificCredentialsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListSigningCertificates provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListSigningCertificates(_a0 *iam.ListSigningCertificatesInput) (*iam.ListSigningCertificatesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListSigningCertificatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListSigningCertificatesInput) (*iam.ListSigningCertificatesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListSigningCertificatesInput) *iam.ListSigningCertificatesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListSigningCertificatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListSigningCertificatesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListSigningCertificates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSigningCertificates'
type MockIAMAPI_ListSigningCertificates_Call struct {
	*mock.Call
}

// ListSigningCertificates is a helper method to define mock.On call
//   - _a0 *iam.ListSigningCertificatesInput
func (_e *MockIAMAPI_Expecter) ListSigningCertificates(_a0 interface{}) *MockIAMAPI_ListSigningCertificates_Call {
	return &MockIAMAPI_ListSigningCertificates_Call{Call: _e.mock.On("ListSigningCertificates", _a0)}
}

func (_c *MockIAMAPI_ListSigningCertificates_Call) Run(run func(_a0 *iam.ListSigningCertificatesInput)) *MockIAMAPI_ListSigningCertificates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListSigningCertificatesInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListSigningCertificates_Call) Return(_a0 *iam.ListSigningCertificatesOutput, _a1 error) *MockIAMAPI_ListSigningCertificates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListSigningCertificates_Call) RunAndReturn(run func(*iam.ListSigningCertificatesInput) (*iam.ListSigningCertificatesOutput, error)) *MockIAMAPI_ListSigningCertificates_Call {
	_c.Call.Return(run)
	return _c
}

// ListSigningCertificatesPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListSigningCertificatesPages(_a0 *iam.ListSigningCertificatesInput, _a1 func(*iam.ListSigningCertificatesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListSigningCertificatesInput, func(*iam.ListSigningCertificatesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListSigningCertificatesPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSigningCertificatesPages'
type MockIAMAPI_ListSigningCertificatesPages_Call struct {
	*mock.Call
}

// ListSigningCertificatesPages is a helper method to define mock.On call
//   - _a0 *iam.ListSigningCertificatesInput
//   - _a1 func(*iam.ListSigningCertificatesOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListSigningCertificatesPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListSigningCertificatesPages_Call {
	return &MockIAMAPI_ListSigningCertificatesPages_Call{Call: _e.mock.On("ListSigningCertificatesPages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListSigningCertificatesPages_Call) Run(run func(_a0 *iam.ListSigningCertificatesInput, _a1 func(*iam.ListSigningCertificatesOutput, bool) bool)) *MockIAMAPI_ListSigningCertificatesPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListSigningCertificatesInput), args[1].(func(*iam.ListSigningCertificatesOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListSigningCertificatesPages_Call) Return(_a0 error) *MockIAMAPI_ListSigningCertificatesPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListSigningCertificatesPages_Call) RunAndReturn(run func(*iam.ListSigningCertificatesInput, func(*iam.ListSigningCertificatesOutput, bool) bool) error) *MockIAMAPI_ListSigningCertificatesPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListSigningCertificatesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListSigningCertificatesPagesWithContext(_a0 context.Context, _a1 *iam.ListSigningCertificatesInput, _a2 func(*iam.ListSigningCertificatesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListSigningCertificatesInput, func(*iam.ListSigningCertificatesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListSigningCertificatesPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSigningCertificatesPagesWithContext'
type MockIAMAPI_ListSigningCertificatesPagesWithContext_Call struct {
	*mock.Call
}

// ListSigningCertificatesPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListSigningCertificatesInput
//   - _a2 func(*iam.ListSigningCertificatesOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListSigningCertificatesPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListSigningCertificatesPagesWithContext_Call {
	return &MockIAMAPI_ListSigningCertificatesPagesWithContext_Call{Call: _e.mock.On("ListSigningCertificatesPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListSigningCertificatesPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListSigningCertificatesInput, _a2 func(*iam.ListSigningCertificatesOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListSigningCertificatesPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListSigningCertificatesInput), args[2].(func(*iam.ListSigningCertificatesOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListSigningCertificatesPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListSigningCertificatesPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListSigningCertificatesPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListSigningCertificatesInput, func(*iam.ListSigningCertificatesOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListSigningCertificatesPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListSigningCertificatesRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListSigningCertificatesRequest(_a0 *iam.ListSigningCertificatesInput) (*request.Request, *iam.ListSigningCertificatesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListSigningCertificatesOutput
	if rf, ok := ret.Get(0).(func(*iam.ListSigningCertificatesInput) (*request.Request, *iam.ListSigningCertificatesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListSigningCertificatesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListSigningCertificatesInput) *iam.ListSigningCertificatesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListSigningCertificatesOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListSigningCertificatesRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSigningCertificatesRequest'
type MockIAMAPI_ListSigningCertificatesRequest_Call struct {
	*mock.Call
}

// ListSigningCertificatesRequest is a helper method to define mock.On call
//   - _a0 *iam.ListSigningCertificatesInput
func (_e *MockIAMAPI_Expecter) ListSigningCertificatesRequest(_a0 interface{}) *MockIAMAPI_ListSigningCertificatesRequest_Call {
	return &MockIAMAPI_ListSigningCertificatesRequest_Call{Call: _e.mock.On("ListSigningCertificatesRequest", _a0)}
}

func (_c *MockIAMAPI_ListSigningCertificatesRequest_Call) Run(run func(_a0 *iam.ListSigningCertificatesInput)) *MockIAMAPI_ListSigningCertificatesRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListSigningCertificatesInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListSigningCertificatesRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListSigningCertificatesOutput) *MockIAMAPI_ListSigningCertificatesRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListSigningCertificatesRequest_Call) RunAndReturn(run func(*iam.ListSigningCertificatesInput) (*request.Request, *iam.ListSigningCertificatesOutput)) *MockIAMAPI_ListSigningCertificatesRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListSigningCertificatesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListSigningCertificatesWithContext(_a0 context.Context, _a1 *iam.ListSigningCertificatesInput, _a2 ...request.Option) (*iam.ListSigningCertificatesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListSigningCertificatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListSigningCertificatesInput, ...request.Option) (*iam.ListSigningCertificatesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListSigningCertificatesInput, ...request.Option) *iam.ListSigningCertificatesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListSigningCertificatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListSigningCertificatesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListSigningCertificatesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSigningCertificatesWithContext'
type MockIAMAPI_ListSigningCertificatesWithContext_Call struct {
	*mock.Call
}

// ListSigningCertificatesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListSigningCertificatesInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListSigningCertificatesWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListSigningCertificatesWithContext_Call {
	return &MockIAMAPI_ListSigningCertificatesWithContext_Call{Call: _e.mock.On("ListSigningCertificatesWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListSigningCertificatesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListSigningCertificatesInput, _a2 ...request.Option)) *MockIAMAPI_ListSigningCertificatesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListSigningCertificatesInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListSigningCertificatesWithContext_Call) Return(_a0 *iam.ListSigningCertificatesOutput, _a1 error) *MockIAMAPI_ListSigningCertificatesWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListSigningCertificatesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListSigningCertificatesInput, ...request.Option) (*iam.ListSigningCertificatesOutput, error)) *MockIAMAPI_ListSigningCertificatesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserPolicies provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListUserPolicies(_a0 *iam.ListUserPoliciesInput) (*iam.ListUserPoliciesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListUserPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListUserPoliciesInput) (*iam.ListUserPoliciesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListUserPoliciesInput) *iam.ListUserPoliciesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListUserPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListUserPoliciesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListUserPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserPolicies'
type MockIAMAPI_ListUserPolicies_Call struct {
	*mock.Call
}

// ListUserPolicies is a helper method to define mock.On call
//   - _a0 *iam.ListUserPoliciesInput
func (_e *MockIAMAPI_Expecter) ListUserPolicies(_a0 interface{}) *MockIAMAPI_ListUserPolicies_Call {
	return &MockIAMAPI_ListUserPolicies_Call{Call: _e.mock.On("ListUserPolicies", _a0)}
}

func (_c *MockIAMAPI_ListUserPolicies_Call) Run(run func(_a0 *iam.ListUserPoliciesInput)) *MockIAMAPI_ListUserPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListUserPoliciesInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListUserPolicies_Call) Return(_a0 *iam.ListUserPoliciesOutput, _a1 error) *MockIAMAPI_ListUserPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListUserPolicies_Call) RunAndReturn(run func(*iam.ListUserPoliciesInput) (*iam.ListUserPoliciesOutput, error)) *MockIAMAPI_ListUserPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserPoliciesPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListUserPoliciesPages(_a0 *iam.ListUserPoliciesInput, _a1 func(*iam.ListUserPoliciesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListUserPoliciesInput, func(*iam.ListUserPoliciesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListUserPoliciesPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserPoliciesPages'
type MockIAMAPI_ListUserPoliciesPages_Call struct {
	*mock.Call
}

// ListUserPoliciesPages is a helper method to define mock.On call
//   - _a0 *iam.ListUserPoliciesInput
//   - _a1 func(*iam.ListUserPoliciesOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListUserPoliciesPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListUserPoliciesPages_Call {
	return &MockIAMAPI_ListUserPoliciesPages_Call{Call: _e.mock.On("ListUserPoliciesPages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListUserPoliciesPages_Call) Run(run func(_a0 *iam.ListUserPoliciesInput, _a1 func(*iam.ListUserPoliciesOutput, bool) bool)) *MockIAMAPI_ListUserPoliciesPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListUserPoliciesInput), args[1].(func(*iam.ListUserPoliciesOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListUserPoliciesPages_Call) Return(_a0 error) *MockIAMAPI_ListUserPoliciesPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListUserPoliciesPages_Call) RunAndReturn(run func(*iam.ListUserPoliciesInput, func(*iam.ListUserPoliciesOutput, bool) bool) error) *MockIAMAPI_ListUserPoliciesPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserPoliciesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListUserPoliciesPagesWithContext(_a0 context.Context, _a1 *iam.ListUserPoliciesInput, _a2 func(*iam.ListUserPoliciesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListUserPoliciesInput, func(*iam.ListUserPoliciesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListUserPoliciesPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserPoliciesPagesWithContext'
type MockIAMAPI_ListUserPoliciesPagesWithContext_Call struct {
	*mock.Call
}

// ListUserPoliciesPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListUserPoliciesInput
//   - _a2 func(*iam.ListUserPoliciesOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListUserPoliciesPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListUserPoliciesPagesWithContext_Call {
	return &MockIAMAPI_ListUserPoliciesPagesWithContext_Call{Call: _e.mock.On("ListUserPoliciesPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListUserPoliciesPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListUserPoliciesInput, _a2 func(*iam.ListUserPoliciesOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListUserPoliciesPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListUserPoliciesInput), args[2].(func(*iam.ListUserPoliciesOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListUserPoliciesPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListUserPoliciesPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListUserPoliciesPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListUserPoliciesInput, func(*iam.ListUserPoliciesOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListUserPoliciesPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserPoliciesRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListUserPoliciesRequest(_a0 *iam.ListUserPoliciesInput) (*request.Request, *iam.ListUserPoliciesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListUserPoliciesOutput
	if rf, ok := ret.Get(0).(func(*iam.ListUserPoliciesInput) (*request.Request, *iam.ListUserPoliciesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListUserPoliciesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListUserPoliciesInput) *iam.ListUserPoliciesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListUserPoliciesOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListUserPoliciesRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserPoliciesRequest'
type MockIAMAPI_ListUserPoliciesRequest_Call struct {
	*mock.Call
}

// ListUserPoliciesRequest is a helper method to define mock.On call
//   - _a0 *iam.ListUserPoliciesInput
func (_e *MockIAMAPI_Expecter) ListUserPoliciesRequest(_a0 interface{}) *MockIAMAPI_ListUserPoliciesRequest_Call {
	return &MockIAMAPI_ListUserPoliciesRequest_Call{Call: _e.mock.On("ListUserPoliciesRequest", _a0)}
}

func (_c *MockIAMAPI_ListUserPoliciesRequest_Call) Run(run func(_a0 *iam.ListUserPoliciesInput)) *MockIAMAPI_ListUserPoliciesRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListUserPoliciesInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListUserPoliciesRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListUserPoliciesOutput) *MockIAMAPI_ListUserPoliciesRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListUserPoliciesRequest_Call) RunAndReturn(run func(*iam.ListUserPoliciesInput) (*request.Request, *iam.ListUserPoliciesOutput)) *MockIAMAPI_ListUserPoliciesRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserPoliciesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListUserPoliciesWithContext(_a0 context.Context, _a1 *iam.ListUserPoliciesInput, _a2 ...request.Option) (*iam.ListUserPoliciesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListUserPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListUserPoliciesInput, ...request.Option) (*iam.ListUserPoliciesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListUserPoliciesInput, ...request.Option) *iam.ListUserPoliciesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListUserPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListUserPoliciesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListUserPoliciesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserPoliciesWithContext'
type MockIAMAPI_ListUserPoliciesWithContext_Call struct {
	*mock.Call
}

// ListUserPoliciesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListUserPoliciesInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListUserPoliciesWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListUserPoliciesWithContext_Call {
	return &MockIAMAPI_ListUserPoliciesWithContext_Call{Call: _e.mock.On("ListUserPoliciesWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListUserPoliciesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListUserPoliciesInput, _a2 ...request.Option)) *MockIAMAPI_ListUserPoliciesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListUserPoliciesInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListUserPoliciesWithContext_Call) Return(_a0 *iam.ListUserPoliciesOutput, _a1 error) *MockIAMAPI_ListUserPoliciesWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListUserPoliciesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListUserPoliciesInput, ...request.Option) (*iam.ListUserPoliciesOutput, error)) *MockIAMAPI_ListUserPoliciesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserTags provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListUserTags(_a0 *iam.ListUserTagsInput) (*iam.ListUserTagsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListUserTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListUserTagsInput) (*iam.ListUserTagsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListUserTagsInput) *iam.ListUserTagsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListUserTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListUserTagsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListUserTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserTags'
type MockIAMAPI_ListUserTags_Call struct {
	*mock.Call
}

// ListUserTags is a helper method to define mock.On call
//   - _a0 *iam.ListUserTagsInput
func (_e *MockIAMAPI_Expecter) ListUserTags(_a0 interface{}) *MockIAMAPI_ListUserTags_Call {
	return &MockIAMAPI_ListUserTags_Call{Call: _e.mock.On("ListUserTags", _a0)}
}

func (_c *MockIAMAPI_ListUserTags_Call) Run(run func(_a0 *iam.ListUserTagsInput)) *MockIAMAPI_ListUserTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListUserTagsInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListUserTags_Call) Return(_a0 *iam.ListUserTagsOutput, _a1 error) *MockIAMAPI_ListUserTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListUserTags_Call) RunAndReturn(run func(*iam.ListUserTagsInput) (*iam.ListUserTagsOutput, error)) *MockIAMAPI_ListUserTags_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserTagsPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListUserTagsPages(_a0 *iam.ListUserTagsInput, _a1 func(*iam.ListUserTagsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListUserTagsInput, func(*iam.ListUserTagsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListUserTagsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserTagsPages'
type MockIAMAPI_ListUserTagsPages_Call struct {
	*mock.Call
}

// ListUserTagsPages is a helper method to define mock.On call
//   - _a0 *iam.ListUserTagsInput
//   - _a1 func(*iam.ListUserTagsOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListUserTagsPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListUserTagsPages_Call {
	return &MockIAMAPI_ListUserTagsPages_Call{Call: _e.mock.On("ListUserTagsPages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListUserTagsPages_Call) Run(run func(_a0 *iam.ListUserTagsInput, _a1 func(*iam.ListUserTagsOutput, bool) bool)) *MockIAMAPI_ListUserTagsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListUserTagsInput), args[1].(func(*iam.ListUserTagsOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListUserTagsPages_Call) Return(_a0 error) *MockIAMAPI_ListUserTagsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListUserTagsPages_Call) RunAndReturn(run func(*iam.ListUserTagsInput, func(*iam.ListUserTagsOutput, bool) bool) error) *MockIAMAPI_ListUserTagsPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserTagsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListUserTagsPagesWithContext(_a0 context.Context, _a1 *iam.ListUserTagsInput, _a2 func(*iam.ListUserTagsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListUserTagsInput, func(*iam.ListUserTagsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListUserTagsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserTagsPagesWithContext'
type MockIAMAPI_ListUserTagsPagesWithContext_Call struct {
	*mock.Call
}

// ListUserTagsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListUserTagsInput
//   - _a2 func(*iam.ListUserTagsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListUserTagsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListUserTagsPagesWithContext_Call {
	return &MockIAMAPI_ListUserTagsPagesWithContext_Call{Call: _e.mock.On("ListUserTagsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListUserTagsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListUserTagsInput, _a2 func(*iam.ListUserTagsOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListUserTagsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListUserTagsInput), args[2].(func(*iam.ListUserTagsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListUserTagsPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListUserTagsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListUserTagsPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListUserTagsInput, func(*iam.ListUserTagsOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListUserTagsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserTagsRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListUserTagsRequest(_a0 *iam.ListUserTagsInput) (*request.Request, *iam.ListUserTagsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListUserTagsOutput
	if rf, ok := ret.Get(0).(func(*iam.ListUserTagsInput) (*request.Request, *iam.ListUserTagsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListUserTagsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListUserTagsInput) *iam.ListUserTagsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListUserTagsOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListUserTagsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserTagsRequest'
type MockIAMAPI_ListUserTagsRequest_Call struct {
	*mock.Call
}

// ListUserTagsRequest is a helper method to define mock.On call
//   - _a0 *iam.ListUserTagsInput
func (_e *MockIAMAPI_Expecter) ListUserTagsRequest(_a0 interface{}) *MockIAMAPI_ListUserTagsRequest_Call {
	return &MockIAMAPI_ListUserTagsRequest_Call{Call: _e.mock.On("ListUserTagsRequest", _a0)}
}

func (_c *MockIAMAPI_ListUserTagsRequest_Call) Run(run func(_a0 *iam.ListUserTagsInput)) *MockIAMAPI_ListUserTagsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListUserTagsInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListUserTagsRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListUserTagsOutput) *MockIAMAPI_ListUserTagsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListUserTagsRequest_Call) RunAndReturn(run func(*iam.ListUserTagsInput) (*request.Request, *iam.ListUserTagsOutput)) *MockIAMAPI_ListUserTagsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserTagsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListUserTagsWithContext(_a0 context.Context, _a1 *iam.ListUserTagsInput, _a2 ...request.Option) (*iam.ListUserTagsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListUserTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListUserTagsInput, ...request.Option) (*iam.ListUserTagsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListUserTagsInput, ...request.Option) *iam.ListUserTagsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListUserTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListUserTagsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListUserTagsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserTagsWithContext'
type MockIAMAPI_ListUserTagsWithContext_Call struct {
	*mock.Call
}

// ListUserTagsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListUserTagsInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListUserTagsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListUserTagsWithContext_Call {
	return &MockIAMAPI_ListUserTagsWithContext_Call{Call: _e.mock.On("ListUserTagsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListUserTagsWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListUserTagsInput, _a2 ...request.Option)) *MockIAMAPI_ListUserTagsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListUserTagsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListUserTagsWithContext_Call) Return(_a0 *iam.ListUserTagsOutput, _a1 error) *MockIAMAPI_ListUserTagsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListUserTagsWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListUserTagsInput, ...request.Option) (*iam.ListUserTagsOutput, error)) *MockIAMAPI_ListUserTagsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListUsers(_a0 *iam.ListUsersInput) (*iam.ListUsersOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListUsersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListUsersInput) (*iam.ListUsersOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListUsersInput) *iam.ListUsersOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListUsersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListUsersInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockIAMAPI_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - _a0 *iam.ListUsersInput
func (_e *MockIAMAPI_Expecter) ListUsers(_a0 interface{}) *MockIAMAPI_ListUsers_Call {
	return &MockIAMAPI_ListUsers_Call{Call: _e.mock.On("ListUsers", _a0)}
}

func (_c *MockIAMAPI_ListUsers_Call) Run(run func(_a0 *iam.ListUsersInput)) *MockIAMAPI_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListUsersInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListUsers_Call) Return(_a0 *iam.ListUsersOutput, _a1 error) *MockIAMAPI_ListUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListUsers_Call) RunAndReturn(run func(*iam.ListUsersInput) (*iam.ListUsersOutput, error)) *MockIAMAPI_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsersPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListUsersPages(_a0 *iam.ListUsersInput, _a1 func(*iam.ListUsersOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListUsersInput, func(*iam.ListUsersOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListUsersPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsersPages'
type MockIAMAPI_ListUsersPages_Call struct {
	*mock.Call
}

// ListUsersPages is a helper method to define mock.On call
//   - _a0 *iam.ListUsersInput
//   - _a1 func(*iam.ListUsersOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListUsersPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListUsersPages_Call {
	return &MockIAMAPI_ListUsersPages_Call{Call: _e.mock.On("ListUsersPages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListUsersPages_Call) Run(run func(_a0 *iam.ListUsersInput, _a1 func(*iam.ListUsersOutput, bool) bool)) *MockIAMAPI_ListUsersPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListUsersInput), args[1].(func(*iam.ListUsersOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListUsersPages_Call) Return(_a0 error) *MockIAMAPI_ListUsersPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListUsersPages_Call) RunAndReturn(run func(*iam.ListUsersInput, func(*iam.ListUsersOutput, bool) bool) error) *MockIAMAPI_ListUsersPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsersPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListUsersPagesWithContext(_a0 context.Context, _a1 *iam.ListUsersInput, _a2 func(*iam.ListUsersOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListUsersInput, func(*iam.ListUsersOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListUsersPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsersPagesWithContext'
type MockIAMAPI_ListUsersPagesWithContext_Call struct {
	*mock.Call
}

// ListUsersPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListUsersInput
//   - _a2 func(*iam.ListUsersOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListUsersPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListUsersPagesWithContext_Call {
	return &MockIAMAPI_ListUsersPagesWithContext_Call{Call: _e.mock.On("ListUsersPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListUsersPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListUsersInput, _a2 func(*iam.ListUsersOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListUsersPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListUsersInput), args[2].(func(*iam.ListUsersOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListUsersPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListUsersPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListUsersPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListUsersInput, func(*iam.ListUsersOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListUsersPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsersRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListUsersRequest(_a0 *iam.ListUsersInput) (*request.Request, *iam.ListUsersOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListUsersOutput
	if rf, ok := ret.Get(0).(func(*iam.ListUsersInput) (*request.Request, *iam.ListUsersOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListUsersInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListUsersInput) *iam.ListUsersOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListUsersOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListUsersRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsersRequest'
type MockIAMAPI_ListUsersRequest_Call struct {
	*mock.Call
}

// ListUsersRequest is a helper method to define mock.On call
//   - _a0 *iam.ListUsersInput
func (_e *MockIAMAPI_Expecter) ListUsersRequest(_a0 interface{}) *MockIAMAPI_ListUsersRequest_Call {
	return &MockIAMAPI_ListUsersRequest_Call{Call: _e.mock.On("ListUsersRequest", _a0)}
}

func (_c *MockIAMAPI_ListUsersRequest_Call) Run(run func(_a0 *iam.ListUsersInput)) *MockIAMAPI_ListUsersRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListUsersInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListUsersRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListUsersOutput) *MockIAMAPI_ListUsersRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListUsersRequest_Call) RunAndReturn(run func(*iam.ListUsersInput) (*request.Request, *iam.ListUsersOutput)) *MockIAMAPI_ListUsersRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsersWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListUsersWithContext(_a0 context.Context, _a1 *iam.ListUsersInput, _a2 ...request.Option) (*iam.ListUsersOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListUsersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListUsersInput, ...request.Option) (*iam.ListUsersOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListUsersInput, ...request.Option) *iam.ListUsersOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListUsersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListUsersInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListUsersWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsersWithContext'
type MockIAMAPI_ListUsersWithContext_Call struct {
	*mock.Call
}

// ListUsersWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListUsersInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListUsersWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListUsersWithContext_Call {
	return &MockIAMAPI_ListUsersWithContext_Call{Call: _e.mock.On("ListUsersWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListUsersWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListUsersInput, _a2 ...request.Option)) *MockIAMAPI_ListUsersWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListUsersInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListUsersWithContext_Call) Return(_a0 *iam.ListUsersOutput, _a1 error) *MockIAMAPI_ListUsersWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListUsersWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListUsersInput, ...request.Option) (*iam.ListUsersOutput, error)) *MockIAMAPI_ListUsersWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListVirtualMFADevices provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListVirtualMFADevices(_a0 *iam.ListVirtualMFADevicesInput) (*iam.ListVirtualMFADevicesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ListVirtualMFADevicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ListVirtualMFADevicesInput) (*iam.ListVirtualMFADevicesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListVirtualMFADevicesInput) *iam.ListVirtualMFADevicesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListVirtualMFADevicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListVirtualMFADevicesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListVirtualMFADevices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVirtualMFADevices'
type MockIAMAPI_ListVirtualMFADevices_Call struct {
	*mock.Call
}

// ListVirtualMFADevices is a helper method to define mock.On call
//   - _a0 *iam.ListVirtualMFADevicesInput
func (_e *MockIAMAPI_Expecter) ListVirtualMFADevices(_a0 interface{}) *MockIAMAPI_ListVirtualMFADevices_Call {
	return &MockIAMAPI_ListVirtualMFADevices_Call{Call: _e.mock.On("ListVirtualMFADevices", _a0)}
}

func (_c *MockIAMAPI_ListVirtualMFADevices_Call) Run(run func(_a0 *iam.ListVirtualMFADevicesInput)) *MockIAMAPI_ListVirtualMFADevices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListVirtualMFADevicesInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListVirtualMFADevices_Call) Return(_a0 *iam.ListVirtualMFADevicesOutput, _a1 error) *MockIAMAPI_ListVirtualMFADevices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListVirtualMFADevices_Call) RunAndReturn(run func(*iam.ListVirtualMFADevicesInput) (*iam.ListVirtualMFADevicesOutput, error)) *MockIAMAPI_ListVirtualMFADevices_Call {
	_c.Call.Return(run)
	return _c
}

// ListVirtualMFADevicesPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) ListVirtualMFADevicesPages(_a0 *iam.ListVirtualMFADevicesInput, _a1 func(*iam.ListVirtualMFADevicesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.ListVirtualMFADevicesInput, func(*iam.ListVirtualMFADevicesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListVirtualMFADevicesPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVirtualMFADevicesPages'
type MockIAMAPI_ListVirtualMFADevicesPages_Call struct {
	*mock.Call
}

// ListVirtualMFADevicesPages is a helper method to define mock.On call
//   - _a0 *iam.ListVirtualMFADevicesInput
//   - _a1 func(*iam.ListVirtualMFADevicesOutput , bool) bool
func (_e *MockIAMAPI_Expecter) ListVirtualMFADevicesPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_ListVirtualMFADevicesPages_Call {
	return &MockIAMAPI_ListVirtualMFADevicesPages_Call{Call: _e.mock.On("ListVirtualMFADevicesPages", _a0, _a1)}
}

func (_c *MockIAMAPI_ListVirtualMFADevicesPages_Call) Run(run func(_a0 *iam.ListVirtualMFADevicesInput, _a1 func(*iam.ListVirtualMFADevicesOutput, bool) bool)) *MockIAMAPI_ListVirtualMFADevicesPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListVirtualMFADevicesInput), args[1].(func(*iam.ListVirtualMFADevicesOutput, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_ListVirtualMFADevicesPages_Call) Return(_a0 error) *MockIAMAPI_ListVirtualMFADevicesPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListVirtualMFADevicesPages_Call) RunAndReturn(run func(*iam.ListVirtualMFADevicesInput, func(*iam.ListVirtualMFADevicesOutput, bool) bool) error) *MockIAMAPI_ListVirtualMFADevicesPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListVirtualMFADevicesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) ListVirtualMFADevicesPagesWithContext(_a0 context.Context, _a1 *iam.ListVirtualMFADevicesInput, _a2 func(*iam.ListVirtualMFADevicesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListVirtualMFADevicesInput, func(*iam.ListVirtualMFADevicesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_ListVirtualMFADevicesPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVirtualMFADevicesPagesWithContext'
type MockIAMAPI_ListVirtualMFADevicesPagesWithContext_Call struct {
	*mock.Call
}

// ListVirtualMFADevicesPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListVirtualMFADevicesInput
//   - _a2 func(*iam.ListVirtualMFADevicesOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) ListVirtualMFADevicesPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_ListVirtualMFADevicesPagesWithContext_Call {
	return &MockIAMAPI_ListVirtualMFADevicesPagesWithContext_Call{Call: _e.mock.On("ListVirtualMFADevicesPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_ListVirtualMFADevicesPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListVirtualMFADevicesInput, _a2 func(*iam.ListVirtualMFADevicesOutput, bool) bool, _a3 ...request.Option)) *MockIAMAPI_ListVirtualMFADevicesPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListVirtualMFADevicesInput), args[2].(func(*iam.ListVirtualMFADevicesOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListVirtualMFADevicesPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_ListVirtualMFADevicesPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_ListVirtualMFADevicesPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListVirtualMFADevicesInput, func(*iam.ListVirtualMFADevicesOutput, bool) bool, ...request.Option) error) *MockIAMAPI_ListVirtualMFADevicesPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListVirtualMFADevicesRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ListVirtualMFADevicesRequest(_a0 *iam.ListVirtualMFADevicesInput) (*request.Request, *iam.ListVirtualMFADevicesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ListVirtualMFADevicesOutput
	if rf, ok := ret.Get(0).(func(*iam.ListVirtualMFADevicesInput) (*request.Request, *iam.ListVirtualMFADevicesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ListVirtualMFADevicesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ListVirtualMFADevicesInput) *iam.ListVirtualMFADevicesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ListVirtualMFADevicesOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ListVirtualMFADevicesRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVirtualMFADevicesRequest'
type MockIAMAPI_ListVirtualMFADevicesRequest_Call struct {
	*mock.Call
}

// ListVirtualMFADevicesRequest is a helper method to define mock.On call
//   - _a0 *iam.ListVirtualMFADevicesInput
func (_e *MockIAMAPI_Expecter) ListVirtualMFADevicesRequest(_a0 interface{}) *MockIAMAPI_ListVirtualMFADevicesRequest_Call {
	return &MockIAMAPI_ListVirtualMFADevicesRequest_Call{Call: _e.mock.On("ListVirtualMFADevicesRequest", _a0)}
}

func (_c *MockIAMAPI_ListVirtualMFADevicesRequest_Call) Run(run func(_a0 *iam.ListVirtualMFADevicesInput)) *MockIAMAPI_ListVirtualMFADevicesRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ListVirtualMFADevicesInput))
	})
	return _c
}

func (_c *MockIAMAPI_ListVirtualMFADevicesRequest_Call) Return(_a0 *request.Request, _a1 *iam.ListVirtualMFADevicesOutput) *MockIAMAPI_ListVirtualMFADevicesRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListVirtualMFADevicesRequest_Call) RunAndReturn(run func(*iam.ListVirtualMFADevicesInput) (*request.Request, *iam.ListVirtualMFADevicesOutput)) *MockIAMAPI_ListVirtualMFADevicesRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListVirtualMFADevicesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ListVirtualMFADevicesWithContext(_a0 context.Context, _a1 *iam.ListVirtualMFADevicesInput, _a2 ...request.Option) (*iam.ListVirtualMFADevicesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ListVirtualMFADevicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListVirtualMFADevicesInput, ...request.Option) (*iam.ListVirtualMFADevicesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ListVirtualMFADevicesInput, ...request.Option) *iam.ListVirtualMFADevicesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ListVirtualMFADevicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ListVirtualMFADevicesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ListVirtualMFADevicesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVirtualMFADevicesWithContext'
type MockIAMAPI_ListVirtualMFADevicesWithContext_Call struct {
	*mock.Call
}

// ListVirtualMFADevicesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ListVirtualMFADevicesInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ListVirtualMFADevicesWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ListVirtualMFADevicesWithContext_Call {
	return &MockIAMAPI_ListVirtualMFADevicesWithContext_Call{Call: _e.mock.On("ListVirtualMFADevicesWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ListVirtualMFADevicesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ListVirtualMFADevicesInput, _a2 ...request.Option)) *MockIAMAPI_ListVirtualMFADevicesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ListVirtualMFADevicesInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ListVirtualMFADevicesWithContext_Call) Return(_a0 *iam.ListVirtualMFADevicesOutput, _a1 error) *MockIAMAPI_ListVirtualMFADevicesWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ListVirtualMFADevicesWithContext_Call) RunAndReturn(run func(context.Context, *iam.ListVirtualMFADevicesInput, ...request.Option) (*iam.ListVirtualMFADevicesOutput, error)) *MockIAMAPI_ListVirtualMFADevicesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PutGroupPolicy provides a mock function with given fields: _a0
func (_m *MockIAMAPI) PutGroupPolicy(_a0 *iam.PutGroupPolicyInput) (*iam.PutGroupPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.PutGroupPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.PutGroupPolicyInput) (*iam.PutGroupPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.PutGroupPolicyInput) *iam.PutGroupPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.PutGroupPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.PutGroupPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_PutGroupPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutGroupPolicy'
type MockIAMAPI_PutGroupPolicy_Call struct {
	*mock.Call
}

// PutGroupPolicy is a helper method to define mock.On call
//   - _a0 *iam.PutGroupPolicyInput
func (_e *MockIAMAPI_Expecter) PutGroupPolicy(_a0 interface{}) *MockIAMAPI_PutGroupPolicy_Call {
	return &MockIAMAPI_PutGroupPolicy_Call{Call: _e.mock.On("PutGroupPolicy", _a0)}
}

func (_c *MockIAMAPI_PutGroupPolicy_Call) Run(run func(_a0 *iam.PutGroupPolicyInput)) *MockIAMAPI_PutGroupPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.PutGroupPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_PutGroupPolicy_Call) Return(_a0 *iam.PutGroupPolicyOutput, _a1 error) *MockIAMAPI_PutGroupPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_PutGroupPolicy_Call) RunAndReturn(run func(*iam.PutGroupPolicyInput) (*iam.PutGroupPolicyOutput, error)) *MockIAMAPI_PutGroupPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// PutGroupPolicyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) PutGroupPolicyRequest(_a0 *iam.PutGroupPolicyInput) (*request.Request, *iam.PutGroupPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.PutGroupPolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.PutGroupPolicyInput) (*request.Request, *iam.PutGroupPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.PutGroupPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.PutGroupPolicyInput) *iam.PutGroupPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.PutGroupPolicyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_PutGroupPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutGroupPolicyRequest'
type MockIAMAPI_PutGroupPolicyRequest_Call struct {
	*mock.Call
}

// PutGroupPolicyRequest is a helper method to define mock.On call
//   - _a0 *iam.PutGroupPolicyInput
func (_e *MockIAMAPI_Expecter) PutGroupPolicyRequest(_a0 interface{}) *MockIAMAPI_PutGroupPolicyRequest_Call {
	return &MockIAMAPI_PutGroupPolicyRequest_Call{Call: _e.mock.On("PutGroupPolicyRequest", _a0)}
}

func (_c *MockIAMAPI_PutGroupPolicyRequest_Call) Run(run func(_a0 *iam.PutGroupPolicyInput)) *MockIAMAPI_PutGroupPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.PutGroupPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_PutGroupPolicyRequest_Call) Return(_a0 *request.Request, _a1 *iam.PutGroupPolicyOutput) *MockIAMAPI_PutGroupPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_PutGroupPolicyRequest_Call) RunAndReturn(run func(*iam.PutGroupPolicyInput) (*request.Request, *iam.PutGroupPolicyOutput)) *MockIAMAPI_PutGroupPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PutGroupPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) PutGroupPolicyWithContext(_a0 context.Context, _a1 *iam.PutGroupPolicyInput, _a2 ...request.Option) (*iam.PutGroupPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.PutGroupPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.PutGroupPolicyInput, ...request.Option) (*iam.PutGroupPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.PutGroupPolicyInput, ...request.Option) *iam.PutGroupPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.PutGroupPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.PutGroupPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_PutGroupPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutGroupPolicyWithContext'
type MockIAMAPI_PutGroupPolicyWithContext_Call struct {
	*mock.Call
}

// PutGroupPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.PutGroupPolicyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) PutGroupPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_PutGroupPolicyWithContext_Call {
	return &MockIAMAPI_PutGroupPolicyWithContext_Call{Call: _e.mock.On("PutGroupPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_PutGroupPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.PutGroupPolicyInput, _a2 ...request.Option)) *MockIAMAPI_PutGroupPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.PutGroupPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_PutGroupPolicyWithContext_Call) Return(_a0 *iam.PutGroupPolicyOutput, _a1 error) *MockIAMAPI_PutGroupPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_PutGroupPolicyWithContext_Call) RunAndReturn(run func(context.Context, *iam.PutGroupPolicyInput, ...request.Option) (*iam.PutGroupPolicyOutput, error)) *MockIAMAPI_PutGroupPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PutRolePermissionsBoundary provides a mock function with given fields: _a0
func (_m *MockIAMAPI) PutRolePermissionsBoundary(_a0 *iam.PutRolePermissionsBoundaryInput) (*iam.PutRolePermissionsBoundaryOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.PutRolePermissionsBoundaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.PutRolePermissionsBoundaryInput) (*iam.PutRolePermissionsBoundaryOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.PutRolePermissionsBoundaryInput) *iam.PutRolePermissionsBoundaryOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.PutRolePermissionsBoundaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.PutRolePermissionsBoundaryInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_PutRolePermissionsBoundary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutRolePermissionsBoundary'
type MockIAMAPI_PutRolePermissionsBoundary_Call struct {
	*mock.Call
}

// PutRolePermissionsBoundary is a helper method to define mock.On call
//   - _a0 *iam.PutRolePermissionsBoundaryInput
func (_e *MockIAMAPI_Expecter) PutRolePermissionsBoundary(_a0 interface{}) *MockIAMAPI_PutRolePermissionsBoundary_Call {
	return &MockIAMAPI_PutRolePermissionsBoundary_Call{Call: _e.mock.On("PutRolePermissionsBoundary", _a0)}
}

func (_c *MockIAMAPI_PutRolePermissionsBoundary_Call) Run(run func(_a0 *iam.PutRolePermissionsBoundaryInput)) *MockIAMAPI_PutRolePermissionsBoundary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.PutRolePermissionsBoundaryInput))
	})
	return _c
}

func (_c *MockIAMAPI_PutRolePermissionsBoundary_Call) Return(_a0 *iam.PutRolePermissionsBoundaryOutput, _a1 error) *MockIAMAPI_PutRolePermissionsBoundary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_PutRolePermissionsBoundary_Call) RunAndReturn(run func(*iam.PutRolePermissionsBoundaryInput) (*iam.PutRolePermissionsBoundaryOutput, error)) *MockIAMAPI_PutRolePermissionsBoundary_Call {
	_c.Call.Return(run)
	return _c
}

// PutRolePermissionsBoundaryRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) PutRolePermissionsBoundaryRequest(_a0 *iam.PutRolePermissionsBoundaryInput) (*request.Request, *iam.PutRolePermissionsBoundaryOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.PutRolePermissionsBoundaryOutput
	if rf, ok := ret.Get(0).(func(*iam.PutRolePermissionsBoundaryInput) (*request.Request, *iam.PutRolePermissionsBoundaryOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.PutRolePermissionsBoundaryInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.PutRolePermissionsBoundaryInput) *iam.PutRolePermissionsBoundaryOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.PutRolePermissionsBoundaryOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_PutRolePermissionsBoundaryRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutRolePermissionsBoundaryRequest'
type MockIAMAPI_PutRolePermissionsBoundaryRequest_Call struct {
	*mock.Call
}

// PutRolePermissionsBoundaryRequest is a helper method to define mock.On call
//   - _a0 *iam.PutRolePermissionsBoundaryInput
func (_e *MockIAMAPI_Expecter) PutRolePermissionsBoundaryRequest(_a0 interface{}) *MockIAMAPI_PutRolePermissionsBoundaryRequest_Call {
	return &MockIAMAPI_PutRolePermissionsBoundaryRequest_Call{Call: _e.mock.On("PutRolePermissionsBoundaryRequest", _a0)}
}

func (_c *MockIAMAPI_PutRolePermissionsBoundaryRequest_Call) Run(run func(_a0 *iam.PutRolePermissionsBoundaryInput)) *MockIAMAPI_PutRolePermissionsBoundaryRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.PutRolePermissionsBoundaryInput))
	})
	return _c
}

func (_c *MockIAMAPI_PutRolePermissionsBoundaryRequest_Call) Return(_a0 *request.Request, _a1 *iam.PutRolePermissionsBoundaryOutput) *MockIAMAPI_PutRolePermissionsBoundaryRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_PutRolePermissionsBoundaryRequest_Call) RunAndReturn(run func(*iam.PutRolePermissionsBoundaryInput) (*request.Request, *iam.PutRolePermissionsBoundaryOutput)) *MockIAMAPI_PutRolePermissionsBoundaryRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PutRolePermissionsBoundaryWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) PutRolePermissionsBoundaryWithContext(_a0 context.Context, _a1 *iam.PutRolePermissionsBoundaryInput, _a2 ...request.Option) (*iam.PutRolePermissionsBoundaryOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.PutRolePermissionsBoundaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.PutRolePermissionsBoundaryInput, ...request.Option) (*iam.PutRolePermissionsBoundaryOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.PutRolePermissionsBoundaryInput, ...request.Option) *iam.PutRolePermissionsBoundaryOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.PutRolePermissionsBoundaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.PutRolePermissionsBoundaryInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_PutRolePermissionsBoundaryWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutRolePermissionsBoundaryWithContext'
type MockIAMAPI_PutRolePermissionsBoundaryWithContext_Call struct {
	*mock.Call
}

// PutRolePermissionsBoundaryWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.PutRolePermissionsBoundaryInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) PutRolePermissionsBoundaryWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_PutRolePermissionsBoundaryWithContext_Call {
	return &MockIAMAPI_PutRolePermissionsBoundaryWithContext_Call{Call: _e.mock.On("PutRolePermissionsBoundaryWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_PutRolePermissionsBoundaryWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.PutRolePermissionsBoundaryInput, _a2 ...request.Option)) *MockIAMAPI_PutRolePermissionsBoundaryWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.PutRolePermissionsBoundaryInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_PutRolePermissionsBoundaryWithContext_Call) Return(_a0 *iam.PutRolePermissionsBoundaryOutput, _a1 error) *MockIAMAPI_PutRolePermissionsBoundaryWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_PutRolePermissionsBoundaryWithContext_Call) RunAndReturn(run func(context.Context, *iam.PutRolePermissionsBoundaryInput, ...request.Option) (*iam.PutRolePermissionsBoundaryOutput, error)) *MockIAMAPI_PutRolePermissionsBoundaryWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PutRolePolicy provides a mock function with given fields: _a0
func (_m *MockIAMAPI) PutRolePolicy(_a0 *iam.PutRolePolicyInput) (*iam.PutRolePolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.PutRolePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.PutRolePolicyInput) (*iam.PutRolePolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.PutRolePolicyInput) *iam.PutRolePolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.PutRolePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.PutRolePolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_PutRolePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutRolePolicy'
type MockIAMAPI_PutRolePolicy_Call struct {
	*mock.Call
}

// PutRolePolicy is a helper method to define mock.On call
//   - _a0 *iam.PutRolePolicyInput
func (_e *MockIAMAPI_Expecter) PutRolePolicy(_a0 interface{}) *MockIAMAPI_PutRolePolicy_Call {
	return &MockIAMAPI_PutRolePolicy_Call{Call: _e.mock.On("PutRolePolicy", _a0)}
}

func (_c *MockIAMAPI_PutRolePolicy_Call) Run(run func(_a0 *iam.PutRolePolicyInput)) *MockIAMAPI_PutRolePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.PutRolePolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_PutRolePolicy_Call) Return(_a0 *iam.PutRolePolicyOutput, _a1 error) *MockIAMAPI_PutRolePolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_PutRolePolicy_Call) RunAndReturn(run func(*iam.PutRolePolicyInput) (*iam.PutRolePolicyOutput, error)) *MockIAMAPI_PutRolePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// PutRolePolicyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) PutRolePolicyRequest(_a0 *iam.PutRolePolicyInput) (*request.Request, *iam.PutRolePolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.PutRolePolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.PutRolePolicyInput) (*request.Request, *iam.PutRolePolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.PutRolePolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.PutRolePolicyInput) *iam.PutRolePolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.PutRolePolicyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_PutRolePolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutRolePolicyRequest'
type MockIAMAPI_PutRolePolicyRequest_Call struct {
	*mock.Call
}

// PutRolePolicyRequest is a helper method to define mock.On call
//   - _a0 *iam.PutRolePolicyInput
func (_e *MockIAMAPI_Expecter) PutRolePolicyRequest(_a0 interface{}) *MockIAMAPI_PutRolePolicyRequest_Call {
	return &MockIAMAPI_PutRolePolicyRequest_Call{Call: _e.mock.On("PutRolePolicyRequest", _a0)}
}

func (_c *MockIAMAPI_PutRolePolicyRequest_Call) Run(run func(_a0 *iam.PutRolePolicyInput)) *MockIAMAPI_PutRolePolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.PutRolePolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_PutRolePolicyRequest_Call) Return(_a0 *request.Request, _a1 *iam.PutRolePolicyOutput) *MockIAMAPI_PutRolePolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_PutRolePolicyRequest_Call) RunAndReturn(run func(*iam.PutRolePolicyInput) (*request.Request, *iam.PutRolePolicyOutput)) *MockIAMAPI_PutRolePolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PutRolePolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) PutRolePolicyWithContext(_a0 context.Context, _a1 *iam.PutRolePolicyInput, _a2 ...request.Option) (*iam.PutRolePolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.PutRolePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.PutRolePolicyInput, ...request.Option) (*iam.PutRolePolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.PutRolePolicyInput, ...request.Option) *iam.PutRolePolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.PutRolePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.PutRolePolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_PutRolePolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutRolePolicyWithContext'
type MockIAMAPI_PutRolePolicyWithContext_Call struct {
	*mock.Call
}

// PutRolePolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.PutRolePolicyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) PutRolePolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_PutRolePolicyWithContext_Call {
	return &MockIAMAPI_PutRolePolicyWithContext_Call{Call: _e.mock.On("PutRolePolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_PutRolePolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.PutRolePolicyInput, _a2 ...request.Option)) *MockIAMAPI_PutRolePolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.PutRolePolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_PutRolePolicyWithContext_Call) Return(_a0 *iam.PutRolePolicyOutput, _a1 error) *MockIAMAPI_PutRolePolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_PutRolePolicyWithContext_Call) RunAndReturn(run func(context.Context, *iam.PutRolePolicyInput, ...request.Option) (*iam.PutRolePolicyOutput, error)) *MockIAMAPI_PutRolePolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PutUserPermissionsBoundary provides a mock function with given fields: _a0
func (_m *MockIAMAPI) PutUserPermissionsBoundary(_a0 *iam.PutUserPermissionsBoundaryInput) (*iam.PutUserPermissionsBoundaryOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.PutUserPermissionsBoundaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.PutUserPermissionsBoundaryInput) (*iam.PutUserPermissionsBoundaryOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.PutUserPermissionsBoundaryInput) *iam.PutUserPermissionsBoundaryOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.PutUserPermissionsBoundaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.PutUserPermissionsBoundaryInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_PutUserPermissionsBoundary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutUserPermissionsBoundary'
type MockIAMAPI_PutUserPermissionsBoundary_Call struct {
	*mock.Call
}

// PutUserPermissionsBoundary is a helper method to define mock.On call
//   - _a0 *iam.PutUserPermissionsBoundaryInput
func (_e *MockIAMAPI_Expecter) PutUserPermissionsBoundary(_a0 interface{}) *MockIAMAPI_PutUserPermissionsBoundary_Call {
	return &MockIAMAPI_PutUserPermissionsBoundary_Call{Call: _e.mock.On("PutUserPermissionsBoundary", _a0)}
}

func (_c *MockIAMAPI_PutUserPermissionsBoundary_Call) Run(run func(_a0 *iam.PutUserPermissionsBoundaryInput)) *MockIAMAPI_PutUserPermissionsBoundary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.PutUserPermissionsBoundaryInput))
	})
	return _c
}

func (_c *MockIAMAPI_PutUserPermissionsBoundary_Call) Return(_a0 *iam.PutUserPermissionsBoundaryOutput, _a1 error) *MockIAMAPI_PutUserPermissionsBoundary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_PutUserPermissionsBoundary_Call) RunAndReturn(run func(*iam.PutUserPermissionsBoundaryInput) (*iam.PutUserPermissionsBoundaryOutput, error)) *MockIAMAPI_PutUserPermissionsBoundary_Call {
	_c.Call.Return(run)
	return _c
}

// PutUserPermissionsBoundaryRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) PutUserPermissionsBoundaryRequest(_a0 *iam.PutUserPermissionsBoundaryInput) (*request.Request, *iam.PutUserPermissionsBoundaryOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.PutUserPermissionsBoundaryOutput
	if rf, ok := ret.Get(0).(func(*iam.PutUserPermissionsBoundaryInput) (*request.Request, *iam.PutUserPermissionsBoundaryOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.PutUserPermissionsBoundaryInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.PutUserPermissionsBoundaryInput) *iam.PutUserPermissionsBoundaryOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.PutUserPermissionsBoundaryOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_PutUserPermissionsBoundaryRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutUserPermissionsBoundaryRequest'
type MockIAMAPI_PutUserPermissionsBoundaryRequest_Call struct {
	*mock.Call
}

// PutUserPermissionsBoundaryRequest is a helper method to define mock.On call
//   - _a0 *iam.PutUserPermissionsBoundaryInput
func (_e *MockIAMAPI_Expecter) PutUserPermissionsBoundaryRequest(_a0 interface{}) *MockIAMAPI_PutUserPermissionsBoundaryRequest_Call {
	return &MockIAMAPI_PutUserPermissionsBoundaryRequest_Call{Call: _e.mock.On("PutUserPermissionsBoundaryRequest", _a0)}
}

func (_c *MockIAMAPI_PutUserPermissionsBoundaryRequest_Call) Run(run func(_a0 *iam.PutUserPermissionsBoundaryInput)) *MockIAMAPI_PutUserPermissionsBoundaryRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.PutUserPermissionsBoundaryInput))
	})
	return _c
}

func (_c *MockIAMAPI_PutUserPermissionsBoundaryRequest_Call) Return(_a0 *request.Request, _a1 *iam.PutUserPermissionsBoundaryOutput) *MockIAMAPI_PutUserPermissionsBoundaryRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_PutUserPermissionsBoundaryRequest_Call) RunAndReturn(run func(*iam.PutUserPermissionsBoundaryInput) (*request.Request, *iam.PutUserPermissionsBoundaryOutput)) *MockIAMAPI_PutUserPermissionsBoundaryRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PutUserPermissionsBoundaryWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) PutUserPermissionsBoundaryWithContext(_a0 context.Context, _a1 *iam.PutUserPermissionsBoundaryInput, _a2 ...request.Option) (*iam.PutUserPermissionsBoundaryOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.PutUserPermissionsBoundaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.PutUserPermissionsBoundaryInput, ...request.Option) (*iam.PutUserPermissionsBoundaryOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.PutUserPermissionsBoundaryInput, ...request.Option) *iam.PutUserPermissionsBoundaryOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.PutUserPermissionsBoundaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.PutUserPermissionsBoundaryInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_PutUserPermissionsBoundaryWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutUserPermissionsBoundaryWithContext'
type MockIAMAPI_PutUserPermissionsBoundaryWithContext_Call struct {
	*mock.Call
}

// PutUserPermissionsBoundaryWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.PutUserPermissionsBoundaryInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) PutUserPermissionsBoundaryWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_PutUserPermissionsBoundaryWithContext_Call {
	return &MockIAMAPI_PutUserPermissionsBoundaryWithContext_Call{Call: _e.mock.On("PutUserPermissionsBoundaryWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_PutUserPermissionsBoundaryWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.PutUserPermissionsBoundaryInput, _a2 ...request.Option)) *MockIAMAPI_PutUserPermissionsBoundaryWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.PutUserPermissionsBoundaryInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_PutUserPermissionsBoundaryWithContext_Call) Return(_a0 *iam.PutUserPermissionsBoundaryOutput, _a1 error) *MockIAMAPI_PutUserPermissionsBoundaryWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_PutUserPermissionsBoundaryWithContext_Call) RunAndReturn(run func(context.Context, *iam.PutUserPermissionsBoundaryInput, ...request.Option) (*iam.PutUserPermissionsBoundaryOutput, error)) *MockIAMAPI_PutUserPermissionsBoundaryWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PutUserPolicy provides a mock function with given fields: _a0
func (_m *MockIAMAPI) PutUserPolicy(_a0 *iam.PutUserPolicyInput) (*iam.PutUserPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.PutUserPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.PutUserPolicyInput) (*iam.PutUserPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.PutUserPolicyInput) *iam.PutUserPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.PutUserPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.PutUserPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_PutUserPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutUserPolicy'
type MockIAMAPI_PutUserPolicy_Call struct {
	*mock.Call
}

// PutUserPolicy is a helper method to define mock.On call
//   - _a0 *iam.PutUserPolicyInput
func (_e *MockIAMAPI_Expecter) PutUserPolicy(_a0 interface{}) *MockIAMAPI_PutUserPolicy_Call {
	return &MockIAMAPI_PutUserPolicy_Call{Call: _e.mock.On("PutUserPolicy", _a0)}
}

func (_c *MockIAMAPI_PutUserPolicy_Call) Run(run func(_a0 *iam.PutUserPolicyInput)) *MockIAMAPI_PutUserPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.PutUserPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_PutUserPolicy_Call) Return(_a0 *iam.PutUserPolicyOutput, _a1 error) *MockIAMAPI_PutUserPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_PutUserPolicy_Call) RunAndReturn(run func(*iam.PutUserPolicyInput) (*iam.PutUserPolicyOutput, error)) *MockIAMAPI_PutUserPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// PutUserPolicyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) PutUserPolicyRequest(_a0 *iam.PutUserPolicyInput) (*request.Request, *iam.PutUserPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.PutUserPolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.PutUserPolicyInput) (*request.Request, *iam.PutUserPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.PutUserPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.PutUserPolicyInput) *iam.PutUserPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.PutUserPolicyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_PutUserPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutUserPolicyRequest'
type MockIAMAPI_PutUserPolicyRequest_Call struct {
	*mock.Call
}

// PutUserPolicyRequest is a helper method to define mock.On call
//   - _a0 *iam.PutUserPolicyInput
func (_e *MockIAMAPI_Expecter) PutUserPolicyRequest(_a0 interface{}) *MockIAMAPI_PutUserPolicyRequest_Call {
	return &MockIAMAPI_PutUserPolicyRequest_Call{Call: _e.mock.On("PutUserPolicyRequest", _a0)}
}

func (_c *MockIAMAPI_PutUserPolicyRequest_Call) Run(run func(_a0 *iam.PutUserPolicyInput)) *MockIAMAPI_PutUserPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.PutUserPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_PutUserPolicyRequest_Call) Return(_a0 *request.Request, _a1 *iam.PutUserPolicyOutput) *MockIAMAPI_PutUserPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_PutUserPolicyRequest_Call) RunAndReturn(run func(*iam.PutUserPolicyInput) (*request.Request, *iam.PutUserPolicyOutput)) *MockIAMAPI_PutUserPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PutUserPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) PutUserPolicyWithContext(_a0 context.Context, _a1 *iam.PutUserPolicyInput, _a2 ...request.Option) (*iam.PutUserPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.PutUserPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.PutUserPolicyInput, ...request.Option) (*iam.PutUserPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.PutUserPolicyInput, ...request.Option) *iam.PutUserPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.PutUserPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.PutUserPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_PutUserPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutUserPolicyWithContext'
type MockIAMAPI_PutUserPolicyWithContext_Call struct {
	*mock.Call
}

// PutUserPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.PutUserPolicyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) PutUserPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_PutUserPolicyWithContext_Call {
	return &MockIAMAPI_PutUserPolicyWithContext_Call{Call: _e.mock.On("PutUserPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_PutUserPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.PutUserPolicyInput, _a2 ...request.Option)) *MockIAMAPI_PutUserPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.PutUserPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_PutUserPolicyWithContext_Call) Return(_a0 *iam.PutUserPolicyOutput, _a1 error) *MockIAMAPI_PutUserPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_PutUserPolicyWithContext_Call) RunAndReturn(run func(context.Context, *iam.PutUserPolicyInput, ...request.Option) (*iam.PutUserPolicyOutput, error)) *MockIAMAPI_PutUserPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveClientIDFromOpenIDConnectProvider provides a mock function with given fields: _a0
func (_m *MockIAMAPI) RemoveClientIDFromOpenIDConnectProvider(_a0 *iam.RemoveClientIDFromOpenIDConnectProviderInput) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.RemoveClientIDFromOpenIDConnectProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.RemoveClientIDFromOpenIDConnectProviderInput) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.RemoveClientIDFromOpenIDConnectProviderInput) *iam.RemoveClientIDFromOpenIDConnectProviderOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.RemoveClientIDFromOpenIDConnectProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.RemoveClientIDFromOpenIDConnectProviderInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_RemoveClientIDFromOpenIDConnectProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveClientIDFromOpenIDConnectProvider'
type MockIAMAPI_RemoveClientIDFromOpenIDConnectProvider_Call struct {
	*mock.Call
}

// RemoveClientIDFromOpenIDConnectProvider is a helper method to define mock.On call
//   - _a0 *iam.RemoveClientIDFromOpenIDConnectProviderInput
func (_e *MockIAMAPI_Expecter) RemoveClientIDFromOpenIDConnectProvider(_a0 interface{}) *MockIAMAPI_RemoveClientIDFromOpenIDConnectProvider_Call {
	return &MockIAMAPI_RemoveClientIDFromOpenIDConnectProvider_Call{Call: _e.mock.On("RemoveClientIDFromOpenIDConnectProvider", _a0)}
}

func (_c *MockIAMAPI_RemoveClientIDFromOpenIDConnectProvider_Call) Run(run func(_a0 *iam.RemoveClientIDFromOpenIDConnectProviderInput)) *MockIAMAPI_RemoveClientIDFromOpenIDConnectProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.RemoveClientIDFromOpenIDConnectProviderInput))
	})
	return _c
}

func (_c *MockIAMAPI_RemoveClientIDFromOpenIDConnectProvider_Call) Return(_a0 *iam.RemoveClientIDFromOpenIDConnectProviderOutput, _a1 error) *MockIAMAPI_RemoveClientIDFromOpenIDConnectProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_RemoveClientIDFromOpenIDConnectProvider_Call) RunAndReturn(run func(*iam.RemoveClientIDFromOpenIDConnectProviderInput) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error)) *MockIAMAPI_RemoveClientIDFromOpenIDConnectProvider_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveClientIDFromOpenIDConnectProviderRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) RemoveClientIDFromOpenIDConnectProviderRequest(_a0 *iam.RemoveClientIDFromOpenIDConnectProviderInput) (*request.Request, *iam.RemoveClientIDFromOpenIDConnectProviderOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.RemoveClientIDFromOpenIDConnectProviderOutput
	if rf, ok := ret.Get(0).(func(*iam.RemoveClientIDFromOpenIDConnectProviderInput) (*request.Request, *iam.RemoveClientIDFromOpenIDConnectProviderOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.RemoveClientIDFromOpenIDConnectProviderInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.RemoveClientIDFromOpenIDConnectProviderInput) *iam.RemoveClientIDFromOpenIDConnectProviderOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.RemoveClientIDFromOpenIDConnectProviderOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_RemoveClientIDFromOpenIDConnectProviderRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveClientIDFromOpenIDConnectProviderRequest'
type MockIAMAPI_RemoveClientIDFromOpenIDConnectProviderRequest_Call struct {
	*mock.Call
}

// RemoveClientIDFromOpenIDConnectProviderRequest is a helper method to define mock.On call
//   - _a0 *iam.RemoveClientIDFromOpenIDConnectProviderInput
func (_e *MockIAMAPI_Expecter) RemoveClientIDFromOpenIDConnectProviderRequest(_a0 interface{}) *MockIAMAPI_RemoveClientIDFromOpenIDConnectProviderRequest_Call {
	return &MockIAMAPI_RemoveClientIDFromOpenIDConnectProviderRequest_Call{Call: _e.mock.On("RemoveClientIDFromOpenIDConnectProviderRequest", _a0)}
}

func (_c *MockIAMAPI_RemoveClientIDFromOpenIDConnectProviderRequest_Call) Run(run func(_a0 *iam.RemoveClientIDFromOpenIDConnectProviderInput)) *MockIAMAPI_RemoveClientIDFromOpenIDConnectProviderRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.RemoveClientIDFromOpenIDConnectProviderInput))
	})
	return _c
}

func (_c *MockIAMAPI_RemoveClientIDFromOpenIDConnectProviderRequest_Call) Return(_a0 *request.Request, _a1 *iam.RemoveClientIDFromOpenIDConnectProviderOutput) *MockIAMAPI_RemoveClientIDFromOpenIDConnectProviderRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_RemoveClientIDFromOpenIDConnectProviderRequest_Call) RunAndReturn(run func(*iam.RemoveClientIDFromOpenIDConnectProviderInput) (*request.Request, *iam.RemoveClientIDFromOpenIDConnectProviderOutput)) *MockIAMAPI_RemoveClientIDFromOpenIDConnectProviderRequest_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveClientIDFromOpenIDConnectProviderWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) RemoveClientIDFromOpenIDConnectProviderWithContext(_a0 context.Context, _a1 *iam.RemoveClientIDFromOpenIDConnectProviderInput, _a2 ...request.Option) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.RemoveClientIDFromOpenIDConnectProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.RemoveClientIDFromOpenIDConnectProviderInput, ...request.Option) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.RemoveClientIDFromOpenIDConnectProviderInput, ...request.Option) *iam.RemoveClientIDFromOpenIDConnectProviderOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.RemoveClientIDFromOpenIDConnectProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.RemoveClientIDFromOpenIDConnectProviderInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_RemoveClientIDFromOpenIDConnectProviderWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveClientIDFromOpenIDConnectProviderWithContext'
type MockIAMAPI_RemoveClientIDFromOpenIDConnectProviderWithContext_Call struct {
	*mock.Call
}

// RemoveClientIDFromOpenIDConnectProviderWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.RemoveClientIDFromOpenIDConnectProviderInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) RemoveClientIDFromOpenIDConnectProviderWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_RemoveClientIDFromOpenIDConnectProviderWithContext_Call {
	return &MockIAMAPI_RemoveClientIDFromOpenIDConnectProviderWithContext_Call{Call: _e.mock.On("RemoveClientIDFromOpenIDConnectProviderWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_RemoveClientIDFromOpenIDConnectProviderWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.RemoveClientIDFromOpenIDConnectProviderInput, _a2 ...request.Option)) *MockIAMAPI_RemoveClientIDFromOpenIDConnectProviderWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.RemoveClientIDFromOpenIDConnectProviderInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_RemoveClientIDFromOpenIDConnectProviderWithContext_Call) Return(_a0 *iam.RemoveClientIDFromOpenIDConnectProviderOutput, _a1 error) *MockIAMAPI_RemoveClientIDFromOpenIDConnectProviderWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_RemoveClientIDFromOpenIDConnectProviderWithContext_Call) RunAndReturn(run func(context.Context, *iam.RemoveClientIDFromOpenIDConnectProviderInput, ...request.Option) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error)) *MockIAMAPI_RemoveClientIDFromOpenIDConnectProviderWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRoleFromInstanceProfile provides a mock function with given fields: _a0
func (_m *MockIAMAPI) RemoveRoleFromInstanceProfile(_a0 *iam.RemoveRoleFromInstanceProfileInput) (*iam.RemoveRoleFromInstanceProfileOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.RemoveRoleFromInstanceProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.RemoveRoleFromInstanceProfileInput) (*iam.RemoveRoleFromInstanceProfileOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.RemoveRoleFromInstanceProfileInput) *iam.RemoveRoleFromInstanceProfileOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.RemoveRoleFromInstanceProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.RemoveRoleFromInstanceProfileInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_RemoveRoleFromInstanceProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRoleFromInstanceProfile'
type MockIAMAPI_RemoveRoleFromInstanceProfile_Call struct {
	*mock.Call
}

// RemoveRoleFromInstanceProfile is a helper method to define mock.On call
//   - _a0 *iam.RemoveRoleFromInstanceProfileInput
func (_e *MockIAMAPI_Expecter) RemoveRoleFromInstanceProfile(_a0 interface{}) *MockIAMAPI_RemoveRoleFromInstanceProfile_Call {
	return &MockIAMAPI_RemoveRoleFromInstanceProfile_Call{Call: _e.mock.On("RemoveRoleFromInstanceProfile", _a0)}
}

func (_c *MockIAMAPI_RemoveRoleFromInstanceProfile_Call) Run(run func(_a0 *iam.RemoveRoleFromInstanceProfileInput)) *MockIAMAPI_RemoveRoleFromInstanceProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.RemoveRoleFromInstanceProfileInput))
	})
	return _c
}

func (_c *MockIAMAPI_RemoveRoleFromInstanceProfile_Call) Return(_a0 *iam.RemoveRoleFromInstanceProfileOutput, _a1 error) *MockIAMAPI_RemoveRoleFromInstanceProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_RemoveRoleFromInstanceProfile_Call) RunAndReturn(run func(*iam.RemoveRoleFromInstanceProfileInput) (*iam.RemoveRoleFromInstanceProfileOutput, error)) *MockIAMAPI_RemoveRoleFromInstanceProfile_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRoleFromInstanceProfileRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) RemoveRoleFromInstanceProfileRequest(_a0 *iam.RemoveRoleFromInstanceProfileInput) (*request.Request, *iam.RemoveRoleFromInstanceProfileOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.RemoveRoleFromInstanceProfileOutput
	if rf, ok := ret.Get(0).(func(*iam.RemoveRoleFromInstanceProfileInput) (*request.Request, *iam.RemoveRoleFromInstanceProfileOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.RemoveRoleFromInstanceProfileInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.RemoveRoleFromInstanceProfileInput) *iam.RemoveRoleFromInstanceProfileOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.RemoveRoleFromInstanceProfileOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_RemoveRoleFromInstanceProfileRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRoleFromInstanceProfileRequest'
type MockIAMAPI_RemoveRoleFromInstanceProfileRequest_Call struct {
	*mock.Call
}

// RemoveRoleFromInstanceProfileRequest is a helper method to define mock.On call
//   - _a0 *iam.RemoveRoleFromInstanceProfileInput
func (_e *MockIAMAPI_Expecter) RemoveRoleFromInstanceProfileRequest(_a0 interface{}) *MockIAMAPI_RemoveRoleFromInstanceProfileRequest_Call {
	return &MockIAMAPI_RemoveRoleFromInstanceProfileRequest_Call{Call: _e.mock.On("RemoveRoleFromInstanceProfileRequest", _a0)}
}

func (_c *MockIAMAPI_RemoveRoleFromInstanceProfileRequest_Call) Run(run func(_a0 *iam.RemoveRoleFromInstanceProfileInput)) *MockIAMAPI_RemoveRoleFromInstanceProfileRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.RemoveRoleFromInstanceProfileInput))
	})
	return _c
}

func (_c *MockIAMAPI_RemoveRoleFromInstanceProfileRequest_Call) Return(_a0 *request.Request, _a1 *iam.RemoveRoleFromInstanceProfileOutput) *MockIAMAPI_RemoveRoleFromInstanceProfileRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_RemoveRoleFromInstanceProfileRequest_Call) RunAndReturn(run func(*iam.RemoveRoleFromInstanceProfileInput) (*request.Request, *iam.RemoveRoleFromInstanceProfileOutput)) *MockIAMAPI_RemoveRoleFromInstanceProfileRequest_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRoleFromInstanceProfileWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) RemoveRoleFromInstanceProfileWithContext(_a0 context.Context, _a1 *iam.RemoveRoleFromInstanceProfileInput, _a2 ...request.Option) (*iam.RemoveRoleFromInstanceProfileOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.RemoveRoleFromInstanceProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.RemoveRoleFromInstanceProfileInput, ...request.Option) (*iam.RemoveRoleFromInstanceProfileOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.RemoveRoleFromInstanceProfileInput, ...request.Option) *iam.RemoveRoleFromInstanceProfileOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.RemoveRoleFromInstanceProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.RemoveRoleFromInstanceProfileInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_RemoveRoleFromInstanceProfileWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRoleFromInstanceProfileWithContext'
type MockIAMAPI_RemoveRoleFromInstanceProfileWithContext_Call struct {
	*mock.Call
}

// RemoveRoleFromInstanceProfileWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.RemoveRoleFromInstanceProfileInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) RemoveRoleFromInstanceProfileWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_RemoveRoleFromInstanceProfileWithContext_Call {
	return &MockIAMAPI_RemoveRoleFromInstanceProfileWithContext_Call{Call: _e.mock.On("RemoveRoleFromInstanceProfileWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_RemoveRoleFromInstanceProfileWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.RemoveRoleFromInstanceProfileInput, _a2 ...request.Option)) *MockIAMAPI_RemoveRoleFromInstanceProfileWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.RemoveRoleFromInstanceProfileInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_RemoveRoleFromInstanceProfileWithContext_Call) Return(_a0 *iam.RemoveRoleFromInstanceProfileOutput, _a1 error) *MockIAMAPI_RemoveRoleFromInstanceProfileWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_RemoveRoleFromInstanceProfileWithContext_Call) RunAndReturn(run func(context.Context, *iam.RemoveRoleFromInstanceProfileInput, ...request.Option) (*iam.RemoveRoleFromInstanceProfileOutput, error)) *MockIAMAPI_RemoveRoleFromInstanceProfileWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUserFromGroup provides a mock function with given fields: _a0
func (_m *MockIAMAPI) RemoveUserFromGroup(_a0 *iam.RemoveUserFromGroupInput) (*iam.RemoveUserFromGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.RemoveUserFromGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.RemoveUserFromGroupInput) (*iam.RemoveUserFromGroupOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.RemoveUserFromGroupInput) *iam.RemoveUserFromGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.RemoveUserFromGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.RemoveUserFromGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_RemoveUserFromGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUserFromGroup'
type MockIAMAPI_RemoveUserFromGroup_Call struct {
	*mock.Call
}

// RemoveUserFromGroup is a helper method to define mock.On call
//   - _a0 *iam.RemoveUserFromGroupInput
func (_e *MockIAMAPI_Expecter) RemoveUserFromGroup(_a0 interface{}) *MockIAMAPI_RemoveUserFromGroup_Call {
	return &MockIAMAPI_RemoveUserFromGroup_Call{Call: _e.mock.On("RemoveUserFromGroup", _a0)}
}

func (_c *MockIAMAPI_RemoveUserFromGroup_Call) Run(run func(_a0 *iam.RemoveUserFromGroupInput)) *MockIAMAPI_RemoveUserFromGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.RemoveUserFromGroupInput))
	})
	return _c
}

func (_c *MockIAMAPI_RemoveUserFromGroup_Call) Return(_a0 *iam.RemoveUserFromGroupOutput, _a1 error) *MockIAMAPI_RemoveUserFromGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_RemoveUserFromGroup_Call) RunAndReturn(run func(*iam.RemoveUserFromGroupInput) (*iam.RemoveUserFromGroupOutput, error)) *MockIAMAPI_RemoveUserFromGroup_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUserFromGroupRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) RemoveUserFromGroupRequest(_a0 *iam.RemoveUserFromGroupInput) (*request.Request, *iam.RemoveUserFromGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.RemoveUserFromGroupOutput
	if rf, ok := ret.Get(0).(func(*iam.RemoveUserFromGroupInput) (*request.Request, *iam.RemoveUserFromGroupOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.RemoveUserFromGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.RemoveUserFromGroupInput) *iam.RemoveUserFromGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.RemoveUserFromGroupOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_RemoveUserFromGroupRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUserFromGroupRequest'
type MockIAMAPI_RemoveUserFromGroupRequest_Call struct {
	*mock.Call
}

// RemoveUserFromGroupRequest is a helper method to define mock.On call
//   - _a0 *iam.RemoveUserFromGroupInput
func (_e *MockIAMAPI_Expecter) RemoveUserFromGroupRequest(_a0 interface{}) *MockIAMAPI_RemoveUserFromGroupRequest_Call {
	return &MockIAMAPI_RemoveUserFromGroupRequest_Call{Call: _e.mock.On("RemoveUserFromGroupRequest", _a0)}
}

func (_c *MockIAMAPI_RemoveUserFromGroupRequest_Call) Run(run func(_a0 *iam.RemoveUserFromGroupInput)) *MockIAMAPI_RemoveUserFromGroupRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.RemoveUserFromGroupInput))
	})
	return _c
}

func (_c *MockIAMAPI_RemoveUserFromGroupRequest_Call) Return(_a0 *request.Request, _a1 *iam.RemoveUserFromGroupOutput) *MockIAMAPI_RemoveUserFromGroupRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_RemoveUserFromGroupRequest_Call) RunAndReturn(run func(*iam.RemoveUserFromGroupInput) (*request.Request, *iam.RemoveUserFromGroupOutput)) *MockIAMAPI_RemoveUserFromGroupRequest_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUserFromGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) RemoveUserFromGroupWithContext(_a0 context.Context, _a1 *iam.RemoveUserFromGroupInput, _a2 ...request.Option) (*iam.RemoveUserFromGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.RemoveUserFromGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.RemoveUserFromGroupInput, ...request.Option) (*iam.RemoveUserFromGroupOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.RemoveUserFromGroupInput, ...request.Option) *iam.RemoveUserFromGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.RemoveUserFromGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.RemoveUserFromGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_RemoveUserFromGroupWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUserFromGroupWithContext'
type MockIAMAPI_RemoveUserFromGroupWithContext_Call struct {
	*mock.Call
}

// RemoveUserFromGroupWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.RemoveUserFromGroupInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) RemoveUserFromGroupWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_RemoveUserFromGroupWithContext_Call {
	return &MockIAMAPI_RemoveUserFromGroupWithContext_Call{Call: _e.mock.On("RemoveUserFromGroupWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_RemoveUserFromGroupWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.RemoveUserFromGroupInput, _a2 ...request.Option)) *MockIAMAPI_RemoveUserFromGroupWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.RemoveUserFromGroupInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_RemoveUserFromGroupWithContext_Call) Return(_a0 *iam.RemoveUserFromGroupOutput, _a1 error) *MockIAMAPI_RemoveUserFromGroupWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_RemoveUserFromGroupWithContext_Call) RunAndReturn(run func(context.Context, *iam.RemoveUserFromGroupInput, ...request.Option) (*iam.RemoveUserFromGroupOutput, error)) *MockIAMAPI_RemoveUserFromGroupWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ResetServiceSpecificCredential provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ResetServiceSpecificCredential(_a0 *iam.ResetServiceSpecificCredentialInput) (*iam.ResetServiceSpecificCredentialOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ResetServiceSpecificCredentialOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ResetServiceSpecificCredentialInput) (*iam.ResetServiceSpecificCredentialOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ResetServiceSpecificCredentialInput) *iam.ResetServiceSpecificCredentialOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ResetServiceSpecificCredentialOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ResetServiceSpecificCredentialInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ResetServiceSpecificCredential_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetServiceSpecificCredential'
type MockIAMAPI_ResetServiceSpecificCredential_Call struct {
	*mock.Call
}

// ResetServiceSpecificCredential is a helper method to define mock.On call
//   - _a0 *iam.ResetServiceSpecificCredentialInput
func (_e *MockIAMAPI_Expecter) ResetServiceSpecificCredential(_a0 interface{}) *MockIAMAPI_ResetServiceSpecificCredential_Call {
	return &MockIAMAPI_ResetServiceSpecificCredential_Call{Call: _e.mock.On("ResetServiceSpecificCredential", _a0)}
}

func (_c *MockIAMAPI_ResetServiceSpecificCredential_Call) Run(run func(_a0 *iam.ResetServiceSpecificCredentialInput)) *MockIAMAPI_ResetServiceSpecificCredential_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ResetServiceSpecificCredentialInput))
	})
	return _c
}

func (_c *MockIAMAPI_ResetServiceSpecificCredential_Call) Return(_a0 *iam.ResetServiceSpecificCredentialOutput, _a1 error) *MockIAMAPI_ResetServiceSpecificCredential_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ResetServiceSpecificCredential_Call) RunAndReturn(run func(*iam.ResetServiceSpecificCredentialInput) (*iam.ResetServiceSpecificCredentialOutput, error)) *MockIAMAPI_ResetServiceSpecificCredential_Call {
	_c.Call.Return(run)
	return _c
}

// ResetServiceSpecificCredentialRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ResetServiceSpecificCredentialRequest(_a0 *iam.ResetServiceSpecificCredentialInput) (*request.Request, *iam.ResetServiceSpecificCredentialOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ResetServiceSpecificCredentialOutput
	if rf, ok := ret.Get(0).(func(*iam.ResetServiceSpecificCredentialInput) (*request.Request, *iam.ResetServiceSpecificCredentialOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ResetServiceSpecificCredentialInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ResetServiceSpecificCredentialInput) *iam.ResetServiceSpecificCredentialOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ResetServiceSpecificCredentialOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ResetServiceSpecificCredentialRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetServiceSpecificCredentialRequest'
type MockIAMAPI_ResetServiceSpecificCredentialRequest_Call struct {
	*mock.Call
}

// ResetServiceSpecificCredentialRequest is a helper method to define mock.On call
//   - _a0 *iam.ResetServiceSpecificCredentialInput
func (_e *MockIAMAPI_Expecter) ResetServiceSpecificCredentialRequest(_a0 interface{}) *MockIAMAPI_ResetServiceSpecificCredentialRequest_Call {
	return &MockIAMAPI_ResetServiceSpecificCredentialRequest_Call{Call: _e.mock.On("ResetServiceSpecificCredentialRequest", _a0)}
}

func (_c *MockIAMAPI_ResetServiceSpecificCredentialRequest_Call) Run(run func(_a0 *iam.ResetServiceSpecificCredentialInput)) *MockIAMAPI_ResetServiceSpecificCredentialRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ResetServiceSpecificCredentialInput))
	})
	return _c
}

func (_c *MockIAMAPI_ResetServiceSpecificCredentialRequest_Call) Return(_a0 *request.Request, _a1 *iam.ResetServiceSpecificCredentialOutput) *MockIAMAPI_ResetServiceSpecificCredentialRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ResetServiceSpecificCredentialRequest_Call) RunAndReturn(run func(*iam.ResetServiceSpecificCredentialInput) (*request.Request, *iam.ResetServiceSpecificCredentialOutput)) *MockIAMAPI_ResetServiceSpecificCredentialRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ResetServiceSpecificCredentialWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ResetServiceSpecificCredentialWithContext(_a0 context.Context, _a1 *iam.ResetServiceSpecificCredentialInput, _a2 ...request.Option) (*iam.ResetServiceSpecificCredentialOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ResetServiceSpecificCredentialOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ResetServiceSpecificCredentialInput, ...request.Option) (*iam.ResetServiceSpecificCredentialOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ResetServiceSpecificCredentialInput, ...request.Option) *iam.ResetServiceSpecificCredentialOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ResetServiceSpecificCredentialOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ResetServiceSpecificCredentialInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ResetServiceSpecificCredentialWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetServiceSpecificCredentialWithContext'
type MockIAMAPI_ResetServiceSpecificCredentialWithContext_Call struct {
	*mock.Call
}

// ResetServiceSpecificCredentialWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ResetServiceSpecificCredentialInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ResetServiceSpecificCredentialWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ResetServiceSpecificCredentialWithContext_Call {
	return &MockIAMAPI_ResetServiceSpecificCredentialWithContext_Call{Call: _e.mock.On("ResetServiceSpecificCredentialWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ResetServiceSpecificCredentialWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ResetServiceSpecificCredentialInput, _a2 ...request.Option)) *MockIAMAPI_ResetServiceSpecificCredentialWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ResetServiceSpecificCredentialInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ResetServiceSpecificCredentialWithContext_Call) Return(_a0 *iam.ResetServiceSpecificCredentialOutput, _a1 error) *MockIAMAPI_ResetServiceSpecificCredentialWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ResetServiceSpecificCredentialWithContext_Call) RunAndReturn(run func(context.Context, *iam.ResetServiceSpecificCredentialInput, ...request.Option) (*iam.ResetServiceSpecificCredentialOutput, error)) *MockIAMAPI_ResetServiceSpecificCredentialWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ResyncMFADevice provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ResyncMFADevice(_a0 *iam.ResyncMFADeviceInput) (*iam.ResyncMFADeviceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.ResyncMFADeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.ResyncMFADeviceInput) (*iam.ResyncMFADeviceOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ResyncMFADeviceInput) *iam.ResyncMFADeviceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ResyncMFADeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ResyncMFADeviceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ResyncMFADevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResyncMFADevice'
type MockIAMAPI_ResyncMFADevice_Call struct {
	*mock.Call
}

// ResyncMFADevice is a helper method to define mock.On call
//   - _a0 *iam.ResyncMFADeviceInput
func (_e *MockIAMAPI_Expecter) ResyncMFADevice(_a0 interface{}) *MockIAMAPI_ResyncMFADevice_Call {
	return &MockIAMAPI_ResyncMFADevice_Call{Call: _e.mock.On("ResyncMFADevice", _a0)}
}

func (_c *MockIAMAPI_ResyncMFADevice_Call) Run(run func(_a0 *iam.ResyncMFADeviceInput)) *MockIAMAPI_ResyncMFADevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ResyncMFADeviceInput))
	})
	return _c
}

func (_c *MockIAMAPI_ResyncMFADevice_Call) Return(_a0 *iam.ResyncMFADeviceOutput, _a1 error) *MockIAMAPI_ResyncMFADevice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ResyncMFADevice_Call) RunAndReturn(run func(*iam.ResyncMFADeviceInput) (*iam.ResyncMFADeviceOutput, error)) *MockIAMAPI_ResyncMFADevice_Call {
	_c.Call.Return(run)
	return _c
}

// ResyncMFADeviceRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) ResyncMFADeviceRequest(_a0 *iam.ResyncMFADeviceInput) (*request.Request, *iam.ResyncMFADeviceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.ResyncMFADeviceOutput
	if rf, ok := ret.Get(0).(func(*iam.ResyncMFADeviceInput) (*request.Request, *iam.ResyncMFADeviceOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.ResyncMFADeviceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.ResyncMFADeviceInput) *iam.ResyncMFADeviceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.ResyncMFADeviceOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_ResyncMFADeviceRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResyncMFADeviceRequest'
type MockIAMAPI_ResyncMFADeviceRequest_Call struct {
	*mock.Call
}

// ResyncMFADeviceRequest is a helper method to define mock.On call
//   - _a0 *iam.ResyncMFADeviceInput
func (_e *MockIAMAPI_Expecter) ResyncMFADeviceRequest(_a0 interface{}) *MockIAMAPI_ResyncMFADeviceRequest_Call {
	return &MockIAMAPI_ResyncMFADeviceRequest_Call{Call: _e.mock.On("ResyncMFADeviceRequest", _a0)}
}

func (_c *MockIAMAPI_ResyncMFADeviceRequest_Call) Run(run func(_a0 *iam.ResyncMFADeviceInput)) *MockIAMAPI_ResyncMFADeviceRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.ResyncMFADeviceInput))
	})
	return _c
}

func (_c *MockIAMAPI_ResyncMFADeviceRequest_Call) Return(_a0 *request.Request, _a1 *iam.ResyncMFADeviceOutput) *MockIAMAPI_ResyncMFADeviceRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ResyncMFADeviceRequest_Call) RunAndReturn(run func(*iam.ResyncMFADeviceInput) (*request.Request, *iam.ResyncMFADeviceOutput)) *MockIAMAPI_ResyncMFADeviceRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ResyncMFADeviceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) ResyncMFADeviceWithContext(_a0 context.Context, _a1 *iam.ResyncMFADeviceInput, _a2 ...request.Option) (*iam.ResyncMFADeviceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.ResyncMFADeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ResyncMFADeviceInput, ...request.Option) (*iam.ResyncMFADeviceOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.ResyncMFADeviceInput, ...request.Option) *iam.ResyncMFADeviceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ResyncMFADeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.ResyncMFADeviceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_ResyncMFADeviceWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResyncMFADeviceWithContext'
type MockIAMAPI_ResyncMFADeviceWithContext_Call struct {
	*mock.Call
}

// ResyncMFADeviceWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.ResyncMFADeviceInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) ResyncMFADeviceWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_ResyncMFADeviceWithContext_Call {
	return &MockIAMAPI_ResyncMFADeviceWithContext_Call{Call: _e.mock.On("ResyncMFADeviceWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_ResyncMFADeviceWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.ResyncMFADeviceInput, _a2 ...request.Option)) *MockIAMAPI_ResyncMFADeviceWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.ResyncMFADeviceInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_ResyncMFADeviceWithContext_Call) Return(_a0 *iam.ResyncMFADeviceOutput, _a1 error) *MockIAMAPI_ResyncMFADeviceWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_ResyncMFADeviceWithContext_Call) RunAndReturn(run func(context.Context, *iam.ResyncMFADeviceInput, ...request.Option) (*iam.ResyncMFADeviceOutput, error)) *MockIAMAPI_ResyncMFADeviceWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// SetDefaultPolicyVersion provides a mock function with given fields: _a0
func (_m *MockIAMAPI) SetDefaultPolicyVersion(_a0 *iam.SetDefaultPolicyVersionInput) (*iam.SetDefaultPolicyVersionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.SetDefaultPolicyVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.SetDefaultPolicyVersionInput) (*iam.SetDefaultPolicyVersionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.SetDefaultPolicyVersionInput) *iam.SetDefaultPolicyVersionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.SetDefaultPolicyVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.SetDefaultPolicyVersionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_SetDefaultPolicyVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDefaultPolicyVersion'
type MockIAMAPI_SetDefaultPolicyVersion_Call struct {
	*mock.Call
}

// SetDefaultPolicyVersion is a helper method to define mock.On call
//   - _a0 *iam.SetDefaultPolicyVersionInput
func (_e *MockIAMAPI_Expecter) SetDefaultPolicyVersion(_a0 interface{}) *MockIAMAPI_SetDefaultPolicyVersion_Call {
	return &MockIAMAPI_SetDefaultPolicyVersion_Call{Call: _e.mock.On("SetDefaultPolicyVersion", _a0)}
}

func (_c *MockIAMAPI_SetDefaultPolicyVersion_Call) Run(run func(_a0 *iam.SetDefaultPolicyVersionInput)) *MockIAMAPI_SetDefaultPolicyVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.SetDefaultPolicyVersionInput))
	})
	return _c
}

func (_c *MockIAMAPI_SetDefaultPolicyVersion_Call) Return(_a0 *iam.SetDefaultPolicyVersionOutput, _a1 error) *MockIAMAPI_SetDefaultPolicyVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_SetDefaultPolicyVersion_Call) RunAndReturn(run func(*iam.SetDefaultPolicyVersionInput) (*iam.SetDefaultPolicyVersionOutput, error)) *MockIAMAPI_SetDefaultPolicyVersion_Call {
	_c.Call.Return(run)
	return _c
}

// SetDefaultPolicyVersionRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) SetDefaultPolicyVersionRequest(_a0 *iam.SetDefaultPolicyVersionInput) (*request.Request, *iam.SetDefaultPolicyVersionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.SetDefaultPolicyVersionOutput
	if rf, ok := ret.Get(0).(func(*iam.SetDefaultPolicyVersionInput) (*request.Request, *iam.SetDefaultPolicyVersionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.SetDefaultPolicyVersionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.SetDefaultPolicyVersionInput) *iam.SetDefaultPolicyVersionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.SetDefaultPolicyVersionOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_SetDefaultPolicyVersionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDefaultPolicyVersionRequest'
type MockIAMAPI_SetDefaultPolicyVersionRequest_Call struct {
	*mock.Call
}

// SetDefaultPolicyVersionRequest is a helper method to define mock.On call
//   - _a0 *iam.SetDefaultPolicyVersionInput
func (_e *MockIAMAPI_Expecter) SetDefaultPolicyVersionRequest(_a0 interface{}) *MockIAMAPI_SetDefaultPolicyVersionRequest_Call {
	return &MockIAMAPI_SetDefaultPolicyVersionRequest_Call{Call: _e.mock.On("SetDefaultPolicyVersionRequest", _a0)}
}

func (_c *MockIAMAPI_SetDefaultPolicyVersionRequest_Call) Run(run func(_a0 *iam.SetDefaultPolicyVersionInput)) *MockIAMAPI_SetDefaultPolicyVersionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.SetDefaultPolicyVersionInput))
	})
	return _c
}

func (_c *MockIAMAPI_SetDefaultPolicyVersionRequest_Call) Return(_a0 *request.Request, _a1 *iam.SetDefaultPolicyVersionOutput) *MockIAMAPI_SetDefaultPolicyVersionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_SetDefaultPolicyVersionRequest_Call) RunAndReturn(run func(*iam.SetDefaultPolicyVersionInput) (*request.Request, *iam.SetDefaultPolicyVersionOutput)) *MockIAMAPI_SetDefaultPolicyVersionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// SetDefaultPolicyVersionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) SetDefaultPolicyVersionWithContext(_a0 context.Context, _a1 *iam.SetDefaultPolicyVersionInput, _a2 ...request.Option) (*iam.SetDefaultPolicyVersionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.SetDefaultPolicyVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.SetDefaultPolicyVersionInput, ...request.Option) (*iam.SetDefaultPolicyVersionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.SetDefaultPolicyVersionInput, ...request.Option) *iam.SetDefaultPolicyVersionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.SetDefaultPolicyVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.SetDefaultPolicyVersionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_SetDefaultPolicyVersionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDefaultPolicyVersionWithContext'
type MockIAMAPI_SetDefaultPolicyVersionWithContext_Call struct {
	*mock.Call
}

// SetDefaultPolicyVersionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.SetDefaultPolicyVersionInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) SetDefaultPolicyVersionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_SetDefaultPolicyVersionWithContext_Call {
	return &MockIAMAPI_SetDefaultPolicyVersionWithContext_Call{Call: _e.mock.On("SetDefaultPolicyVersionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_SetDefaultPolicyVersionWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.SetDefaultPolicyVersionInput, _a2 ...request.Option)) *MockIAMAPI_SetDefaultPolicyVersionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.SetDefaultPolicyVersionInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_SetDefaultPolicyVersionWithContext_Call) Return(_a0 *iam.SetDefaultPolicyVersionOutput, _a1 error) *MockIAMAPI_SetDefaultPolicyVersionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_SetDefaultPolicyVersionWithContext_Call) RunAndReturn(run func(context.Context, *iam.SetDefaultPolicyVersionInput, ...request.Option) (*iam.SetDefaultPolicyVersionOutput, error)) *MockIAMAPI_SetDefaultPolicyVersionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// SetSecurityTokenServicePreferences provides a mock function with given fields: _a0
func (_m *MockIAMAPI) SetSecurityTokenServicePreferences(_a0 *iam.SetSecurityTokenServicePreferencesInput) (*iam.SetSecurityTokenServicePreferencesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.SetSecurityTokenServicePreferencesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.SetSecurityTokenServicePreferencesInput) (*iam.SetSecurityTokenServicePreferencesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.SetSecurityTokenServicePreferencesInput) *iam.SetSecurityTokenServicePreferencesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.SetSecurityTokenServicePreferencesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.SetSecurityTokenServicePreferencesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_SetSecurityTokenServicePreferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSecurityTokenServicePreferences'
type MockIAMAPI_SetSecurityTokenServicePreferences_Call struct {
	*mock.Call
}

// SetSecurityTokenServicePreferences is a helper method to define mock.On call
//   - _a0 *iam.SetSecurityTokenServicePreferencesInput
func (_e *MockIAMAPI_Expecter) SetSecurityTokenServicePreferences(_a0 interface{}) *MockIAMAPI_SetSecurityTokenServicePreferences_Call {
	return &MockIAMAPI_SetSecurityTokenServicePreferences_Call{Call: _e.mock.On("SetSecurityTokenServicePreferences", _a0)}
}

func (_c *MockIAMAPI_SetSecurityTokenServicePreferences_Call) Run(run func(_a0 *iam.SetSecurityTokenServicePreferencesInput)) *MockIAMAPI_SetSecurityTokenServicePreferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.SetSecurityTokenServicePreferencesInput))
	})
	return _c
}

func (_c *MockIAMAPI_SetSecurityTokenServicePreferences_Call) Return(_a0 *iam.SetSecurityTokenServicePreferencesOutput, _a1 error) *MockIAMAPI_SetSecurityTokenServicePreferences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_SetSecurityTokenServicePreferences_Call) RunAndReturn(run func(*iam.SetSecurityTokenServicePreferencesInput) (*iam.SetSecurityTokenServicePreferencesOutput, error)) *MockIAMAPI_SetSecurityTokenServicePreferences_Call {
	_c.Call.Return(run)
	return _c
}

// SetSecurityTokenServicePreferencesRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) SetSecurityTokenServicePreferencesRequest(_a0 *iam.SetSecurityTokenServicePreferencesInput) (*request.Request, *iam.SetSecurityTokenServicePreferencesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.SetSecurityTokenServicePreferencesOutput
	if rf, ok := ret.Get(0).(func(*iam.SetSecurityTokenServicePreferencesInput) (*request.Request, *iam.SetSecurityTokenServicePreferencesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.SetSecurityTokenServicePreferencesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.SetSecurityTokenServicePreferencesInput) *iam.SetSecurityTokenServicePreferencesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.SetSecurityTokenServicePreferencesOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_SetSecurityTokenServicePreferencesRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSecurityTokenServicePreferencesRequest'
type MockIAMAPI_SetSecurityTokenServicePreferencesRequest_Call struct {
	*mock.Call
}

// SetSecurityTokenServicePreferencesRequest is a helper method to define mock.On call
//   - _a0 *iam.SetSecurityTokenServicePreferencesInput
func (_e *MockIAMAPI_Expecter) SetSecurityTokenServicePreferencesRequest(_a0 interface{}) *MockIAMAPI_SetSecurityTokenServicePreferencesRequest_Call {
	return &MockIAMAPI_SetSecurityTokenServicePreferencesRequest_Call{Call: _e.mock.On("SetSecurityTokenServicePreferencesRequest", _a0)}
}

func (_c *MockIAMAPI_SetSecurityTokenServicePreferencesRequest_Call) Run(run func(_a0 *iam.SetSecurityTokenServicePreferencesInput)) *MockIAMAPI_SetSecurityTokenServicePreferencesRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.SetSecurityTokenServicePreferencesInput))
	})
	return _c
}

func (_c *MockIAMAPI_SetSecurityTokenServicePreferencesRequest_Call) Return(_a0 *request.Request, _a1 *iam.SetSecurityTokenServicePreferencesOutput) *MockIAMAPI_SetSecurityTokenServicePreferencesRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_SetSecurityTokenServicePreferencesRequest_Call) RunAndReturn(run func(*iam.SetSecurityTokenServicePreferencesInput) (*request.Request, *iam.SetSecurityTokenServicePreferencesOutput)) *MockIAMAPI_SetSecurityTokenServicePreferencesRequest_Call {
	_c.Call.Return(run)
	return _c
}

// SetSecurityTokenServicePreferencesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) SetSecurityTokenServicePreferencesWithContext(_a0 context.Context, _a1 *iam.SetSecurityTokenServicePreferencesInput, _a2 ...request.Option) (*iam.SetSecurityTokenServicePreferencesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.SetSecurityTokenServicePreferencesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.SetSecurityTokenServicePreferencesInput, ...request.Option) (*iam.SetSecurityTokenServicePreferencesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.SetSecurityTokenServicePreferencesInput, ...request.Option) *iam.SetSecurityTokenServicePreferencesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.SetSecurityTokenServicePreferencesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.SetSecurityTokenServicePreferencesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_SetSecurityTokenServicePreferencesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSecurityTokenServicePreferencesWithContext'
type MockIAMAPI_SetSecurityTokenServicePreferencesWithContext_Call struct {
	*mock.Call
}

// SetSecurityTokenServicePreferencesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.SetSecurityTokenServicePreferencesInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) SetSecurityTokenServicePreferencesWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_SetSecurityTokenServicePreferencesWithContext_Call {
	return &MockIAMAPI_SetSecurityTokenServicePreferencesWithContext_Call{Call: _e.mock.On("SetSecurityTokenServicePreferencesWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_SetSecurityTokenServicePreferencesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.SetSecurityTokenServicePreferencesInput, _a2 ...request.Option)) *MockIAMAPI_SetSecurityTokenServicePreferencesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.SetSecurityTokenServicePreferencesInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_SetSecurityTokenServicePreferencesWithContext_Call) Return(_a0 *iam.SetSecurityTokenServicePreferencesOutput, _a1 error) *MockIAMAPI_SetSecurityTokenServicePreferencesWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_SetSecurityTokenServicePreferencesWithContext_Call) RunAndReturn(run func(context.Context, *iam.SetSecurityTokenServicePreferencesInput, ...request.Option) (*iam.SetSecurityTokenServicePreferencesOutput, error)) *MockIAMAPI_SetSecurityTokenServicePreferencesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// SimulateCustomPolicy provides a mock function with given fields: _a0
func (_m *MockIAMAPI) SimulateCustomPolicy(_a0 *iam.SimulateCustomPolicyInput) (*iam.SimulatePolicyResponse, error) {
	ret := _m.Called(_a0)

	var r0 *iam.SimulatePolicyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.SimulateCustomPolicyInput) (*iam.SimulatePolicyResponse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.SimulateCustomPolicyInput) *iam.SimulatePolicyResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.SimulatePolicyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.SimulateCustomPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_SimulateCustomPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SimulateCustomPolicy'
type MockIAMAPI_SimulateCustomPolicy_Call struct {
	*mock.Call
}

// SimulateCustomPolicy is a helper method to define mock.On call
//   - _a0 *iam.SimulateCustomPolicyInput
func (_e *MockIAMAPI_Expecter) SimulateCustomPolicy(_a0 interface{}) *MockIAMAPI_SimulateCustomPolicy_Call {
	return &MockIAMAPI_SimulateCustomPolicy_Call{Call: _e.mock.On("SimulateCustomPolicy", _a0)}
}

func (_c *MockIAMAPI_SimulateCustomPolicy_Call) Run(run func(_a0 *iam.SimulateCustomPolicyInput)) *MockIAMAPI_SimulateCustomPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.SimulateCustomPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_SimulateCustomPolicy_Call) Return(_a0 *iam.SimulatePolicyResponse, _a1 error) *MockIAMAPI_SimulateCustomPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_SimulateCustomPolicy_Call) RunAndReturn(run func(*iam.SimulateCustomPolicyInput) (*iam.SimulatePolicyResponse, error)) *MockIAMAPI_SimulateCustomPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// SimulateCustomPolicyPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) SimulateCustomPolicyPages(_a0 *iam.SimulateCustomPolicyInput, _a1 func(*iam.SimulatePolicyResponse, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.SimulateCustomPolicyInput, func(*iam.SimulatePolicyResponse, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_SimulateCustomPolicyPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SimulateCustomPolicyPages'
type MockIAMAPI_SimulateCustomPolicyPages_Call struct {
	*mock.Call
}

// SimulateCustomPolicyPages is a helper method to define mock.On call
//   - _a0 *iam.SimulateCustomPolicyInput
//   - _a1 func(*iam.SimulatePolicyResponse , bool) bool
func (_e *MockIAMAPI_Expecter) SimulateCustomPolicyPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_SimulateCustomPolicyPages_Call {
	return &MockIAMAPI_SimulateCustomPolicyPages_Call{Call: _e.mock.On("SimulateCustomPolicyPages", _a0, _a1)}
}

func (_c *MockIAMAPI_SimulateCustomPolicyPages_Call) Run(run func(_a0 *iam.SimulateCustomPolicyInput, _a1 func(*iam.SimulatePolicyResponse, bool) bool)) *MockIAMAPI_SimulateCustomPolicyPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.SimulateCustomPolicyInput), args[1].(func(*iam.SimulatePolicyResponse, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_SimulateCustomPolicyPages_Call) Return(_a0 error) *MockIAMAPI_SimulateCustomPolicyPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_SimulateCustomPolicyPages_Call) RunAndReturn(run func(*iam.SimulateCustomPolicyInput, func(*iam.SimulatePolicyResponse, bool) bool) error) *MockIAMAPI_SimulateCustomPolicyPages_Call {
	_c.Call.Return(run)
	return _c
}

// SimulateCustomPolicyPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) SimulateCustomPolicyPagesWithContext(_a0 context.Context, _a1 *iam.SimulateCustomPolicyInput, _a2 func(*iam.SimulatePolicyResponse, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.SimulateCustomPolicyInput, func(*iam.SimulatePolicyResponse, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_SimulateCustomPolicyPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SimulateCustomPolicyPagesWithContext'
type MockIAMAPI_SimulateCustomPolicyPagesWithContext_Call struct {
	*mock.Call
}

// SimulateCustomPolicyPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.SimulateCustomPolicyInput
//   - _a2 func(*iam.SimulatePolicyResponse , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) SimulateCustomPolicyPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_SimulateCustomPolicyPagesWithContext_Call {
	return &MockIAMAPI_SimulateCustomPolicyPagesWithContext_Call{Call: _e.mock.On("SimulateCustomPolicyPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_SimulateCustomPolicyPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.SimulateCustomPolicyInput, _a2 func(*iam.SimulatePolicyResponse, bool) bool, _a3 ...request.Option)) *MockIAMAPI_SimulateCustomPolicyPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.SimulateCustomPolicyInput), args[2].(func(*iam.SimulatePolicyResponse, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_SimulateCustomPolicyPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_SimulateCustomPolicyPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_SimulateCustomPolicyPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.SimulateCustomPolicyInput, func(*iam.SimulatePolicyResponse, bool) bool, ...request.Option) error) *MockIAMAPI_SimulateCustomPolicyPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// SimulateCustomPolicyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) SimulateCustomPolicyRequest(_a0 *iam.SimulateCustomPolicyInput) (*request.Request, *iam.SimulatePolicyResponse) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.SimulatePolicyResponse
	if rf, ok := ret.Get(0).(func(*iam.SimulateCustomPolicyInput) (*request.Request, *iam.SimulatePolicyResponse)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.SimulateCustomPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.SimulateCustomPolicyInput) *iam.SimulatePolicyResponse); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.SimulatePolicyResponse)
		}
	}

	return r0, r1
}

// MockIAMAPI_SimulateCustomPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SimulateCustomPolicyRequest'
type MockIAMAPI_SimulateCustomPolicyRequest_Call struct {
	*mock.Call
}

// SimulateCustomPolicyRequest is a helper method to define mock.On call
//   - _a0 *iam.SimulateCustomPolicyInput
func (_e *MockIAMAPI_Expecter) SimulateCustomPolicyRequest(_a0 interface{}) *MockIAMAPI_SimulateCustomPolicyRequest_Call {
	return &MockIAMAPI_SimulateCustomPolicyRequest_Call{Call: _e.mock.On("SimulateCustomPolicyRequest", _a0)}
}

func (_c *MockIAMAPI_SimulateCustomPolicyRequest_Call) Run(run func(_a0 *iam.SimulateCustomPolicyInput)) *MockIAMAPI_SimulateCustomPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.SimulateCustomPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_SimulateCustomPolicyRequest_Call) Return(_a0 *request.Request, _a1 *iam.SimulatePolicyResponse) *MockIAMAPI_SimulateCustomPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_SimulateCustomPolicyRequest_Call) RunAndReturn(run func(*iam.SimulateCustomPolicyInput) (*request.Request, *iam.SimulatePolicyResponse)) *MockIAMAPI_SimulateCustomPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// SimulateCustomPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) SimulateCustomPolicyWithContext(_a0 context.Context, _a1 *iam.SimulateCustomPolicyInput, _a2 ...request.Option) (*iam.SimulatePolicyResponse, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.SimulatePolicyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.SimulateCustomPolicyInput, ...request.Option) (*iam.SimulatePolicyResponse, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.SimulateCustomPolicyInput, ...request.Option) *iam.SimulatePolicyResponse); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.SimulatePolicyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.SimulateCustomPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_SimulateCustomPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SimulateCustomPolicyWithContext'
type MockIAMAPI_SimulateCustomPolicyWithContext_Call struct {
	*mock.Call
}

// SimulateCustomPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.SimulateCustomPolicyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) SimulateCustomPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_SimulateCustomPolicyWithContext_Call {
	return &MockIAMAPI_SimulateCustomPolicyWithContext_Call{Call: _e.mock.On("SimulateCustomPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_SimulateCustomPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.SimulateCustomPolicyInput, _a2 ...request.Option)) *MockIAMAPI_SimulateCustomPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.SimulateCustomPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_SimulateCustomPolicyWithContext_Call) Return(_a0 *iam.SimulatePolicyResponse, _a1 error) *MockIAMAPI_SimulateCustomPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_SimulateCustomPolicyWithContext_Call) RunAndReturn(run func(context.Context, *iam.SimulateCustomPolicyInput, ...request.Option) (*iam.SimulatePolicyResponse, error)) *MockIAMAPI_SimulateCustomPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// SimulatePrincipalPolicy provides a mock function with given fields: _a0
func (_m *MockIAMAPI) SimulatePrincipalPolicy(_a0 *iam.SimulatePrincipalPolicyInput) (*iam.SimulatePolicyResponse, error) {
	ret := _m.Called(_a0)

	var r0 *iam.SimulatePolicyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.SimulatePrincipalPolicyInput) (*iam.SimulatePolicyResponse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.SimulatePrincipalPolicyInput) *iam.SimulatePolicyResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.SimulatePolicyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.SimulatePrincipalPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_SimulatePrincipalPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SimulatePrincipalPolicy'
type MockIAMAPI_SimulatePrincipalPolicy_Call struct {
	*mock.Call
}

// SimulatePrincipalPolicy is a helper method to define mock.On call
//   - _a0 *iam.SimulatePrincipalPolicyInput
func (_e *MockIAMAPI_Expecter) SimulatePrincipalPolicy(_a0 interface{}) *MockIAMAPI_SimulatePrincipalPolicy_Call {
	return &MockIAMAPI_SimulatePrincipalPolicy_Call{Call: _e.mock.On("SimulatePrincipalPolicy", _a0)}
}

func (_c *MockIAMAPI_SimulatePrincipalPolicy_Call) Run(run func(_a0 *iam.SimulatePrincipalPolicyInput)) *MockIAMAPI_SimulatePrincipalPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.SimulatePrincipalPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_SimulatePrincipalPolicy_Call) Return(_a0 *iam.SimulatePolicyResponse, _a1 error) *MockIAMAPI_SimulatePrincipalPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_SimulatePrincipalPolicy_Call) RunAndReturn(run func(*iam.SimulatePrincipalPolicyInput) (*iam.SimulatePolicyResponse, error)) *MockIAMAPI_SimulatePrincipalPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// SimulatePrincipalPolicyPages provides a mock function with given fields: _a0, _a1
func (_m *MockIAMAPI) SimulatePrincipalPolicyPages(_a0 *iam.SimulatePrincipalPolicyInput, _a1 func(*iam.SimulatePolicyResponse, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.SimulatePrincipalPolicyInput, func(*iam.SimulatePolicyResponse, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_SimulatePrincipalPolicyPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SimulatePrincipalPolicyPages'
type MockIAMAPI_SimulatePrincipalPolicyPages_Call struct {
	*mock.Call
}

// SimulatePrincipalPolicyPages is a helper method to define mock.On call
//   - _a0 *iam.SimulatePrincipalPolicyInput
//   - _a1 func(*iam.SimulatePolicyResponse , bool) bool
func (_e *MockIAMAPI_Expecter) SimulatePrincipalPolicyPages(_a0 interface{}, _a1 interface{}) *MockIAMAPI_SimulatePrincipalPolicyPages_Call {
	return &MockIAMAPI_SimulatePrincipalPolicyPages_Call{Call: _e.mock.On("SimulatePrincipalPolicyPages", _a0, _a1)}
}

func (_c *MockIAMAPI_SimulatePrincipalPolicyPages_Call) Run(run func(_a0 *iam.SimulatePrincipalPolicyInput, _a1 func(*iam.SimulatePolicyResponse, bool) bool)) *MockIAMAPI_SimulatePrincipalPolicyPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.SimulatePrincipalPolicyInput), args[1].(func(*iam.SimulatePolicyResponse, bool) bool))
	})
	return _c
}

func (_c *MockIAMAPI_SimulatePrincipalPolicyPages_Call) Return(_a0 error) *MockIAMAPI_SimulatePrincipalPolicyPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_SimulatePrincipalPolicyPages_Call) RunAndReturn(run func(*iam.SimulatePrincipalPolicyInput, func(*iam.SimulatePolicyResponse, bool) bool) error) *MockIAMAPI_SimulatePrincipalPolicyPages_Call {
	_c.Call.Return(run)
	return _c
}

// SimulatePrincipalPolicyPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockIAMAPI) SimulatePrincipalPolicyPagesWithContext(_a0 context.Context, _a1 *iam.SimulatePrincipalPolicyInput, _a2 func(*iam.SimulatePolicyResponse, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.SimulatePrincipalPolicyInput, func(*iam.SimulatePolicyResponse, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_SimulatePrincipalPolicyPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SimulatePrincipalPolicyPagesWithContext'
type MockIAMAPI_SimulatePrincipalPolicyPagesWithContext_Call struct {
	*mock.Call
}

// SimulatePrincipalPolicyPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.SimulatePrincipalPolicyInput
//   - _a2 func(*iam.SimulatePolicyResponse , bool) bool
//   - _a3 ...request.Option
func (_e *MockIAMAPI_Expecter) SimulatePrincipalPolicyPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockIAMAPI_SimulatePrincipalPolicyPagesWithContext_Call {
	return &MockIAMAPI_SimulatePrincipalPolicyPagesWithContext_Call{Call: _e.mock.On("SimulatePrincipalPolicyPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockIAMAPI_SimulatePrincipalPolicyPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.SimulatePrincipalPolicyInput, _a2 func(*iam.SimulatePolicyResponse, bool) bool, _a3 ...request.Option)) *MockIAMAPI_SimulatePrincipalPolicyPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.SimulatePrincipalPolicyInput), args[2].(func(*iam.SimulatePolicyResponse, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_SimulatePrincipalPolicyPagesWithContext_Call) Return(_a0 error) *MockIAMAPI_SimulatePrincipalPolicyPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_SimulatePrincipalPolicyPagesWithContext_Call) RunAndReturn(run func(context.Context, *iam.SimulatePrincipalPolicyInput, func(*iam.SimulatePolicyResponse, bool) bool, ...request.Option) error) *MockIAMAPI_SimulatePrincipalPolicyPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// SimulatePrincipalPolicyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) SimulatePrincipalPolicyRequest(_a0 *iam.SimulatePrincipalPolicyInput) (*request.Request, *iam.SimulatePolicyResponse) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.SimulatePolicyResponse
	if rf, ok := ret.Get(0).(func(*iam.SimulatePrincipalPolicyInput) (*request.Request, *iam.SimulatePolicyResponse)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.SimulatePrincipalPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.SimulatePrincipalPolicyInput) *iam.SimulatePolicyResponse); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.SimulatePolicyResponse)
		}
	}

	return r0, r1
}

// MockIAMAPI_SimulatePrincipalPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SimulatePrincipalPolicyRequest'
type MockIAMAPI_SimulatePrincipalPolicyRequest_Call struct {
	*mock.Call
}

// SimulatePrincipalPolicyRequest is a helper method to define mock.On call
//   - _a0 *iam.SimulatePrincipalPolicyInput
func (_e *MockIAMAPI_Expecter) SimulatePrincipalPolicyRequest(_a0 interface{}) *MockIAMAPI_SimulatePrincipalPolicyRequest_Call {
	return &MockIAMAPI_SimulatePrincipalPolicyRequest_Call{Call: _e.mock.On("SimulatePrincipalPolicyRequest", _a0)}
}

func (_c *MockIAMAPI_SimulatePrincipalPolicyRequest_Call) Run(run func(_a0 *iam.SimulatePrincipalPolicyInput)) *MockIAMAPI_SimulatePrincipalPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.SimulatePrincipalPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_SimulatePrincipalPolicyRequest_Call) Return(_a0 *request.Request, _a1 *iam.SimulatePolicyResponse) *MockIAMAPI_SimulatePrincipalPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_SimulatePrincipalPolicyRequest_Call) RunAndReturn(run func(*iam.SimulatePrincipalPolicyInput) (*request.Request, *iam.SimulatePolicyResponse)) *MockIAMAPI_SimulatePrincipalPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// SimulatePrincipalPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) SimulatePrincipalPolicyWithContext(_a0 context.Context, _a1 *iam.SimulatePrincipalPolicyInput, _a2 ...request.Option) (*iam.SimulatePolicyResponse, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.SimulatePolicyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.SimulatePrincipalPolicyInput, ...request.Option) (*iam.SimulatePolicyResponse, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.SimulatePrincipalPolicyInput, ...request.Option) *iam.SimulatePolicyResponse); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.SimulatePolicyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.SimulatePrincipalPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_SimulatePrincipalPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SimulatePrincipalPolicyWithContext'
type MockIAMAPI_SimulatePrincipalPolicyWithContext_Call struct {
	*mock.Call
}

// SimulatePrincipalPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.SimulatePrincipalPolicyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) SimulatePrincipalPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_SimulatePrincipalPolicyWithContext_Call {
	return &MockIAMAPI_SimulatePrincipalPolicyWithContext_Call{Call: _e.mock.On("SimulatePrincipalPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_SimulatePrincipalPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.SimulatePrincipalPolicyInput, _a2 ...request.Option)) *MockIAMAPI_SimulatePrincipalPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.SimulatePrincipalPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_SimulatePrincipalPolicyWithContext_Call) Return(_a0 *iam.SimulatePolicyResponse, _a1 error) *MockIAMAPI_SimulatePrincipalPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_SimulatePrincipalPolicyWithContext_Call) RunAndReturn(run func(context.Context, *iam.SimulatePrincipalPolicyInput, ...request.Option) (*iam.SimulatePolicyResponse, error)) *MockIAMAPI_SimulatePrincipalPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// TagInstanceProfile provides a mock function with given fields: _a0
func (_m *MockIAMAPI) TagInstanceProfile(_a0 *iam.TagInstanceProfileInput) (*iam.TagInstanceProfileOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.TagInstanceProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.TagInstanceProfileInput) (*iam.TagInstanceProfileOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.TagInstanceProfileInput) *iam.TagInstanceProfileOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.TagInstanceProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.TagInstanceProfileInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_TagInstanceProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagInstanceProfile'
type MockIAMAPI_TagInstanceProfile_Call struct {
	*mock.Call
}

// TagInstanceProfile is a helper method to define mock.On call
//   - _a0 *iam.TagInstanceProfileInput
func (_e *MockIAMAPI_Expecter) TagInstanceProfile(_a0 interface{}) *MockIAMAPI_TagInstanceProfile_Call {
	return &MockIAMAPI_TagInstanceProfile_Call{Call: _e.mock.On("TagInstanceProfile", _a0)}
}

func (_c *MockIAMAPI_TagInstanceProfile_Call) Run(run func(_a0 *iam.TagInstanceProfileInput)) *MockIAMAPI_TagInstanceProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.TagInstanceProfileInput))
	})
	return _c
}

func (_c *MockIAMAPI_TagInstanceProfile_Call) Return(_a0 *iam.TagInstanceProfileOutput, _a1 error) *MockIAMAPI_TagInstanceProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_TagInstanceProfile_Call) RunAndReturn(run func(*iam.TagInstanceProfileInput) (*iam.TagInstanceProfileOutput, error)) *MockIAMAPI_TagInstanceProfile_Call {
	_c.Call.Return(run)
	return _c
}

// TagInstanceProfileRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) TagInstanceProfileRequest(_a0 *iam.TagInstanceProfileInput) (*request.Request, *iam.TagInstanceProfileOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.TagInstanceProfileOutput
	if rf, ok := ret.Get(0).(func(*iam.TagInstanceProfileInput) (*request.Request, *iam.TagInstanceProfileOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.TagInstanceProfileInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.TagInstanceProfileInput) *iam.TagInstanceProfileOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.TagInstanceProfileOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_TagInstanceProfileRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagInstanceProfileRequest'
type MockIAMAPI_TagInstanceProfileRequest_Call struct {
	*mock.Call
}

// TagInstanceProfileRequest is a helper method to define mock.On call
//   - _a0 *iam.TagInstanceProfileInput
func (_e *MockIAMAPI_Expecter) TagInstanceProfileRequest(_a0 interface{}) *MockIAMAPI_TagInstanceProfileRequest_Call {
	return &MockIAMAPI_TagInstanceProfileRequest_Call{Call: _e.mock.On("TagInstanceProfileRequest", _a0)}
}

func (_c *MockIAMAPI_TagInstanceProfileRequest_Call) Run(run func(_a0 *iam.TagInstanceProfileInput)) *MockIAMAPI_TagInstanceProfileRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.TagInstanceProfileInput))
	})
	return _c
}

func (_c *MockIAMAPI_TagInstanceProfileRequest_Call) Return(_a0 *request.Request, _a1 *iam.TagInstanceProfileOutput) *MockIAMAPI_TagInstanceProfileRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_TagInstanceProfileRequest_Call) RunAndReturn(run func(*iam.TagInstanceProfileInput) (*request.Request, *iam.TagInstanceProfileOutput)) *MockIAMAPI_TagInstanceProfileRequest_Call {
	_c.Call.Return(run)
	return _c
}

// TagInstanceProfileWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) TagInstanceProfileWithContext(_a0 context.Context, _a1 *iam.TagInstanceProfileInput, _a2 ...request.Option) (*iam.TagInstanceProfileOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.TagInstanceProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.TagInstanceProfileInput, ...request.Option) (*iam.TagInstanceProfileOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.TagInstanceProfileInput, ...request.Option) *iam.TagInstanceProfileOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.TagInstanceProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.TagInstanceProfileInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_TagInstanceProfileWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagInstanceProfileWithContext'
type MockIAMAPI_TagInstanceProfileWithContext_Call struct {
	*mock.Call
}

// TagInstanceProfileWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.TagInstanceProfileInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) TagInstanceProfileWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_TagInstanceProfileWithContext_Call {
	return &MockIAMAPI_TagInstanceProfileWithContext_Call{Call: _e.mock.On("TagInstanceProfileWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_TagInstanceProfileWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.TagInstanceProfileInput, _a2 ...request.Option)) *MockIAMAPI_TagInstanceProfileWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.TagInstanceProfileInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_TagInstanceProfileWithContext_Call) Return(_a0 *iam.TagInstanceProfileOutput, _a1 error) *MockIAMAPI_TagInstanceProfileWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_TagInstanceProfileWithContext_Call) RunAndReturn(run func(context.Context, *iam.TagInstanceProfileInput, ...request.Option) (*iam.TagInstanceProfileOutput, error)) *MockIAMAPI_TagInstanceProfileWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// TagMFADevice provides a mock function with given fields: _a0
func (_m *MockIAMAPI) TagMFADevice(_a0 *iam.TagMFADeviceInput) (*iam.TagMFADeviceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.TagMFADeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.TagMFADeviceInput) (*iam.TagMFADeviceOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.TagMFADeviceInput) *iam.TagMFADeviceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.TagMFADeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.TagMFADeviceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_TagMFADevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagMFADevice'
type MockIAMAPI_TagMFADevice_Call struct {
	*mock.Call
}

// TagMFADevice is a helper method to define mock.On call
//   - _a0 *iam.TagMFADeviceInput
func (_e *MockIAMAPI_Expecter) TagMFADevice(_a0 interface{}) *MockIAMAPI_TagMFADevice_Call {
	return &MockIAMAPI_TagMFADevice_Call{Call: _e.mock.On("TagMFADevice", _a0)}
}

func (_c *MockIAMAPI_TagMFADevice_Call) Run(run func(_a0 *iam.TagMFADeviceInput)) *MockIAMAPI_TagMFADevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.TagMFADeviceInput))
	})
	return _c
}

func (_c *MockIAMAPI_TagMFADevice_Call) Return(_a0 *iam.TagMFADeviceOutput, _a1 error) *MockIAMAPI_TagMFADevice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_TagMFADevice_Call) RunAndReturn(run func(*iam.TagMFADeviceInput) (*iam.TagMFADeviceOutput, error)) *MockIAMAPI_TagMFADevice_Call {
	_c.Call.Return(run)
	return _c
}

// TagMFADeviceRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) TagMFADeviceRequest(_a0 *iam.TagMFADeviceInput) (*request.Request, *iam.TagMFADeviceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.TagMFADeviceOutput
	if rf, ok := ret.Get(0).(func(*iam.TagMFADeviceInput) (*request.Request, *iam.TagMFADeviceOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.TagMFADeviceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.TagMFADeviceInput) *iam.TagMFADeviceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.TagMFADeviceOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_TagMFADeviceRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagMFADeviceRequest'
type MockIAMAPI_TagMFADeviceRequest_Call struct {
	*mock.Call
}

// TagMFADeviceRequest is a helper method to define mock.On call
//   - _a0 *iam.TagMFADeviceInput
func (_e *MockIAMAPI_Expecter) TagMFADeviceRequest(_a0 interface{}) *MockIAMAPI_TagMFADeviceRequest_Call {
	return &MockIAMAPI_TagMFADeviceRequest_Call{Call: _e.mock.On("TagMFADeviceRequest", _a0)}
}

func (_c *MockIAMAPI_TagMFADeviceRequest_Call) Run(run func(_a0 *iam.TagMFADeviceInput)) *MockIAMAPI_TagMFADeviceRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.TagMFADeviceInput))
	})
	return _c
}

func (_c *MockIAMAPI_TagMFADeviceRequest_Call) Return(_a0 *request.Request, _a1 *iam.TagMFADeviceOutput) *MockIAMAPI_TagMFADeviceRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_TagMFADeviceRequest_Call) RunAndReturn(run func(*iam.TagMFADeviceInput) (*request.Request, *iam.TagMFADeviceOutput)) *MockIAMAPI_TagMFADeviceRequest_Call {
	_c.Call.Return(run)
	return _c
}

// TagMFADeviceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) TagMFADeviceWithContext(_a0 context.Context, _a1 *iam.TagMFADeviceInput, _a2 ...request.Option) (*iam.TagMFADeviceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.TagMFADeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.TagMFADeviceInput, ...request.Option) (*iam.TagMFADeviceOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.TagMFADeviceInput, ...request.Option) *iam.TagMFADeviceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.TagMFADeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.TagMFADeviceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_TagMFADeviceWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagMFADeviceWithContext'
type MockIAMAPI_TagMFADeviceWithContext_Call struct {
	*mock.Call
}

// TagMFADeviceWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.TagMFADeviceInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) TagMFADeviceWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_TagMFADeviceWithContext_Call {
	return &MockIAMAPI_TagMFADeviceWithContext_Call{Call: _e.mock.On("TagMFADeviceWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_TagMFADeviceWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.TagMFADeviceInput, _a2 ...request.Option)) *MockIAMAPI_TagMFADeviceWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.TagMFADeviceInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_TagMFADeviceWithContext_Call) Return(_a0 *iam.TagMFADeviceOutput, _a1 error) *MockIAMAPI_TagMFADeviceWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_TagMFADeviceWithContext_Call) RunAndReturn(run func(context.Context, *iam.TagMFADeviceInput, ...request.Option) (*iam.TagMFADeviceOutput, error)) *MockIAMAPI_TagMFADeviceWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// TagOpenIDConnectProvider provides a mock function with given fields: _a0
func (_m *MockIAMAPI) TagOpenIDConnectProvider(_a0 *iam.TagOpenIDConnectProviderInput) (*iam.TagOpenIDConnectProviderOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.TagOpenIDConnectProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.TagOpenIDConnectProviderInput) (*iam.TagOpenIDConnectProviderOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.TagOpenIDConnectProviderInput) *iam.TagOpenIDConnectProviderOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.TagOpenIDConnectProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.TagOpenIDConnectProviderInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_TagOpenIDConnectProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagOpenIDConnectProvider'
type MockIAMAPI_TagOpenIDConnectProvider_Call struct {
	*mock.Call
}

// TagOpenIDConnectProvider is a helper method to define mock.On call
//   - _a0 *iam.TagOpenIDConnectProviderInput
func (_e *MockIAMAPI_Expecter) TagOpenIDConnectProvider(_a0 interface{}) *MockIAMAPI_TagOpenIDConnectProvider_Call {
	return &MockIAMAPI_TagOpenIDConnectProvider_Call{Call: _e.mock.On("TagOpenIDConnectProvider", _a0)}
}

func (_c *MockIAMAPI_TagOpenIDConnectProvider_Call) Run(run func(_a0 *iam.TagOpenIDConnectProviderInput)) *MockIAMAPI_TagOpenIDConnectProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.TagOpenIDConnectProviderInput))
	})
	return _c
}

func (_c *MockIAMAPI_TagOpenIDConnectProvider_Call) Return(_a0 *iam.TagOpenIDConnectProviderOutput, _a1 error) *MockIAMAPI_TagOpenIDConnectProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_TagOpenIDConnectProvider_Call) RunAndReturn(run func(*iam.TagOpenIDConnectProviderInput) (*iam.TagOpenIDConnectProviderOutput, error)) *MockIAMAPI_TagOpenIDConnectProvider_Call {
	_c.Call.Return(run)
	return _c
}

// TagOpenIDConnectProviderRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) TagOpenIDConnectProviderRequest(_a0 *iam.TagOpenIDConnectProviderInput) (*request.Request, *iam.TagOpenIDConnectProviderOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.TagOpenIDConnectProviderOutput
	if rf, ok := ret.Get(0).(func(*iam.TagOpenIDConnectProviderInput) (*request.Request, *iam.TagOpenIDConnectProviderOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.TagOpenIDConnectProviderInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.TagOpenIDConnectProviderInput) *iam.TagOpenIDConnectProviderOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.TagOpenIDConnectProviderOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_TagOpenIDConnectProviderRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagOpenIDConnectProviderRequest'
type MockIAMAPI_TagOpenIDConnectProviderRequest_Call struct {
	*mock.Call
}

// TagOpenIDConnectProviderRequest is a helper method to define mock.On call
//   - _a0 *iam.TagOpenIDConnectProviderInput
func (_e *MockIAMAPI_Expecter) TagOpenIDConnectProviderRequest(_a0 interface{}) *MockIAMAPI_TagOpenIDConnectProviderRequest_Call {
	return &MockIAMAPI_TagOpenIDConnectProviderRequest_Call{Call: _e.mock.On("TagOpenIDConnectProviderRequest", _a0)}
}

func (_c *MockIAMAPI_TagOpenIDConnectProviderRequest_Call) Run(run func(_a0 *iam.TagOpenIDConnectProviderInput)) *MockIAMAPI_TagOpenIDConnectProviderRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.TagOpenIDConnectProviderInput))
	})
	return _c
}

func (_c *MockIAMAPI_TagOpenIDConnectProviderRequest_Call) Return(_a0 *request.Request, _a1 *iam.TagOpenIDConnectProviderOutput) *MockIAMAPI_TagOpenIDConnectProviderRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_TagOpenIDConnectProviderRequest_Call) RunAndReturn(run func(*iam.TagOpenIDConnectProviderInput) (*request.Request, *iam.TagOpenIDConnectProviderOutput)) *MockIAMAPI_TagOpenIDConnectProviderRequest_Call {
	_c.Call.Return(run)
	return _c
}

// TagOpenIDConnectProviderWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) TagOpenIDConnectProviderWithContext(_a0 context.Context, _a1 *iam.TagOpenIDConnectProviderInput, _a2 ...request.Option) (*iam.TagOpenIDConnectProviderOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.TagOpenIDConnectProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.TagOpenIDConnectProviderInput, ...request.Option) (*iam.TagOpenIDConnectProviderOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.TagOpenIDConnectProviderInput, ...request.Option) *iam.TagOpenIDConnectProviderOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.TagOpenIDConnectProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.TagOpenIDConnectProviderInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_TagOpenIDConnectProviderWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagOpenIDConnectProviderWithContext'
type MockIAMAPI_TagOpenIDConnectProviderWithContext_Call struct {
	*mock.Call
}

// TagOpenIDConnectProviderWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.TagOpenIDConnectProviderInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) TagOpenIDConnectProviderWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_TagOpenIDConnectProviderWithContext_Call {
	return &MockIAMAPI_TagOpenIDConnectProviderWithContext_Call{Call: _e.mock.On("TagOpenIDConnectProviderWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_TagOpenIDConnectProviderWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.TagOpenIDConnectProviderInput, _a2 ...request.Option)) *MockIAMAPI_TagOpenIDConnectProviderWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.TagOpenIDConnectProviderInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_TagOpenIDConnectProviderWithContext_Call) Return(_a0 *iam.TagOpenIDConnectProviderOutput, _a1 error) *MockIAMAPI_TagOpenIDConnectProviderWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_TagOpenIDConnectProviderWithContext_Call) RunAndReturn(run func(context.Context, *iam.TagOpenIDConnectProviderInput, ...request.Option) (*iam.TagOpenIDConnectProviderOutput, error)) *MockIAMAPI_TagOpenIDConnectProviderWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// TagPolicy provides a mock function with given fields: _a0
func (_m *MockIAMAPI) TagPolicy(_a0 *iam.TagPolicyInput) (*iam.TagPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.TagPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.TagPolicyInput) (*iam.TagPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.TagPolicyInput) *iam.TagPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.TagPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.TagPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_TagPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagPolicy'
type MockIAMAPI_TagPolicy_Call struct {
	*mock.Call
}

// TagPolicy is a helper method to define mock.On call
//   - _a0 *iam.TagPolicyInput
func (_e *MockIAMAPI_Expecter) TagPolicy(_a0 interface{}) *MockIAMAPI_TagPolicy_Call {
	return &MockIAMAPI_TagPolicy_Call{Call: _e.mock.On("TagPolicy", _a0)}
}

func (_c *MockIAMAPI_TagPolicy_Call) Run(run func(_a0 *iam.TagPolicyInput)) *MockIAMAPI_TagPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.TagPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_TagPolicy_Call) Return(_a0 *iam.TagPolicyOutput, _a1 error) *MockIAMAPI_TagPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_TagPolicy_Call) RunAndReturn(run func(*iam.TagPolicyInput) (*iam.TagPolicyOutput, error)) *MockIAMAPI_TagPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// TagPolicyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) TagPolicyRequest(_a0 *iam.TagPolicyInput) (*request.Request, *iam.TagPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.TagPolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.TagPolicyInput) (*request.Request, *iam.TagPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.TagPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.TagPolicyInput) *iam.TagPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.TagPolicyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_TagPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagPolicyRequest'
type MockIAMAPI_TagPolicyRequest_Call struct {
	*mock.Call
}

// TagPolicyRequest is a helper method to define mock.On call
//   - _a0 *iam.TagPolicyInput
func (_e *MockIAMAPI_Expecter) TagPolicyRequest(_a0 interface{}) *MockIAMAPI_TagPolicyRequest_Call {
	return &MockIAMAPI_TagPolicyRequest_Call{Call: _e.mock.On("TagPolicyRequest", _a0)}
}

func (_c *MockIAMAPI_TagPolicyRequest_Call) Run(run func(_a0 *iam.TagPolicyInput)) *MockIAMAPI_TagPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.TagPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_TagPolicyRequest_Call) Return(_a0 *request.Request, _a1 *iam.TagPolicyOutput) *MockIAMAPI_TagPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_TagPolicyRequest_Call) RunAndReturn(run func(*iam.TagPolicyInput) (*request.Request, *iam.TagPolicyOutput)) *MockIAMAPI_TagPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// TagPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) TagPolicyWithContext(_a0 context.Context, _a1 *iam.TagPolicyInput, _a2 ...request.Option) (*iam.TagPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.TagPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.TagPolicyInput, ...request.Option) (*iam.TagPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.TagPolicyInput, ...request.Option) *iam.TagPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.TagPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.TagPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_TagPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagPolicyWithContext'
type MockIAMAPI_TagPolicyWithContext_Call struct {
	*mock.Call
}

// TagPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.TagPolicyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) TagPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_TagPolicyWithContext_Call {
	return &MockIAMAPI_TagPolicyWithContext_Call{Call: _e.mock.On("TagPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_TagPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.TagPolicyInput, _a2 ...request.Option)) *MockIAMAPI_TagPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.TagPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_TagPolicyWithContext_Call) Return(_a0 *iam.TagPolicyOutput, _a1 error) *MockIAMAPI_TagPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_TagPolicyWithContext_Call) RunAndReturn(run func(context.Context, *iam.TagPolicyInput, ...request.Option) (*iam.TagPolicyOutput, error)) *MockIAMAPI_TagPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// TagRole provides a mock function with given fields: _a0
func (_m *MockIAMAPI) TagRole(_a0 *iam.TagRoleInput) (*iam.TagRoleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.TagRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.TagRoleInput) (*iam.TagRoleOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.TagRoleInput) *iam.TagRoleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.TagRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.TagRoleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_TagRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagRole'
type MockIAMAPI_TagRole_Call struct {
	*mock.Call
}

// TagRole is a helper method to define mock.On call
//   - _a0 *iam.TagRoleInput
func (_e *MockIAMAPI_Expecter) TagRole(_a0 interface{}) *MockIAMAPI_TagRole_Call {
	return &MockIAMAPI_TagRole_Call{Call: _e.mock.On("TagRole", _a0)}
}

func (_c *MockIAMAPI_TagRole_Call) Run(run func(_a0 *iam.TagRoleInput)) *MockIAMAPI_TagRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.TagRoleInput))
	})
	return _c
}

func (_c *MockIAMAPI_TagRole_Call) Return(_a0 *iam.TagRoleOutput, _a1 error) *MockIAMAPI_TagRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_TagRole_Call) RunAndReturn(run func(*iam.TagRoleInput) (*iam.TagRoleOutput, error)) *MockIAMAPI_TagRole_Call {
	_c.Call.Return(run)
	return _c
}

// TagRoleRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) TagRoleRequest(_a0 *iam.TagRoleInput) (*request.Request, *iam.TagRoleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.TagRoleOutput
	if rf, ok := ret.Get(0).(func(*iam.TagRoleInput) (*request.Request, *iam.TagRoleOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.TagRoleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.TagRoleInput) *iam.TagRoleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.TagRoleOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_TagRoleRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagRoleRequest'
type MockIAMAPI_TagRoleRequest_Call struct {
	*mock.Call
}

// TagRoleRequest is a helper method to define mock.On call
//   - _a0 *iam.TagRoleInput
func (_e *MockIAMAPI_Expecter) TagRoleRequest(_a0 interface{}) *MockIAMAPI_TagRoleRequest_Call {
	return &MockIAMAPI_TagRoleRequest_Call{Call: _e.mock.On("TagRoleRequest", _a0)}
}

func (_c *MockIAMAPI_TagRoleRequest_Call) Run(run func(_a0 *iam.TagRoleInput)) *MockIAMAPI_TagRoleRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.TagRoleInput))
	})
	return _c
}

func (_c *MockIAMAPI_TagRoleRequest_Call) Return(_a0 *request.Request, _a1 *iam.TagRoleOutput) *MockIAMAPI_TagRoleRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_TagRoleRequest_Call) RunAndReturn(run func(*iam.TagRoleInput) (*request.Request, *iam.TagRoleOutput)) *MockIAMAPI_TagRoleRequest_Call {
	_c.Call.Return(run)
	return _c
}

// TagRoleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) TagRoleWithContext(_a0 context.Context, _a1 *iam.TagRoleInput, _a2 ...request.Option) (*iam.TagRoleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.TagRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.TagRoleInput, ...request.Option) (*iam.TagRoleOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.TagRoleInput, ...request.Option) *iam.TagRoleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.TagRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.TagRoleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_TagRoleWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagRoleWithContext'
type MockIAMAPI_TagRoleWithContext_Call struct {
	*mock.Call
}

// TagRoleWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.TagRoleInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) TagRoleWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_TagRoleWithContext_Call {
	return &MockIAMAPI_TagRoleWithContext_Call{Call: _e.mock.On("TagRoleWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_TagRoleWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.TagRoleInput, _a2 ...request.Option)) *MockIAMAPI_TagRoleWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.TagRoleInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_TagRoleWithContext_Call) Return(_a0 *iam.TagRoleOutput, _a1 error) *MockIAMAPI_TagRoleWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_TagRoleWithContext_Call) RunAndReturn(run func(context.Context, *iam.TagRoleInput, ...request.Option) (*iam.TagRoleOutput, error)) *MockIAMAPI_TagRoleWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// TagSAMLProvider provides a mock function with given fields: _a0
func (_m *MockIAMAPI) TagSAMLProvider(_a0 *iam.TagSAMLProviderInput) (*iam.TagSAMLProviderOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.TagSAMLProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.TagSAMLProviderInput) (*iam.TagSAMLProviderOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.TagSAMLProviderInput) *iam.TagSAMLProviderOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.TagSAMLProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.TagSAMLProviderInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_TagSAMLProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagSAMLProvider'
type MockIAMAPI_TagSAMLProvider_Call struct {
	*mock.Call
}

// TagSAMLProvider is a helper method to define mock.On call
//   - _a0 *iam.TagSAMLProviderInput
func (_e *MockIAMAPI_Expecter) TagSAMLProvider(_a0 interface{}) *MockIAMAPI_TagSAMLProvider_Call {
	return &MockIAMAPI_TagSAMLProvider_Call{Call: _e.mock.On("TagSAMLProvider", _a0)}
}

func (_c *MockIAMAPI_TagSAMLProvider_Call) Run(run func(_a0 *iam.TagSAMLProviderInput)) *MockIAMAPI_TagSAMLProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.TagSAMLProviderInput))
	})
	return _c
}

func (_c *MockIAMAPI_TagSAMLProvider_Call) Return(_a0 *iam.TagSAMLProviderOutput, _a1 error) *MockIAMAPI_TagSAMLProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_TagSAMLProvider_Call) RunAndReturn(run func(*iam.TagSAMLProviderInput) (*iam.TagSAMLProviderOutput, error)) *MockIAMAPI_TagSAMLProvider_Call {
	_c.Call.Return(run)
	return _c
}

// TagSAMLProviderRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) TagSAMLProviderRequest(_a0 *iam.TagSAMLProviderInput) (*request.Request, *iam.TagSAMLProviderOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.TagSAMLProviderOutput
	if rf, ok := ret.Get(0).(func(*iam.TagSAMLProviderInput) (*request.Request, *iam.TagSAMLProviderOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.TagSAMLProviderInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.TagSAMLProviderInput) *iam.TagSAMLProviderOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.TagSAMLProviderOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_TagSAMLProviderRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagSAMLProviderRequest'
type MockIAMAPI_TagSAMLProviderRequest_Call struct {
	*mock.Call
}

// TagSAMLProviderRequest is a helper method to define mock.On call
//   - _a0 *iam.TagSAMLProviderInput
func (_e *MockIAMAPI_Expecter) TagSAMLProviderRequest(_a0 interface{}) *MockIAMAPI_TagSAMLProviderRequest_Call {
	return &MockIAMAPI_TagSAMLProviderRequest_Call{Call: _e.mock.On("TagSAMLProviderRequest", _a0)}
}

func (_c *MockIAMAPI_TagSAMLProviderRequest_Call) Run(run func(_a0 *iam.TagSAMLProviderInput)) *MockIAMAPI_TagSAMLProviderRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.TagSAMLProviderInput))
	})
	return _c
}

func (_c *MockIAMAPI_TagSAMLProviderRequest_Call) Return(_a0 *request.Request, _a1 *iam.TagSAMLProviderOutput) *MockIAMAPI_TagSAMLProviderRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_TagSAMLProviderRequest_Call) RunAndReturn(run func(*iam.TagSAMLProviderInput) (*request.Request, *iam.TagSAMLProviderOutput)) *MockIAMAPI_TagSAMLProviderRequest_Call {
	_c.Call.Return(run)
	return _c
}

// TagSAMLProviderWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) TagSAMLProviderWithContext(_a0 context.Context, _a1 *iam.TagSAMLProviderInput, _a2 ...request.Option) (*iam.TagSAMLProviderOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.TagSAMLProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.TagSAMLProviderInput, ...request.Option) (*iam.TagSAMLProviderOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.TagSAMLProviderInput, ...request.Option) *iam.TagSAMLProviderOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.TagSAMLProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.TagSAMLProviderInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_TagSAMLProviderWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagSAMLProviderWithContext'
type MockIAMAPI_TagSAMLProviderWithContext_Call struct {
	*mock.Call
}

// TagSAMLProviderWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.TagSAMLProviderInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) TagSAMLProviderWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_TagSAMLProviderWithContext_Call {
	return &MockIAMAPI_TagSAMLProviderWithContext_Call{Call: _e.mock.On("TagSAMLProviderWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_TagSAMLProviderWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.TagSAMLProviderInput, _a2 ...request.Option)) *MockIAMAPI_TagSAMLProviderWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.TagSAMLProviderInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_TagSAMLProviderWithContext_Call) Return(_a0 *iam.TagSAMLProviderOutput, _a1 error) *MockIAMAPI_TagSAMLProviderWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_TagSAMLProviderWithContext_Call) RunAndReturn(run func(context.Context, *iam.TagSAMLProviderInput, ...request.Option) (*iam.TagSAMLProviderOutput, error)) *MockIAMAPI_TagSAMLProviderWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// TagServerCertificate provides a mock function with given fields: _a0
func (_m *MockIAMAPI) TagServerCertificate(_a0 *iam.TagServerCertificateInput) (*iam.TagServerCertificateOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.TagServerCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.TagServerCertificateInput) (*iam.TagServerCertificateOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.TagServerCertificateInput) *iam.TagServerCertificateOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.TagServerCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.TagServerCertificateInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_TagServerCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagServerCertificate'
type MockIAMAPI_TagServerCertificate_Call struct {
	*mock.Call
}

// TagServerCertificate is a helper method to define mock.On call
//   - _a0 *iam.TagServerCertificateInput
func (_e *MockIAMAPI_Expecter) TagServerCertificate(_a0 interface{}) *MockIAMAPI_TagServerCertificate_Call {
	return &MockIAMAPI_TagServerCertificate_Call{Call: _e.mock.On("TagServerCertificate", _a0)}
}

func (_c *MockIAMAPI_TagServerCertificate_Call) Run(run func(_a0 *iam.TagServerCertificateInput)) *MockIAMAPI_TagServerCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.TagServerCertificateInput))
	})
	return _c
}

func (_c *MockIAMAPI_TagServerCertificate_Call) Return(_a0 *iam.TagServerCertificateOutput, _a1 error) *MockIAMAPI_TagServerCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_TagServerCertificate_Call) RunAndReturn(run func(*iam.TagServerCertificateInput) (*iam.TagServerCertificateOutput, error)) *MockIAMAPI_TagServerCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// TagServerCertificateRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) TagServerCertificateRequest(_a0 *iam.TagServerCertificateInput) (*request.Request, *iam.TagServerCertificateOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.TagServerCertificateOutput
	if rf, ok := ret.Get(0).(func(*iam.TagServerCertificateInput) (*request.Request, *iam.TagServerCertificateOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.TagServerCertificateInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.TagServerCertificateInput) *iam.TagServerCertificateOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.TagServerCertificateOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_TagServerCertificateRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagServerCertificateRequest'
type MockIAMAPI_TagServerCertificateRequest_Call struct {
	*mock.Call
}

// TagServerCertificateRequest is a helper method to define mock.On call
//   - _a0 *iam.TagServerCertificateInput
func (_e *MockIAMAPI_Expecter) TagServerCertificateRequest(_a0 interface{}) *MockIAMAPI_TagServerCertificateRequest_Call {
	return &MockIAMAPI_TagServerCertificateRequest_Call{Call: _e.mock.On("TagServerCertificateRequest", _a0)}
}

func (_c *MockIAMAPI_TagServerCertificateRequest_Call) Run(run func(_a0 *iam.TagServerCertificateInput)) *MockIAMAPI_TagServerCertificateRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.TagServerCertificateInput))
	})
	return _c
}

func (_c *MockIAMAPI_TagServerCertificateRequest_Call) Return(_a0 *request.Request, _a1 *iam.TagServerCertificateOutput) *MockIAMAPI_TagServerCertificateRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_TagServerCertificateRequest_Call) RunAndReturn(run func(*iam.TagServerCertificateInput) (*request.Request, *iam.TagServerCertificateOutput)) *MockIAMAPI_TagServerCertificateRequest_Call {
	_c.Call.Return(run)
	return _c
}

// TagServerCertificateWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) TagServerCertificateWithContext(_a0 context.Context, _a1 *iam.TagServerCertificateInput, _a2 ...request.Option) (*iam.TagServerCertificateOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.TagServerCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.TagServerCertificateInput, ...request.Option) (*iam.TagServerCertificateOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.TagServerCertificateInput, ...request.Option) *iam.TagServerCertificateOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.TagServerCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.TagServerCertificateInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_TagServerCertificateWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagServerCertificateWithContext'
type MockIAMAPI_TagServerCertificateWithContext_Call struct {
	*mock.Call
}

// TagServerCertificateWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.TagServerCertificateInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) TagServerCertificateWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_TagServerCertificateWithContext_Call {
	return &MockIAMAPI_TagServerCertificateWithContext_Call{Call: _e.mock.On("TagServerCertificateWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_TagServerCertificateWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.TagServerCertificateInput, _a2 ...request.Option)) *MockIAMAPI_TagServerCertificateWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.TagServerCertificateInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_TagServerCertificateWithContext_Call) Return(_a0 *iam.TagServerCertificateOutput, _a1 error) *MockIAMAPI_TagServerCertificateWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_TagServerCertificateWithContext_Call) RunAndReturn(run func(context.Context, *iam.TagServerCertificateInput, ...request.Option) (*iam.TagServerCertificateOutput, error)) *MockIAMAPI_TagServerCertificateWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// TagUser provides a mock function with given fields: _a0
func (_m *MockIAMAPI) TagUser(_a0 *iam.TagUserInput) (*iam.TagUserOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.TagUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.TagUserInput) (*iam.TagUserOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.TagUserInput) *iam.TagUserOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.TagUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.TagUserInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_TagUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagUser'
type MockIAMAPI_TagUser_Call struct {
	*mock.Call
}

// TagUser is a helper method to define mock.On call
//   - _a0 *iam.TagUserInput
func (_e *MockIAMAPI_Expecter) TagUser(_a0 interface{}) *MockIAMAPI_TagUser_Call {
	return &MockIAMAPI_TagUser_Call{Call: _e.mock.On("TagUser", _a0)}
}

func (_c *MockIAMAPI_TagUser_Call) Run(run func(_a0 *iam.TagUserInput)) *MockIAMAPI_TagUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.TagUserInput))
	})
	return _c
}

func (_c *MockIAMAPI_TagUser_Call) Return(_a0 *iam.TagUserOutput, _a1 error) *MockIAMAPI_TagUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_TagUser_Call) RunAndReturn(run func(*iam.TagUserInput) (*iam.TagUserOutput, error)) *MockIAMAPI_TagUser_Call {
	_c.Call.Return(run)
	return _c
}

// TagUserRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) TagUserRequest(_a0 *iam.TagUserInput) (*request.Request, *iam.TagUserOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.TagUserOutput
	if rf, ok := ret.Get(0).(func(*iam.TagUserInput) (*request.Request, *iam.TagUserOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.TagUserInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.TagUserInput) *iam.TagUserOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.TagUserOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_TagUserRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagUserRequest'
type MockIAMAPI_TagUserRequest_Call struct {
	*mock.Call
}

// TagUserRequest is a helper method to define mock.On call
//   - _a0 *iam.TagUserInput
func (_e *MockIAMAPI_Expecter) TagUserRequest(_a0 interface{}) *MockIAMAPI_TagUserRequest_Call {
	return &MockIAMAPI_TagUserRequest_Call{Call: _e.mock.On("TagUserRequest", _a0)}
}

func (_c *MockIAMAPI_TagUserRequest_Call) Run(run func(_a0 *iam.TagUserInput)) *MockIAMAPI_TagUserRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.TagUserInput))
	})
	return _c
}

func (_c *MockIAMAPI_TagUserRequest_Call) Return(_a0 *request.Request, _a1 *iam.TagUserOutput) *MockIAMAPI_TagUserRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_TagUserRequest_Call) RunAndReturn(run func(*iam.TagUserInput) (*request.Request, *iam.TagUserOutput)) *MockIAMAPI_TagUserRequest_Call {
	_c.Call.Return(run)
	return _c
}

// TagUserWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) TagUserWithContext(_a0 context.Context, _a1 *iam.TagUserInput, _a2 ...request.Option) (*iam.TagUserOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.TagUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.TagUserInput, ...request.Option) (*iam.TagUserOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.TagUserInput, ...request.Option) *iam.TagUserOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.TagUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.TagUserInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_TagUserWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagUserWithContext'
type MockIAMAPI_TagUserWithContext_Call struct {
	*mock.Call
}

// TagUserWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.TagUserInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) TagUserWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_TagUserWithContext_Call {
	return &MockIAMAPI_TagUserWithContext_Call{Call: _e.mock.On("TagUserWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_TagUserWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.TagUserInput, _a2 ...request.Option)) *MockIAMAPI_TagUserWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.TagUserInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_TagUserWithContext_Call) Return(_a0 *iam.TagUserOutput, _a1 error) *MockIAMAPI_TagUserWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_TagUserWithContext_Call) RunAndReturn(run func(context.Context, *iam.TagUserInput, ...request.Option) (*iam.TagUserOutput, error)) *MockIAMAPI_TagUserWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UntagInstanceProfile provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UntagInstanceProfile(_a0 *iam.UntagInstanceProfileInput) (*iam.UntagInstanceProfileOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.UntagInstanceProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.UntagInstanceProfileInput) (*iam.UntagInstanceProfileOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UntagInstanceProfileInput) *iam.UntagInstanceProfileOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UntagInstanceProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UntagInstanceProfileInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UntagInstanceProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagInstanceProfile'
type MockIAMAPI_UntagInstanceProfile_Call struct {
	*mock.Call
}

// UntagInstanceProfile is a helper method to define mock.On call
//   - _a0 *iam.UntagInstanceProfileInput
func (_e *MockIAMAPI_Expecter) UntagInstanceProfile(_a0 interface{}) *MockIAMAPI_UntagInstanceProfile_Call {
	return &MockIAMAPI_UntagInstanceProfile_Call{Call: _e.mock.On("UntagInstanceProfile", _a0)}
}

func (_c *MockIAMAPI_UntagInstanceProfile_Call) Run(run func(_a0 *iam.UntagInstanceProfileInput)) *MockIAMAPI_UntagInstanceProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UntagInstanceProfileInput))
	})
	return _c
}

func (_c *MockIAMAPI_UntagInstanceProfile_Call) Return(_a0 *iam.UntagInstanceProfileOutput, _a1 error) *MockIAMAPI_UntagInstanceProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UntagInstanceProfile_Call) RunAndReturn(run func(*iam.UntagInstanceProfileInput) (*iam.UntagInstanceProfileOutput, error)) *MockIAMAPI_UntagInstanceProfile_Call {
	_c.Call.Return(run)
	return _c
}

// UntagInstanceProfileRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UntagInstanceProfileRequest(_a0 *iam.UntagInstanceProfileInput) (*request.Request, *iam.UntagInstanceProfileOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.UntagInstanceProfileOutput
	if rf, ok := ret.Get(0).(func(*iam.UntagInstanceProfileInput) (*request.Request, *iam.UntagInstanceProfileOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UntagInstanceProfileInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UntagInstanceProfileInput) *iam.UntagInstanceProfileOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.UntagInstanceProfileOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_UntagInstanceProfileRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagInstanceProfileRequest'
type MockIAMAPI_UntagInstanceProfileRequest_Call struct {
	*mock.Call
}

// UntagInstanceProfileRequest is a helper method to define mock.On call
//   - _a0 *iam.UntagInstanceProfileInput
func (_e *MockIAMAPI_Expecter) UntagInstanceProfileRequest(_a0 interface{}) *MockIAMAPI_UntagInstanceProfileRequest_Call {
	return &MockIAMAPI_UntagInstanceProfileRequest_Call{Call: _e.mock.On("UntagInstanceProfileRequest", _a0)}
}

func (_c *MockIAMAPI_UntagInstanceProfileRequest_Call) Run(run func(_a0 *iam.UntagInstanceProfileInput)) *MockIAMAPI_UntagInstanceProfileRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UntagInstanceProfileInput))
	})
	return _c
}

func (_c *MockIAMAPI_UntagInstanceProfileRequest_Call) Return(_a0 *request.Request, _a1 *iam.UntagInstanceProfileOutput) *MockIAMAPI_UntagInstanceProfileRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UntagInstanceProfileRequest_Call) RunAndReturn(run func(*iam.UntagInstanceProfileInput) (*request.Request, *iam.UntagInstanceProfileOutput)) *MockIAMAPI_UntagInstanceProfileRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UntagInstanceProfileWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) UntagInstanceProfileWithContext(_a0 context.Context, _a1 *iam.UntagInstanceProfileInput, _a2 ...request.Option) (*iam.UntagInstanceProfileOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.UntagInstanceProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UntagInstanceProfileInput, ...request.Option) (*iam.UntagInstanceProfileOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UntagInstanceProfileInput, ...request.Option) *iam.UntagInstanceProfileOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UntagInstanceProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.UntagInstanceProfileInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UntagInstanceProfileWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagInstanceProfileWithContext'
type MockIAMAPI_UntagInstanceProfileWithContext_Call struct {
	*mock.Call
}

// UntagInstanceProfileWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.UntagInstanceProfileInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) UntagInstanceProfileWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_UntagInstanceProfileWithContext_Call {
	return &MockIAMAPI_UntagInstanceProfileWithContext_Call{Call: _e.mock.On("UntagInstanceProfileWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_UntagInstanceProfileWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.UntagInstanceProfileInput, _a2 ...request.Option)) *MockIAMAPI_UntagInstanceProfileWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.UntagInstanceProfileInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_UntagInstanceProfileWithContext_Call) Return(_a0 *iam.UntagInstanceProfileOutput, _a1 error) *MockIAMAPI_UntagInstanceProfileWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UntagInstanceProfileWithContext_Call) RunAndReturn(run func(context.Context, *iam.UntagInstanceProfileInput, ...request.Option) (*iam.UntagInstanceProfileOutput, error)) *MockIAMAPI_UntagInstanceProfileWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UntagMFADevice provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UntagMFADevice(_a0 *iam.UntagMFADeviceInput) (*iam.UntagMFADeviceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.UntagMFADeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.UntagMFADeviceInput) (*iam.UntagMFADeviceOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UntagMFADeviceInput) *iam.UntagMFADeviceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UntagMFADeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UntagMFADeviceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UntagMFADevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagMFADevice'
type MockIAMAPI_UntagMFADevice_Call struct {
	*mock.Call
}

// UntagMFADevice is a helper method to define mock.On call
//   - _a0 *iam.UntagMFADeviceInput
func (_e *MockIAMAPI_Expecter) UntagMFADevice(_a0 interface{}) *MockIAMAPI_UntagMFADevice_Call {
	return &MockIAMAPI_UntagMFADevice_Call{Call: _e.mock.On("UntagMFADevice", _a0)}
}

func (_c *MockIAMAPI_UntagMFADevice_Call) Run(run func(_a0 *iam.UntagMFADeviceInput)) *MockIAMAPI_UntagMFADevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UntagMFADeviceInput))
	})
	return _c
}

func (_c *MockIAMAPI_UntagMFADevice_Call) Return(_a0 *iam.UntagMFADeviceOutput, _a1 error) *MockIAMAPI_UntagMFADevice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UntagMFADevice_Call) RunAndReturn(run func(*iam.UntagMFADeviceInput) (*iam.UntagMFADeviceOutput, error)) *MockIAMAPI_UntagMFADevice_Call {
	_c.Call.Return(run)
	return _c
}

// UntagMFADeviceRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UntagMFADeviceRequest(_a0 *iam.UntagMFADeviceInput) (*request.Request, *iam.UntagMFADeviceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.UntagMFADeviceOutput
	if rf, ok := ret.Get(0).(func(*iam.UntagMFADeviceInput) (*request.Request, *iam.UntagMFADeviceOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UntagMFADeviceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UntagMFADeviceInput) *iam.UntagMFADeviceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.UntagMFADeviceOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_UntagMFADeviceRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagMFADeviceRequest'
type MockIAMAPI_UntagMFADeviceRequest_Call struct {
	*mock.Call
}

// UntagMFADeviceRequest is a helper method to define mock.On call
//   - _a0 *iam.UntagMFADeviceInput
func (_e *MockIAMAPI_Expecter) UntagMFADeviceRequest(_a0 interface{}) *MockIAMAPI_UntagMFADeviceRequest_Call {
	return &MockIAMAPI_UntagMFADeviceRequest_Call{Call: _e.mock.On("UntagMFADeviceRequest", _a0)}
}

func (_c *MockIAMAPI_UntagMFADeviceRequest_Call) Run(run func(_a0 *iam.UntagMFADeviceInput)) *MockIAMAPI_UntagMFADeviceRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UntagMFADeviceInput))
	})
	return _c
}

func (_c *MockIAMAPI_UntagMFADeviceRequest_Call) Return(_a0 *request.Request, _a1 *iam.UntagMFADeviceOutput) *MockIAMAPI_UntagMFADeviceRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UntagMFADeviceRequest_Call) RunAndReturn(run func(*iam.UntagMFADeviceInput) (*request.Request, *iam.UntagMFADeviceOutput)) *MockIAMAPI_UntagMFADeviceRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UntagMFADeviceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) UntagMFADeviceWithContext(_a0 context.Context, _a1 *iam.UntagMFADeviceInput, _a2 ...request.Option) (*iam.UntagMFADeviceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.UntagMFADeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UntagMFADeviceInput, ...request.Option) (*iam.UntagMFADeviceOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UntagMFADeviceInput, ...request.Option) *iam.UntagMFADeviceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UntagMFADeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.UntagMFADeviceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UntagMFADeviceWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagMFADeviceWithContext'
type MockIAMAPI_UntagMFADeviceWithContext_Call struct {
	*mock.Call
}

// UntagMFADeviceWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.UntagMFADeviceInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) UntagMFADeviceWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_UntagMFADeviceWithContext_Call {
	return &MockIAMAPI_UntagMFADeviceWithContext_Call{Call: _e.mock.On("UntagMFADeviceWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_UntagMFADeviceWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.UntagMFADeviceInput, _a2 ...request.Option)) *MockIAMAPI_UntagMFADeviceWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.UntagMFADeviceInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_UntagMFADeviceWithContext_Call) Return(_a0 *iam.UntagMFADeviceOutput, _a1 error) *MockIAMAPI_UntagMFADeviceWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UntagMFADeviceWithContext_Call) RunAndReturn(run func(context.Context, *iam.UntagMFADeviceInput, ...request.Option) (*iam.UntagMFADeviceOutput, error)) *MockIAMAPI_UntagMFADeviceWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UntagOpenIDConnectProvider provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UntagOpenIDConnectProvider(_a0 *iam.UntagOpenIDConnectProviderInput) (*iam.UntagOpenIDConnectProviderOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.UntagOpenIDConnectProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.UntagOpenIDConnectProviderInput) (*iam.UntagOpenIDConnectProviderOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UntagOpenIDConnectProviderInput) *iam.UntagOpenIDConnectProviderOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UntagOpenIDConnectProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UntagOpenIDConnectProviderInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UntagOpenIDConnectProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagOpenIDConnectProvider'
type MockIAMAPI_UntagOpenIDConnectProvider_Call struct {
	*mock.Call
}

// UntagOpenIDConnectProvider is a helper method to define mock.On call
//   - _a0 *iam.UntagOpenIDConnectProviderInput
func (_e *MockIAMAPI_Expecter) UntagOpenIDConnectProvider(_a0 interface{}) *MockIAMAPI_UntagOpenIDConnectProvider_Call {
	return &MockIAMAPI_UntagOpenIDConnectProvider_Call{Call: _e.mock.On("UntagOpenIDConnectProvider", _a0)}
}

func (_c *MockIAMAPI_UntagOpenIDConnectProvider_Call) Run(run func(_a0 *iam.UntagOpenIDConnectProviderInput)) *MockIAMAPI_UntagOpenIDConnectProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UntagOpenIDConnectProviderInput))
	})
	return _c
}

func (_c *MockIAMAPI_UntagOpenIDConnectProvider_Call) Return(_a0 *iam.UntagOpenIDConnectProviderOutput, _a1 error) *MockIAMAPI_UntagOpenIDConnectProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UntagOpenIDConnectProvider_Call) RunAndReturn(run func(*iam.UntagOpenIDConnectProviderInput) (*iam.UntagOpenIDConnectProviderOutput, error)) *MockIAMAPI_UntagOpenIDConnectProvider_Call {
	_c.Call.Return(run)
	return _c
}

// UntagOpenIDConnectProviderRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UntagOpenIDConnectProviderRequest(_a0 *iam.UntagOpenIDConnectProviderInput) (*request.Request, *iam.UntagOpenIDConnectProviderOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.UntagOpenIDConnectProviderOutput
	if rf, ok := ret.Get(0).(func(*iam.UntagOpenIDConnectProviderInput) (*request.Request, *iam.UntagOpenIDConnectProviderOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UntagOpenIDConnectProviderInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UntagOpenIDConnectProviderInput) *iam.UntagOpenIDConnectProviderOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.UntagOpenIDConnectProviderOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_UntagOpenIDConnectProviderRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagOpenIDConnectProviderRequest'
type MockIAMAPI_UntagOpenIDConnectProviderRequest_Call struct {
	*mock.Call
}

// UntagOpenIDConnectProviderRequest is a helper method to define mock.On call
//   - _a0 *iam.UntagOpenIDConnectProviderInput
func (_e *MockIAMAPI_Expecter) UntagOpenIDConnectProviderRequest(_a0 interface{}) *MockIAMAPI_UntagOpenIDConnectProviderRequest_Call {
	return &MockIAMAPI_UntagOpenIDConnectProviderRequest_Call{Call: _e.mock.On("UntagOpenIDConnectProviderRequest", _a0)}
}

func (_c *MockIAMAPI_UntagOpenIDConnectProviderRequest_Call) Run(run func(_a0 *iam.UntagOpenIDConnectProviderInput)) *MockIAMAPI_UntagOpenIDConnectProviderRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UntagOpenIDConnectProviderInput))
	})
	return _c
}

func (_c *MockIAMAPI_UntagOpenIDConnectProviderRequest_Call) Return(_a0 *request.Request, _a1 *iam.UntagOpenIDConnectProviderOutput) *MockIAMAPI_UntagOpenIDConnectProviderRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UntagOpenIDConnectProviderRequest_Call) RunAndReturn(run func(*iam.UntagOpenIDConnectProviderInput) (*request.Request, *iam.UntagOpenIDConnectProviderOutput)) *MockIAMAPI_UntagOpenIDConnectProviderRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UntagOpenIDConnectProviderWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) UntagOpenIDConnectProviderWithContext(_a0 context.Context, _a1 *iam.UntagOpenIDConnectProviderInput, _a2 ...request.Option) (*iam.UntagOpenIDConnectProviderOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.UntagOpenIDConnectProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UntagOpenIDConnectProviderInput, ...request.Option) (*iam.UntagOpenIDConnectProviderOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UntagOpenIDConnectProviderInput, ...request.Option) *iam.UntagOpenIDConnectProviderOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UntagOpenIDConnectProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.UntagOpenIDConnectProviderInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UntagOpenIDConnectProviderWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagOpenIDConnectProviderWithContext'
type MockIAMAPI_UntagOpenIDConnectProviderWithContext_Call struct {
	*mock.Call
}

// UntagOpenIDConnectProviderWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.UntagOpenIDConnectProviderInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) UntagOpenIDConnectProviderWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_UntagOpenIDConnectProviderWithContext_Call {
	return &MockIAMAPI_UntagOpenIDConnectProviderWithContext_Call{Call: _e.mock.On("UntagOpenIDConnectProviderWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_UntagOpenIDConnectProviderWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.UntagOpenIDConnectProviderInput, _a2 ...request.Option)) *MockIAMAPI_UntagOpenIDConnectProviderWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.UntagOpenIDConnectProviderInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_UntagOpenIDConnectProviderWithContext_Call) Return(_a0 *iam.UntagOpenIDConnectProviderOutput, _a1 error) *MockIAMAPI_UntagOpenIDConnectProviderWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UntagOpenIDConnectProviderWithContext_Call) RunAndReturn(run func(context.Context, *iam.UntagOpenIDConnectProviderInput, ...request.Option) (*iam.UntagOpenIDConnectProviderOutput, error)) *MockIAMAPI_UntagOpenIDConnectProviderWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UntagPolicy provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UntagPolicy(_a0 *iam.UntagPolicyInput) (*iam.UntagPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.UntagPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.UntagPolicyInput) (*iam.UntagPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UntagPolicyInput) *iam.UntagPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UntagPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UntagPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UntagPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagPolicy'
type MockIAMAPI_UntagPolicy_Call struct {
	*mock.Call
}

// UntagPolicy is a helper method to define mock.On call
//   - _a0 *iam.UntagPolicyInput
func (_e *MockIAMAPI_Expecter) UntagPolicy(_a0 interface{}) *MockIAMAPI_UntagPolicy_Call {
	return &MockIAMAPI_UntagPolicy_Call{Call: _e.mock.On("UntagPolicy", _a0)}
}

func (_c *MockIAMAPI_UntagPolicy_Call) Run(run func(_a0 *iam.UntagPolicyInput)) *MockIAMAPI_UntagPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UntagPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_UntagPolicy_Call) Return(_a0 *iam.UntagPolicyOutput, _a1 error) *MockIAMAPI_UntagPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UntagPolicy_Call) RunAndReturn(run func(*iam.UntagPolicyInput) (*iam.UntagPolicyOutput, error)) *MockIAMAPI_UntagPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// UntagPolicyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UntagPolicyRequest(_a0 *iam.UntagPolicyInput) (*request.Request, *iam.UntagPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.UntagPolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.UntagPolicyInput) (*request.Request, *iam.UntagPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UntagPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UntagPolicyInput) *iam.UntagPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.UntagPolicyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_UntagPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagPolicyRequest'
type MockIAMAPI_UntagPolicyRequest_Call struct {
	*mock.Call
}

// UntagPolicyRequest is a helper method to define mock.On call
//   - _a0 *iam.UntagPolicyInput
func (_e *MockIAMAPI_Expecter) UntagPolicyRequest(_a0 interface{}) *MockIAMAPI_UntagPolicyRequest_Call {
	return &MockIAMAPI_UntagPolicyRequest_Call{Call: _e.mock.On("UntagPolicyRequest", _a0)}
}

func (_c *MockIAMAPI_UntagPolicyRequest_Call) Run(run func(_a0 *iam.UntagPolicyInput)) *MockIAMAPI_UntagPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UntagPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_UntagPolicyRequest_Call) Return(_a0 *request.Request, _a1 *iam.UntagPolicyOutput) *MockIAMAPI_UntagPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UntagPolicyRequest_Call) RunAndReturn(run func(*iam.UntagPolicyInput) (*request.Request, *iam.UntagPolicyOutput)) *MockIAMAPI_UntagPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UntagPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) UntagPolicyWithContext(_a0 context.Context, _a1 *iam.UntagPolicyInput, _a2 ...request.Option) (*iam.UntagPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.UntagPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UntagPolicyInput, ...request.Option) (*iam.UntagPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UntagPolicyInput, ...request.Option) *iam.UntagPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UntagPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.UntagPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UntagPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagPolicyWithContext'
type MockIAMAPI_UntagPolicyWithContext_Call struct {
	*mock.Call
}

// UntagPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.UntagPolicyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) UntagPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_UntagPolicyWithContext_Call {
	return &MockIAMAPI_UntagPolicyWithContext_Call{Call: _e.mock.On("UntagPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_UntagPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.UntagPolicyInput, _a2 ...request.Option)) *MockIAMAPI_UntagPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.UntagPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_UntagPolicyWithContext_Call) Return(_a0 *iam.UntagPolicyOutput, _a1 error) *MockIAMAPI_UntagPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UntagPolicyWithContext_Call) RunAndReturn(run func(context.Context, *iam.UntagPolicyInput, ...request.Option) (*iam.UntagPolicyOutput, error)) *MockIAMAPI_UntagPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UntagRole provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UntagRole(_a0 *iam.UntagRoleInput) (*iam.UntagRoleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.UntagRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.UntagRoleInput) (*iam.UntagRoleOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UntagRoleInput) *iam.UntagRoleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UntagRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UntagRoleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UntagRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagRole'
type MockIAMAPI_UntagRole_Call struct {
	*mock.Call
}

// UntagRole is a helper method to define mock.On call
//   - _a0 *iam.UntagRoleInput
func (_e *MockIAMAPI_Expecter) UntagRole(_a0 interface{}) *MockIAMAPI_UntagRole_Call {
	return &MockIAMAPI_UntagRole_Call{Call: _e.mock.On("UntagRole", _a0)}
}

func (_c *MockIAMAPI_UntagRole_Call) Run(run func(_a0 *iam.UntagRoleInput)) *MockIAMAPI_UntagRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UntagRoleInput))
	})
	return _c
}

func (_c *MockIAMAPI_UntagRole_Call) Return(_a0 *iam.UntagRoleOutput, _a1 error) *MockIAMAPI_UntagRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UntagRole_Call) RunAndReturn(run func(*iam.UntagRoleInput) (*iam.UntagRoleOutput, error)) *MockIAMAPI_UntagRole_Call {
	_c.Call.Return(run)
	return _c
}

// UntagRoleRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UntagRoleRequest(_a0 *iam.UntagRoleInput) (*request.Request, *iam.UntagRoleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.UntagRoleOutput
	if rf, ok := ret.Get(0).(func(*iam.UntagRoleInput) (*request.Request, *iam.UntagRoleOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UntagRoleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UntagRoleInput) *iam.UntagRoleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.UntagRoleOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_UntagRoleRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagRoleRequest'
type MockIAMAPI_UntagRoleRequest_Call struct {
	*mock.Call
}

// UntagRoleRequest is a helper method to define mock.On call
//   - _a0 *iam.UntagRoleInput
func (_e *MockIAMAPI_Expecter) UntagRoleRequest(_a0 interface{}) *MockIAMAPI_UntagRoleRequest_Call {
	return &MockIAMAPI_UntagRoleRequest_Call{Call: _e.mock.On("UntagRoleRequest", _a0)}
}

func (_c *MockIAMAPI_UntagRoleRequest_Call) Run(run func(_a0 *iam.UntagRoleInput)) *MockIAMAPI_UntagRoleRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UntagRoleInput))
	})
	return _c
}

func (_c *MockIAMAPI_UntagRoleRequest_Call) Return(_a0 *request.Request, _a1 *iam.UntagRoleOutput) *MockIAMAPI_UntagRoleRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UntagRoleRequest_Call) RunAndReturn(run func(*iam.UntagRoleInput) (*request.Request, *iam.UntagRoleOutput)) *MockIAMAPI_UntagRoleRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UntagRoleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) UntagRoleWithContext(_a0 context.Context, _a1 *iam.UntagRoleInput, _a2 ...request.Option) (*iam.UntagRoleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.UntagRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UntagRoleInput, ...request.Option) (*iam.UntagRoleOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UntagRoleInput, ...request.Option) *iam.UntagRoleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UntagRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.UntagRoleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UntagRoleWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagRoleWithContext'
type MockIAMAPI_UntagRoleWithContext_Call struct {
	*mock.Call
}

// UntagRoleWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.UntagRoleInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) UntagRoleWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_UntagRoleWithContext_Call {
	return &MockIAMAPI_UntagRoleWithContext_Call{Call: _e.mock.On("UntagRoleWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_UntagRoleWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.UntagRoleInput, _a2 ...request.Option)) *MockIAMAPI_UntagRoleWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.UntagRoleInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_UntagRoleWithContext_Call) Return(_a0 *iam.UntagRoleOutput, _a1 error) *MockIAMAPI_UntagRoleWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UntagRoleWithContext_Call) RunAndReturn(run func(context.Context, *iam.UntagRoleInput, ...request.Option) (*iam.UntagRoleOutput, error)) *MockIAMAPI_UntagRoleWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UntagSAMLProvider provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UntagSAMLProvider(_a0 *iam.UntagSAMLProviderInput) (*iam.UntagSAMLProviderOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.UntagSAMLProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.UntagSAMLProviderInput) (*iam.UntagSAMLProviderOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UntagSAMLProviderInput) *iam.UntagSAMLProviderOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UntagSAMLProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UntagSAMLProviderInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UntagSAMLProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagSAMLProvider'
type MockIAMAPI_UntagSAMLProvider_Call struct {
	*mock.Call
}

// UntagSAMLProvider is a helper method to define mock.On call
//   - _a0 *iam.UntagSAMLProviderInput
func (_e *MockIAMAPI_Expecter) UntagSAMLProvider(_a0 interface{}) *MockIAMAPI_UntagSAMLProvider_Call {
	return &MockIAMAPI_UntagSAMLProvider_Call{Call: _e.mock.On("UntagSAMLProvider", _a0)}
}

func (_c *MockIAMAPI_UntagSAMLProvider_Call) Run(run func(_a0 *iam.UntagSAMLProviderInput)) *MockIAMAPI_UntagSAMLProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UntagSAMLProviderInput))
	})
	return _c
}

func (_c *MockIAMAPI_UntagSAMLProvider_Call) Return(_a0 *iam.UntagSAMLProviderOutput, _a1 error) *MockIAMAPI_UntagSAMLProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UntagSAMLProvider_Call) RunAndReturn(run func(*iam.UntagSAMLProviderInput) (*iam.UntagSAMLProviderOutput, error)) *MockIAMAPI_UntagSAMLProvider_Call {
	_c.Call.Return(run)
	return _c
}

// UntagSAMLProviderRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UntagSAMLProviderRequest(_a0 *iam.UntagSAMLProviderInput) (*request.Request, *iam.UntagSAMLProviderOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.UntagSAMLProviderOutput
	if rf, ok := ret.Get(0).(func(*iam.UntagSAMLProviderInput) (*request.Request, *iam.UntagSAMLProviderOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UntagSAMLProviderInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UntagSAMLProviderInput) *iam.UntagSAMLProviderOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.UntagSAMLProviderOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_UntagSAMLProviderRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagSAMLProviderRequest'
type MockIAMAPI_UntagSAMLProviderRequest_Call struct {
	*mock.Call
}

// UntagSAMLProviderRequest is a helper method to define mock.On call
//   - _a0 *iam.UntagSAMLProviderInput
func (_e *MockIAMAPI_Expecter) UntagSAMLProviderRequest(_a0 interface{}) *MockIAMAPI_UntagSAMLProviderRequest_Call {
	return &MockIAMAPI_UntagSAMLProviderRequest_Call{Call: _e.mock.On("UntagSAMLProviderRequest", _a0)}
}

func (_c *MockIAMAPI_UntagSAMLProviderRequest_Call) Run(run func(_a0 *iam.UntagSAMLProviderInput)) *MockIAMAPI_UntagSAMLProviderRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UntagSAMLProviderInput))
	})
	return _c
}

func (_c *MockIAMAPI_UntagSAMLProviderRequest_Call) Return(_a0 *request.Request, _a1 *iam.UntagSAMLProviderOutput) *MockIAMAPI_UntagSAMLProviderRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UntagSAMLProviderRequest_Call) RunAndReturn(run func(*iam.UntagSAMLProviderInput) (*request.Request, *iam.UntagSAMLProviderOutput)) *MockIAMAPI_UntagSAMLProviderRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UntagSAMLProviderWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) UntagSAMLProviderWithContext(_a0 context.Context, _a1 *iam.UntagSAMLProviderInput, _a2 ...request.Option) (*iam.UntagSAMLProviderOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.UntagSAMLProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UntagSAMLProviderInput, ...request.Option) (*iam.UntagSAMLProviderOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UntagSAMLProviderInput, ...request.Option) *iam.UntagSAMLProviderOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UntagSAMLProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.UntagSAMLProviderInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UntagSAMLProviderWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagSAMLProviderWithContext'
type MockIAMAPI_UntagSAMLProviderWithContext_Call struct {
	*mock.Call
}

// UntagSAMLProviderWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.UntagSAMLProviderInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) UntagSAMLProviderWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_UntagSAMLProviderWithContext_Call {
	return &MockIAMAPI_UntagSAMLProviderWithContext_Call{Call: _e.mock.On("UntagSAMLProviderWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_UntagSAMLProviderWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.UntagSAMLProviderInput, _a2 ...request.Option)) *MockIAMAPI_UntagSAMLProviderWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.UntagSAMLProviderInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_UntagSAMLProviderWithContext_Call) Return(_a0 *iam.UntagSAMLProviderOutput, _a1 error) *MockIAMAPI_UntagSAMLProviderWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UntagSAMLProviderWithContext_Call) RunAndReturn(run func(context.Context, *iam.UntagSAMLProviderInput, ...request.Option) (*iam.UntagSAMLProviderOutput, error)) *MockIAMAPI_UntagSAMLProviderWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UntagServerCertificate provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UntagServerCertificate(_a0 *iam.UntagServerCertificateInput) (*iam.UntagServerCertificateOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.UntagServerCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.UntagServerCertificateInput) (*iam.UntagServerCertificateOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UntagServerCertificateInput) *iam.UntagServerCertificateOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UntagServerCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UntagServerCertificateInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UntagServerCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagServerCertificate'
type MockIAMAPI_UntagServerCertificate_Call struct {
	*mock.Call
}

// UntagServerCertificate is a helper method to define mock.On call
//   - _a0 *iam.UntagServerCertificateInput
func (_e *MockIAMAPI_Expecter) UntagServerCertificate(_a0 interface{}) *MockIAMAPI_UntagServerCertificate_Call {
	return &MockIAMAPI_UntagServerCertificate_Call{Call: _e.mock.On("UntagServerCertificate", _a0)}
}

func (_c *MockIAMAPI_UntagServerCertificate_Call) Run(run func(_a0 *iam.UntagServerCertificateInput)) *MockIAMAPI_UntagServerCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UntagServerCertificateInput))
	})
	return _c
}

func (_c *MockIAMAPI_UntagServerCertificate_Call) Return(_a0 *iam.UntagServerCertificateOutput, _a1 error) *MockIAMAPI_UntagServerCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UntagServerCertificate_Call) RunAndReturn(run func(*iam.UntagServerCertificateInput) (*iam.UntagServerCertificateOutput, error)) *MockIAMAPI_UntagServerCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// UntagServerCertificateRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UntagServerCertificateRequest(_a0 *iam.UntagServerCertificateInput) (*request.Request, *iam.UntagServerCertificateOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.UntagServerCertificateOutput
	if rf, ok := ret.Get(0).(func(*iam.UntagServerCertificateInput) (*request.Request, *iam.UntagServerCertificateOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UntagServerCertificateInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UntagServerCertificateInput) *iam.UntagServerCertificateOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.UntagServerCertificateOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_UntagServerCertificateRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagServerCertificateRequest'
type MockIAMAPI_UntagServerCertificateRequest_Call struct {
	*mock.Call
}

// UntagServerCertificateRequest is a helper method to define mock.On call
//   - _a0 *iam.UntagServerCertificateInput
func (_e *MockIAMAPI_Expecter) UntagServerCertificateRequest(_a0 interface{}) *MockIAMAPI_UntagServerCertificateRequest_Call {
	return &MockIAMAPI_UntagServerCertificateRequest_Call{Call: _e.mock.On("UntagServerCertificateRequest", _a0)}
}

func (_c *MockIAMAPI_UntagServerCertificateRequest_Call) Run(run func(_a0 *iam.UntagServerCertificateInput)) *MockIAMAPI_UntagServerCertificateRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UntagServerCertificateInput))
	})
	return _c
}

func (_c *MockIAMAPI_UntagServerCertificateRequest_Call) Return(_a0 *request.Request, _a1 *iam.UntagServerCertificateOutput) *MockIAMAPI_UntagServerCertificateRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UntagServerCertificateRequest_Call) RunAndReturn(run func(*iam.UntagServerCertificateInput) (*request.Request, *iam.UntagServerCertificateOutput)) *MockIAMAPI_UntagServerCertificateRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UntagServerCertificateWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) UntagServerCertificateWithContext(_a0 context.Context, _a1 *iam.UntagServerCertificateInput, _a2 ...request.Option) (*iam.UntagServerCertificateOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.UntagServerCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UntagServerCertificateInput, ...request.Option) (*iam.UntagServerCertificateOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UntagServerCertificateInput, ...request.Option) *iam.UntagServerCertificateOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UntagServerCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.UntagServerCertificateInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UntagServerCertificateWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagServerCertificateWithContext'
type MockIAMAPI_UntagServerCertificateWithContext_Call struct {
	*mock.Call
}

// UntagServerCertificateWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.UntagServerCertificateInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) UntagServerCertificateWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_UntagServerCertificateWithContext_Call {
	return &MockIAMAPI_UntagServerCertificateWithContext_Call{Call: _e.mock.On("UntagServerCertificateWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_UntagServerCertificateWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.UntagServerCertificateInput, _a2 ...request.Option)) *MockIAMAPI_UntagServerCertificateWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.UntagServerCertificateInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_UntagServerCertificateWithContext_Call) Return(_a0 *iam.UntagServerCertificateOutput, _a1 error) *MockIAMAPI_UntagServerCertificateWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UntagServerCertificateWithContext_Call) RunAndReturn(run func(context.Context, *iam.UntagServerCertificateInput, ...request.Option) (*iam.UntagServerCertificateOutput, error)) *MockIAMAPI_UntagServerCertificateWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UntagUser provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UntagUser(_a0 *iam.UntagUserInput) (*iam.UntagUserOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.UntagUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.UntagUserInput) (*iam.UntagUserOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UntagUserInput) *iam.UntagUserOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UntagUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UntagUserInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UntagUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagUser'
type MockIAMAPI_UntagUser_Call struct {
	*mock.Call
}

// UntagUser is a helper method to define mock.On call
//   - _a0 *iam.UntagUserInput
func (_e *MockIAMAPI_Expecter) UntagUser(_a0 interface{}) *MockIAMAPI_UntagUser_Call {
	return &MockIAMAPI_UntagUser_Call{Call: _e.mock.On("UntagUser", _a0)}
}

func (_c *MockIAMAPI_UntagUser_Call) Run(run func(_a0 *iam.UntagUserInput)) *MockIAMAPI_UntagUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UntagUserInput))
	})
	return _c
}

func (_c *MockIAMAPI_UntagUser_Call) Return(_a0 *iam.UntagUserOutput, _a1 error) *MockIAMAPI_UntagUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UntagUser_Call) RunAndReturn(run func(*iam.UntagUserInput) (*iam.UntagUserOutput, error)) *MockIAMAPI_UntagUser_Call {
	_c.Call.Return(run)
	return _c
}

// UntagUserRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UntagUserRequest(_a0 *iam.UntagUserInput) (*request.Request, *iam.UntagUserOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.UntagUserOutput
	if rf, ok := ret.Get(0).(func(*iam.UntagUserInput) (*request.Request, *iam.UntagUserOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UntagUserInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UntagUserInput) *iam.UntagUserOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.UntagUserOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_UntagUserRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagUserRequest'
type MockIAMAPI_UntagUserRequest_Call struct {
	*mock.Call
}

// UntagUserRequest is a helper method to define mock.On call
//   - _a0 *iam.UntagUserInput
func (_e *MockIAMAPI_Expecter) UntagUserRequest(_a0 interface{}) *MockIAMAPI_UntagUserRequest_Call {
	return &MockIAMAPI_UntagUserRequest_Call{Call: _e.mock.On("UntagUserRequest", _a0)}
}

func (_c *MockIAMAPI_UntagUserRequest_Call) Run(run func(_a0 *iam.UntagUserInput)) *MockIAMAPI_UntagUserRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UntagUserInput))
	})
	return _c
}

func (_c *MockIAMAPI_UntagUserRequest_Call) Return(_a0 *request.Request, _a1 *iam.UntagUserOutput) *MockIAMAPI_UntagUserRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UntagUserRequest_Call) RunAndReturn(run func(*iam.UntagUserInput) (*request.Request, *iam.UntagUserOutput)) *MockIAMAPI_UntagUserRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UntagUserWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) UntagUserWithContext(_a0 context.Context, _a1 *iam.UntagUserInput, _a2 ...request.Option) (*iam.UntagUserOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.UntagUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UntagUserInput, ...request.Option) (*iam.UntagUserOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UntagUserInput, ...request.Option) *iam.UntagUserOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UntagUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.UntagUserInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UntagUserWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagUserWithContext'
type MockIAMAPI_UntagUserWithContext_Call struct {
	*mock.Call
}

// UntagUserWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.UntagUserInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) UntagUserWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_UntagUserWithContext_Call {
	return &MockIAMAPI_UntagUserWithContext_Call{Call: _e.mock.On("UntagUserWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_UntagUserWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.UntagUserInput, _a2 ...request.Option)) *MockIAMAPI_UntagUserWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.UntagUserInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_UntagUserWithContext_Call) Return(_a0 *iam.UntagUserOutput, _a1 error) *MockIAMAPI_UntagUserWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UntagUserWithContext_Call) RunAndReturn(run func(context.Context, *iam.UntagUserInput, ...request.Option) (*iam.UntagUserOutput, error)) *MockIAMAPI_UntagUserWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccessKey provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UpdateAccessKey(_a0 *iam.UpdateAccessKeyInput) (*iam.UpdateAccessKeyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.UpdateAccessKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.UpdateAccessKeyInput) (*iam.UpdateAccessKeyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UpdateAccessKeyInput) *iam.UpdateAccessKeyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateAccessKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UpdateAccessKeyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UpdateAccessKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccessKey'
type MockIAMAPI_UpdateAccessKey_Call struct {
	*mock.Call
}

// UpdateAccessKey is a helper method to define mock.On call
//   - _a0 *iam.UpdateAccessKeyInput
func (_e *MockIAMAPI_Expecter) UpdateAccessKey(_a0 interface{}) *MockIAMAPI_UpdateAccessKey_Call {
	return &MockIAMAPI_UpdateAccessKey_Call{Call: _e.mock.On("UpdateAccessKey", _a0)}
}

func (_c *MockIAMAPI_UpdateAccessKey_Call) Run(run func(_a0 *iam.UpdateAccessKeyInput)) *MockIAMAPI_UpdateAccessKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UpdateAccessKeyInput))
	})
	return _c
}

func (_c *MockIAMAPI_UpdateAccessKey_Call) Return(_a0 *iam.UpdateAccessKeyOutput, _a1 error) *MockIAMAPI_UpdateAccessKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateAccessKey_Call) RunAndReturn(run func(*iam.UpdateAccessKeyInput) (*iam.UpdateAccessKeyOutput, error)) *MockIAMAPI_UpdateAccessKey_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccessKeyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UpdateAccessKeyRequest(_a0 *iam.UpdateAccessKeyInput) (*request.Request, *iam.UpdateAccessKeyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.UpdateAccessKeyOutput
	if rf, ok := ret.Get(0).(func(*iam.UpdateAccessKeyInput) (*request.Request, *iam.UpdateAccessKeyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UpdateAccessKeyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UpdateAccessKeyInput) *iam.UpdateAccessKeyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.UpdateAccessKeyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_UpdateAccessKeyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccessKeyRequest'
type MockIAMAPI_UpdateAccessKeyRequest_Call struct {
	*mock.Call
}

// UpdateAccessKeyRequest is a helper method to define mock.On call
//   - _a0 *iam.UpdateAccessKeyInput
func (_e *MockIAMAPI_Expecter) UpdateAccessKeyRequest(_a0 interface{}) *MockIAMAPI_UpdateAccessKeyRequest_Call {
	return &MockIAMAPI_UpdateAccessKeyRequest_Call{Call: _e.mock.On("UpdateAccessKeyRequest", _a0)}
}

func (_c *MockIAMAPI_UpdateAccessKeyRequest_Call) Run(run func(_a0 *iam.UpdateAccessKeyInput)) *MockIAMAPI_UpdateAccessKeyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UpdateAccessKeyInput))
	})
	return _c
}

func (_c *MockIAMAPI_UpdateAccessKeyRequest_Call) Return(_a0 *request.Request, _a1 *iam.UpdateAccessKeyOutput) *MockIAMAPI_UpdateAccessKeyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateAccessKeyRequest_Call) RunAndReturn(run func(*iam.UpdateAccessKeyInput) (*request.Request, *iam.UpdateAccessKeyOutput)) *MockIAMAPI_UpdateAccessKeyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccessKeyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) UpdateAccessKeyWithContext(_a0 context.Context, _a1 *iam.UpdateAccessKeyInput, _a2 ...request.Option) (*iam.UpdateAccessKeyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.UpdateAccessKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UpdateAccessKeyInput, ...request.Option) (*iam.UpdateAccessKeyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UpdateAccessKeyInput, ...request.Option) *iam.UpdateAccessKeyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateAccessKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.UpdateAccessKeyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UpdateAccessKeyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccessKeyWithContext'
type MockIAMAPI_UpdateAccessKeyWithContext_Call struct {
	*mock.Call
}

// UpdateAccessKeyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.UpdateAccessKeyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) UpdateAccessKeyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_UpdateAccessKeyWithContext_Call {
	return &MockIAMAPI_UpdateAccessKeyWithContext_Call{Call: _e.mock.On("UpdateAccessKeyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_UpdateAccessKeyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.UpdateAccessKeyInput, _a2 ...request.Option)) *MockIAMAPI_UpdateAccessKeyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.UpdateAccessKeyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_UpdateAccessKeyWithContext_Call) Return(_a0 *iam.UpdateAccessKeyOutput, _a1 error) *MockIAMAPI_UpdateAccessKeyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateAccessKeyWithContext_Call) RunAndReturn(run func(context.Context, *iam.UpdateAccessKeyInput, ...request.Option) (*iam.UpdateAccessKeyOutput, error)) *MockIAMAPI_UpdateAccessKeyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccountPasswordPolicy provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UpdateAccountPasswordPolicy(_a0 *iam.UpdateAccountPasswordPolicyInput) (*iam.UpdateAccountPasswordPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.UpdateAccountPasswordPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.UpdateAccountPasswordPolicyInput) (*iam.UpdateAccountPasswordPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UpdateAccountPasswordPolicyInput) *iam.UpdateAccountPasswordPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateAccountPasswordPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UpdateAccountPasswordPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UpdateAccountPasswordPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccountPasswordPolicy'
type MockIAMAPI_UpdateAccountPasswordPolicy_Call struct {
	*mock.Call
}

// UpdateAccountPasswordPolicy is a helper method to define mock.On call
//   - _a0 *iam.UpdateAccountPasswordPolicyInput
func (_e *MockIAMAPI_Expecter) UpdateAccountPasswordPolicy(_a0 interface{}) *MockIAMAPI_UpdateAccountPasswordPolicy_Call {
	return &MockIAMAPI_UpdateAccountPasswordPolicy_Call{Call: _e.mock.On("UpdateAccountPasswordPolicy", _a0)}
}

func (_c *MockIAMAPI_UpdateAccountPasswordPolicy_Call) Run(run func(_a0 *iam.UpdateAccountPasswordPolicyInput)) *MockIAMAPI_UpdateAccountPasswordPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UpdateAccountPasswordPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_UpdateAccountPasswordPolicy_Call) Return(_a0 *iam.UpdateAccountPasswordPolicyOutput, _a1 error) *MockIAMAPI_UpdateAccountPasswordPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateAccountPasswordPolicy_Call) RunAndReturn(run func(*iam.UpdateAccountPasswordPolicyInput) (*iam.UpdateAccountPasswordPolicyOutput, error)) *MockIAMAPI_UpdateAccountPasswordPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccountPasswordPolicyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UpdateAccountPasswordPolicyRequest(_a0 *iam.UpdateAccountPasswordPolicyInput) (*request.Request, *iam.UpdateAccountPasswordPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.UpdateAccountPasswordPolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.UpdateAccountPasswordPolicyInput) (*request.Request, *iam.UpdateAccountPasswordPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UpdateAccountPasswordPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UpdateAccountPasswordPolicyInput) *iam.UpdateAccountPasswordPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.UpdateAccountPasswordPolicyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_UpdateAccountPasswordPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccountPasswordPolicyRequest'
type MockIAMAPI_UpdateAccountPasswordPolicyRequest_Call struct {
	*mock.Call
}

// UpdateAccountPasswordPolicyRequest is a helper method to define mock.On call
//   - _a0 *iam.UpdateAccountPasswordPolicyInput
func (_e *MockIAMAPI_Expecter) UpdateAccountPasswordPolicyRequest(_a0 interface{}) *MockIAMAPI_UpdateAccountPasswordPolicyRequest_Call {
	return &MockIAMAPI_UpdateAccountPasswordPolicyRequest_Call{Call: _e.mock.On("UpdateAccountPasswordPolicyRequest", _a0)}
}

func (_c *MockIAMAPI_UpdateAccountPasswordPolicyRequest_Call) Run(run func(_a0 *iam.UpdateAccountPasswordPolicyInput)) *MockIAMAPI_UpdateAccountPasswordPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UpdateAccountPasswordPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_UpdateAccountPasswordPolicyRequest_Call) Return(_a0 *request.Request, _a1 *iam.UpdateAccountPasswordPolicyOutput) *MockIAMAPI_UpdateAccountPasswordPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateAccountPasswordPolicyRequest_Call) RunAndReturn(run func(*iam.UpdateAccountPasswordPolicyInput) (*request.Request, *iam.UpdateAccountPasswordPolicyOutput)) *MockIAMAPI_UpdateAccountPasswordPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccountPasswordPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) UpdateAccountPasswordPolicyWithContext(_a0 context.Context, _a1 *iam.UpdateAccountPasswordPolicyInput, _a2 ...request.Option) (*iam.UpdateAccountPasswordPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.UpdateAccountPasswordPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UpdateAccountPasswordPolicyInput, ...request.Option) (*iam.UpdateAccountPasswordPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UpdateAccountPasswordPolicyInput, ...request.Option) *iam.UpdateAccountPasswordPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateAccountPasswordPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.UpdateAccountPasswordPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UpdateAccountPasswordPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccountPasswordPolicyWithContext'
type MockIAMAPI_UpdateAccountPasswordPolicyWithContext_Call struct {
	*mock.Call
}

// UpdateAccountPasswordPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.UpdateAccountPasswordPolicyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) UpdateAccountPasswordPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_UpdateAccountPasswordPolicyWithContext_Call {
	return &MockIAMAPI_UpdateAccountPasswordPolicyWithContext_Call{Call: _e.mock.On("UpdateAccountPasswordPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_UpdateAccountPasswordPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.UpdateAccountPasswordPolicyInput, _a2 ...request.Option)) *MockIAMAPI_UpdateAccountPasswordPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.UpdateAccountPasswordPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_UpdateAccountPasswordPolicyWithContext_Call) Return(_a0 *iam.UpdateAccountPasswordPolicyOutput, _a1 error) *MockIAMAPI_UpdateAccountPasswordPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateAccountPasswordPolicyWithContext_Call) RunAndReturn(run func(context.Context, *iam.UpdateAccountPasswordPolicyInput, ...request.Option) (*iam.UpdateAccountPasswordPolicyOutput, error)) *MockIAMAPI_UpdateAccountPasswordPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAssumeRolePolicy provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UpdateAssumeRolePolicy(_a0 *iam.UpdateAssumeRolePolicyInput) (*iam.UpdateAssumeRolePolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.UpdateAssumeRolePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.UpdateAssumeRolePolicyInput) (*iam.UpdateAssumeRolePolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UpdateAssumeRolePolicyInput) *iam.UpdateAssumeRolePolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateAssumeRolePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UpdateAssumeRolePolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UpdateAssumeRolePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAssumeRolePolicy'
type MockIAMAPI_UpdateAssumeRolePolicy_Call struct {
	*mock.Call
}

// UpdateAssumeRolePolicy is a helper method to define mock.On call
//   - _a0 *iam.UpdateAssumeRolePolicyInput
func (_e *MockIAMAPI_Expecter) UpdateAssumeRolePolicy(_a0 interface{}) *MockIAMAPI_UpdateAssumeRolePolicy_Call {
	return &MockIAMAPI_UpdateAssumeRolePolicy_Call{Call: _e.mock.On("UpdateAssumeRolePolicy", _a0)}
}

func (_c *MockIAMAPI_UpdateAssumeRolePolicy_Call) Run(run func(_a0 *iam.UpdateAssumeRolePolicyInput)) *MockIAMAPI_UpdateAssumeRolePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UpdateAssumeRolePolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_UpdateAssumeRolePolicy_Call) Return(_a0 *iam.UpdateAssumeRolePolicyOutput, _a1 error) *MockIAMAPI_UpdateAssumeRolePolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateAssumeRolePolicy_Call) RunAndReturn(run func(*iam.UpdateAssumeRolePolicyInput) (*iam.UpdateAssumeRolePolicyOutput, error)) *MockIAMAPI_UpdateAssumeRolePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAssumeRolePolicyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UpdateAssumeRolePolicyRequest(_a0 *iam.UpdateAssumeRolePolicyInput) (*request.Request, *iam.UpdateAssumeRolePolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.UpdateAssumeRolePolicyOutput
	if rf, ok := ret.Get(0).(func(*iam.UpdateAssumeRolePolicyInput) (*request.Request, *iam.UpdateAssumeRolePolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UpdateAssumeRolePolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UpdateAssumeRolePolicyInput) *iam.UpdateAssumeRolePolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.UpdateAssumeRolePolicyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_UpdateAssumeRolePolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAssumeRolePolicyRequest'
type MockIAMAPI_UpdateAssumeRolePolicyRequest_Call struct {
	*mock.Call
}

// UpdateAssumeRolePolicyRequest is a helper method to define mock.On call
//   - _a0 *iam.UpdateAssumeRolePolicyInput
func (_e *MockIAMAPI_Expecter) UpdateAssumeRolePolicyRequest(_a0 interface{}) *MockIAMAPI_UpdateAssumeRolePolicyRequest_Call {
	return &MockIAMAPI_UpdateAssumeRolePolicyRequest_Call{Call: _e.mock.On("UpdateAssumeRolePolicyRequest", _a0)}
}

func (_c *MockIAMAPI_UpdateAssumeRolePolicyRequest_Call) Run(run func(_a0 *iam.UpdateAssumeRolePolicyInput)) *MockIAMAPI_UpdateAssumeRolePolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UpdateAssumeRolePolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_UpdateAssumeRolePolicyRequest_Call) Return(_a0 *request.Request, _a1 *iam.UpdateAssumeRolePolicyOutput) *MockIAMAPI_UpdateAssumeRolePolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateAssumeRolePolicyRequest_Call) RunAndReturn(run func(*iam.UpdateAssumeRolePolicyInput) (*request.Request, *iam.UpdateAssumeRolePolicyOutput)) *MockIAMAPI_UpdateAssumeRolePolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAssumeRolePolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) UpdateAssumeRolePolicyWithContext(_a0 context.Context, _a1 *iam.UpdateAssumeRolePolicyInput, _a2 ...request.Option) (*iam.UpdateAssumeRolePolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.UpdateAssumeRolePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UpdateAssumeRolePolicyInput, ...request.Option) (*iam.UpdateAssumeRolePolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UpdateAssumeRolePolicyInput, ...request.Option) *iam.UpdateAssumeRolePolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateAssumeRolePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.UpdateAssumeRolePolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UpdateAssumeRolePolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAssumeRolePolicyWithContext'
type MockIAMAPI_UpdateAssumeRolePolicyWithContext_Call struct {
	*mock.Call
}

// UpdateAssumeRolePolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.UpdateAssumeRolePolicyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) UpdateAssumeRolePolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_UpdateAssumeRolePolicyWithContext_Call {
	return &MockIAMAPI_UpdateAssumeRolePolicyWithContext_Call{Call: _e.mock.On("UpdateAssumeRolePolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_UpdateAssumeRolePolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.UpdateAssumeRolePolicyInput, _a2 ...request.Option)) *MockIAMAPI_UpdateAssumeRolePolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.UpdateAssumeRolePolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_UpdateAssumeRolePolicyWithContext_Call) Return(_a0 *iam.UpdateAssumeRolePolicyOutput, _a1 error) *MockIAMAPI_UpdateAssumeRolePolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateAssumeRolePolicyWithContext_Call) RunAndReturn(run func(context.Context, *iam.UpdateAssumeRolePolicyInput, ...request.Option) (*iam.UpdateAssumeRolePolicyOutput, error)) *MockIAMAPI_UpdateAssumeRolePolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroup provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UpdateGroup(_a0 *iam.UpdateGroupInput) (*iam.UpdateGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.UpdateGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.UpdateGroupInput) (*iam.UpdateGroupOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UpdateGroupInput) *iam.UpdateGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UpdateGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UpdateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroup'
type MockIAMAPI_UpdateGroup_Call struct {
	*mock.Call
}

// UpdateGroup is a helper method to define mock.On call
//   - _a0 *iam.UpdateGroupInput
func (_e *MockIAMAPI_Expecter) UpdateGroup(_a0 interface{}) *MockIAMAPI_UpdateGroup_Call {
	return &MockIAMAPI_UpdateGroup_Call{Call: _e.mock.On("UpdateGroup", _a0)}
}

func (_c *MockIAMAPI_UpdateGroup_Call) Run(run func(_a0 *iam.UpdateGroupInput)) *MockIAMAPI_UpdateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UpdateGroupInput))
	})
	return _c
}

func (_c *MockIAMAPI_UpdateGroup_Call) Return(_a0 *iam.UpdateGroupOutput, _a1 error) *MockIAMAPI_UpdateGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateGroup_Call) RunAndReturn(run func(*iam.UpdateGroupInput) (*iam.UpdateGroupOutput, error)) *MockIAMAPI_UpdateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UpdateGroupRequest(_a0 *iam.UpdateGroupInput) (*request.Request, *iam.UpdateGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.UpdateGroupOutput
	if rf, ok := ret.Get(0).(func(*iam.UpdateGroupInput) (*request.Request, *iam.UpdateGroupOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UpdateGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UpdateGroupInput) *iam.UpdateGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.UpdateGroupOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_UpdateGroupRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupRequest'
type MockIAMAPI_UpdateGroupRequest_Call struct {
	*mock.Call
}

// UpdateGroupRequest is a helper method to define mock.On call
//   - _a0 *iam.UpdateGroupInput
func (_e *MockIAMAPI_Expecter) UpdateGroupRequest(_a0 interface{}) *MockIAMAPI_UpdateGroupRequest_Call {
	return &MockIAMAPI_UpdateGroupRequest_Call{Call: _e.mock.On("UpdateGroupRequest", _a0)}
}

func (_c *MockIAMAPI_UpdateGroupRequest_Call) Run(run func(_a0 *iam.UpdateGroupInput)) *MockIAMAPI_UpdateGroupRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UpdateGroupInput))
	})
	return _c
}

func (_c *MockIAMAPI_UpdateGroupRequest_Call) Return(_a0 *request.Request, _a1 *iam.UpdateGroupOutput) *MockIAMAPI_UpdateGroupRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateGroupRequest_Call) RunAndReturn(run func(*iam.UpdateGroupInput) (*request.Request, *iam.UpdateGroupOutput)) *MockIAMAPI_UpdateGroupRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) UpdateGroupWithContext(_a0 context.Context, _a1 *iam.UpdateGroupInput, _a2 ...request.Option) (*iam.UpdateGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.UpdateGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UpdateGroupInput, ...request.Option) (*iam.UpdateGroupOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UpdateGroupInput, ...request.Option) *iam.UpdateGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.UpdateGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UpdateGroupWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupWithContext'
type MockIAMAPI_UpdateGroupWithContext_Call struct {
	*mock.Call
}

// UpdateGroupWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.UpdateGroupInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) UpdateGroupWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_UpdateGroupWithContext_Call {
	return &MockIAMAPI_UpdateGroupWithContext_Call{Call: _e.mock.On("UpdateGroupWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_UpdateGroupWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.UpdateGroupInput, _a2 ...request.Option)) *MockIAMAPI_UpdateGroupWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.UpdateGroupInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_UpdateGroupWithContext_Call) Return(_a0 *iam.UpdateGroupOutput, _a1 error) *MockIAMAPI_UpdateGroupWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateGroupWithContext_Call) RunAndReturn(run func(context.Context, *iam.UpdateGroupInput, ...request.Option) (*iam.UpdateGroupOutput, error)) *MockIAMAPI_UpdateGroupWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLoginProfile provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UpdateLoginProfile(_a0 *iam.UpdateLoginProfileInput) (*iam.UpdateLoginProfileOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.UpdateLoginProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.UpdateLoginProfileInput) (*iam.UpdateLoginProfileOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UpdateLoginProfileInput) *iam.UpdateLoginProfileOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateLoginProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UpdateLoginProfileInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UpdateLoginProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLoginProfile'
type MockIAMAPI_UpdateLoginProfile_Call struct {
	*mock.Call
}

// UpdateLoginProfile is a helper method to define mock.On call
//   - _a0 *iam.UpdateLoginProfileInput
func (_e *MockIAMAPI_Expecter) UpdateLoginProfile(_a0 interface{}) *MockIAMAPI_UpdateLoginProfile_Call {
	return &MockIAMAPI_UpdateLoginProfile_Call{Call: _e.mock.On("UpdateLoginProfile", _a0)}
}

func (_c *MockIAMAPI_UpdateLoginProfile_Call) Run(run func(_a0 *iam.UpdateLoginProfileInput)) *MockIAMAPI_UpdateLoginProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UpdateLoginProfileInput))
	})
	return _c
}

func (_c *MockIAMAPI_UpdateLoginProfile_Call) Return(_a0 *iam.UpdateLoginProfileOutput, _a1 error) *MockIAMAPI_UpdateLoginProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateLoginProfile_Call) RunAndReturn(run func(*iam.UpdateLoginProfileInput) (*iam.UpdateLoginProfileOutput, error)) *MockIAMAPI_UpdateLoginProfile_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLoginProfileRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UpdateLoginProfileRequest(_a0 *iam.UpdateLoginProfileInput) (*request.Request, *iam.UpdateLoginProfileOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.UpdateLoginProfileOutput
	if rf, ok := ret.Get(0).(func(*iam.UpdateLoginProfileInput) (*request.Request, *iam.UpdateLoginProfileOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UpdateLoginProfileInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UpdateLoginProfileInput) *iam.UpdateLoginProfileOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.UpdateLoginProfileOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_UpdateLoginProfileRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLoginProfileRequest'
type MockIAMAPI_UpdateLoginProfileRequest_Call struct {
	*mock.Call
}

// UpdateLoginProfileRequest is a helper method to define mock.On call
//   - _a0 *iam.UpdateLoginProfileInput
func (_e *MockIAMAPI_Expecter) UpdateLoginProfileRequest(_a0 interface{}) *MockIAMAPI_UpdateLoginProfileRequest_Call {
	return &MockIAMAPI_UpdateLoginProfileRequest_Call{Call: _e.mock.On("UpdateLoginProfileRequest", _a0)}
}

func (_c *MockIAMAPI_UpdateLoginProfileRequest_Call) Run(run func(_a0 *iam.UpdateLoginProfileInput)) *MockIAMAPI_UpdateLoginProfileRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UpdateLoginProfileInput))
	})
	return _c
}

func (_c *MockIAMAPI_UpdateLoginProfileRequest_Call) Return(_a0 *request.Request, _a1 *iam.UpdateLoginProfileOutput) *MockIAMAPI_UpdateLoginProfileRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateLoginProfileRequest_Call) RunAndReturn(run func(*iam.UpdateLoginProfileInput) (*request.Request, *iam.UpdateLoginProfileOutput)) *MockIAMAPI_UpdateLoginProfileRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLoginProfileWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) UpdateLoginProfileWithContext(_a0 context.Context, _a1 *iam.UpdateLoginProfileInput, _a2 ...request.Option) (*iam.UpdateLoginProfileOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.UpdateLoginProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UpdateLoginProfileInput, ...request.Option) (*iam.UpdateLoginProfileOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UpdateLoginProfileInput, ...request.Option) *iam.UpdateLoginProfileOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateLoginProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.UpdateLoginProfileInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UpdateLoginProfileWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLoginProfileWithContext'
type MockIAMAPI_UpdateLoginProfileWithContext_Call struct {
	*mock.Call
}

// UpdateLoginProfileWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.UpdateLoginProfileInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) UpdateLoginProfileWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_UpdateLoginProfileWithContext_Call {
	return &MockIAMAPI_UpdateLoginProfileWithContext_Call{Call: _e.mock.On("UpdateLoginProfileWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_UpdateLoginProfileWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.UpdateLoginProfileInput, _a2 ...request.Option)) *MockIAMAPI_UpdateLoginProfileWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.UpdateLoginProfileInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_UpdateLoginProfileWithContext_Call) Return(_a0 *iam.UpdateLoginProfileOutput, _a1 error) *MockIAMAPI_UpdateLoginProfileWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateLoginProfileWithContext_Call) RunAndReturn(run func(context.Context, *iam.UpdateLoginProfileInput, ...request.Option) (*iam.UpdateLoginProfileOutput, error)) *MockIAMAPI_UpdateLoginProfileWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOpenIDConnectProviderThumbprint provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UpdateOpenIDConnectProviderThumbprint(_a0 *iam.UpdateOpenIDConnectProviderThumbprintInput) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.UpdateOpenIDConnectProviderThumbprintOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.UpdateOpenIDConnectProviderThumbprintInput) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UpdateOpenIDConnectProviderThumbprintInput) *iam.UpdateOpenIDConnectProviderThumbprintOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateOpenIDConnectProviderThumbprintOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UpdateOpenIDConnectProviderThumbprintInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UpdateOpenIDConnectProviderThumbprint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOpenIDConnectProviderThumbprint'
type MockIAMAPI_UpdateOpenIDConnectProviderThumbprint_Call struct {
	*mock.Call
}

// UpdateOpenIDConnectProviderThumbprint is a helper method to define mock.On call
//   - _a0 *iam.UpdateOpenIDConnectProviderThumbprintInput
func (_e *MockIAMAPI_Expecter) UpdateOpenIDConnectProviderThumbprint(_a0 interface{}) *MockIAMAPI_UpdateOpenIDConnectProviderThumbprint_Call {
	return &MockIAMAPI_UpdateOpenIDConnectProviderThumbprint_Call{Call: _e.mock.On("UpdateOpenIDConnectProviderThumbprint", _a0)}
}

func (_c *MockIAMAPI_UpdateOpenIDConnectProviderThumbprint_Call) Run(run func(_a0 *iam.UpdateOpenIDConnectProviderThumbprintInput)) *MockIAMAPI_UpdateOpenIDConnectProviderThumbprint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UpdateOpenIDConnectProviderThumbprintInput))
	})
	return _c
}

func (_c *MockIAMAPI_UpdateOpenIDConnectProviderThumbprint_Call) Return(_a0 *iam.UpdateOpenIDConnectProviderThumbprintOutput, _a1 error) *MockIAMAPI_UpdateOpenIDConnectProviderThumbprint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateOpenIDConnectProviderThumbprint_Call) RunAndReturn(run func(*iam.UpdateOpenIDConnectProviderThumbprintInput) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error)) *MockIAMAPI_UpdateOpenIDConnectProviderThumbprint_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOpenIDConnectProviderThumbprintRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UpdateOpenIDConnectProviderThumbprintRequest(_a0 *iam.UpdateOpenIDConnectProviderThumbprintInput) (*request.Request, *iam.UpdateOpenIDConnectProviderThumbprintOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.UpdateOpenIDConnectProviderThumbprintOutput
	if rf, ok := ret.Get(0).(func(*iam.UpdateOpenIDConnectProviderThumbprintInput) (*request.Request, *iam.UpdateOpenIDConnectProviderThumbprintOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UpdateOpenIDConnectProviderThumbprintInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UpdateOpenIDConnectProviderThumbprintInput) *iam.UpdateOpenIDConnectProviderThumbprintOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.UpdateOpenIDConnectProviderThumbprintOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_UpdateOpenIDConnectProviderThumbprintRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOpenIDConnectProviderThumbprintRequest'
type MockIAMAPI_UpdateOpenIDConnectProviderThumbprintRequest_Call struct {
	*mock.Call
}

// UpdateOpenIDConnectProviderThumbprintRequest is a helper method to define mock.On call
//   - _a0 *iam.UpdateOpenIDConnectProviderThumbprintInput
func (_e *MockIAMAPI_Expecter) UpdateOpenIDConnectProviderThumbprintRequest(_a0 interface{}) *MockIAMAPI_UpdateOpenIDConnectProviderThumbprintRequest_Call {
	return &MockIAMAPI_UpdateOpenIDConnectProviderThumbprintRequest_Call{Call: _e.mock.On("UpdateOpenIDConnectProviderThumbprintRequest", _a0)}
}

func (_c *MockIAMAPI_UpdateOpenIDConnectProviderThumbprintRequest_Call) Run(run func(_a0 *iam.UpdateOpenIDConnectProviderThumbprintInput)) *MockIAMAPI_UpdateOpenIDConnectProviderThumbprintRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UpdateOpenIDConnectProviderThumbprintInput))
	})
	return _c
}

func (_c *MockIAMAPI_UpdateOpenIDConnectProviderThumbprintRequest_Call) Return(_a0 *request.Request, _a1 *iam.UpdateOpenIDConnectProviderThumbprintOutput) *MockIAMAPI_UpdateOpenIDConnectProviderThumbprintRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateOpenIDConnectProviderThumbprintRequest_Call) RunAndReturn(run func(*iam.UpdateOpenIDConnectProviderThumbprintInput) (*request.Request, *iam.UpdateOpenIDConnectProviderThumbprintOutput)) *MockIAMAPI_UpdateOpenIDConnectProviderThumbprintRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOpenIDConnectProviderThumbprintWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) UpdateOpenIDConnectProviderThumbprintWithContext(_a0 context.Context, _a1 *iam.UpdateOpenIDConnectProviderThumbprintInput, _a2 ...request.Option) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.UpdateOpenIDConnectProviderThumbprintOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UpdateOpenIDConnectProviderThumbprintInput, ...request.Option) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UpdateOpenIDConnectProviderThumbprintInput, ...request.Option) *iam.UpdateOpenIDConnectProviderThumbprintOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateOpenIDConnectProviderThumbprintOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.UpdateOpenIDConnectProviderThumbprintInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UpdateOpenIDConnectProviderThumbprintWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOpenIDConnectProviderThumbprintWithContext'
type MockIAMAPI_UpdateOpenIDConnectProviderThumbprintWithContext_Call struct {
	*mock.Call
}

// UpdateOpenIDConnectProviderThumbprintWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.UpdateOpenIDConnectProviderThumbprintInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) UpdateOpenIDConnectProviderThumbprintWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_UpdateOpenIDConnectProviderThumbprintWithContext_Call {
	return &MockIAMAPI_UpdateOpenIDConnectProviderThumbprintWithContext_Call{Call: _e.mock.On("UpdateOpenIDConnectProviderThumbprintWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_UpdateOpenIDConnectProviderThumbprintWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.UpdateOpenIDConnectProviderThumbprintInput, _a2 ...request.Option)) *MockIAMAPI_UpdateOpenIDConnectProviderThumbprintWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.UpdateOpenIDConnectProviderThumbprintInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_UpdateOpenIDConnectProviderThumbprintWithContext_Call) Return(_a0 *iam.UpdateOpenIDConnectProviderThumbprintOutput, _a1 error) *MockIAMAPI_UpdateOpenIDConnectProviderThumbprintWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateOpenIDConnectProviderThumbprintWithContext_Call) RunAndReturn(run func(context.Context, *iam.UpdateOpenIDConnectProviderThumbprintInput, ...request.Option) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error)) *MockIAMAPI_UpdateOpenIDConnectProviderThumbprintWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRole provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UpdateRole(_a0 *iam.UpdateRoleInput) (*iam.UpdateRoleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.UpdateRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.UpdateRoleInput) (*iam.UpdateRoleOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UpdateRoleInput) *iam.UpdateRoleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UpdateRoleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UpdateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRole'
type MockIAMAPI_UpdateRole_Call struct {
	*mock.Call
}

// UpdateRole is a helper method to define mock.On call
//   - _a0 *iam.UpdateRoleInput
func (_e *MockIAMAPI_Expecter) UpdateRole(_a0 interface{}) *MockIAMAPI_UpdateRole_Call {
	return &MockIAMAPI_UpdateRole_Call{Call: _e.mock.On("UpdateRole", _a0)}
}

func (_c *MockIAMAPI_UpdateRole_Call) Run(run func(_a0 *iam.UpdateRoleInput)) *MockIAMAPI_UpdateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UpdateRoleInput))
	})
	return _c
}

func (_c *MockIAMAPI_UpdateRole_Call) Return(_a0 *iam.UpdateRoleOutput, _a1 error) *MockIAMAPI_UpdateRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateRole_Call) RunAndReturn(run func(*iam.UpdateRoleInput) (*iam.UpdateRoleOutput, error)) *MockIAMAPI_UpdateRole_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRoleDescription provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UpdateRoleDescription(_a0 *iam.UpdateRoleDescriptionInput) (*iam.UpdateRoleDescriptionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.UpdateRoleDescriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.UpdateRoleDescriptionInput) (*iam.UpdateRoleDescriptionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UpdateRoleDescriptionInput) *iam.UpdateRoleDescriptionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateRoleDescriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UpdateRoleDescriptionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UpdateRoleDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRoleDescription'
type MockIAMAPI_UpdateRoleDescription_Call struct {
	*mock.Call
}

// UpdateRoleDescription is a helper method to define mock.On call
//   - _a0 *iam.UpdateRoleDescriptionInput
func (_e *MockIAMAPI_Expecter) UpdateRoleDescription(_a0 interface{}) *MockIAMAPI_UpdateRoleDescription_Call {
	return &MockIAMAPI_UpdateRoleDescription_Call{Call: _e.mock.On("UpdateRoleDescription", _a0)}
}

func (_c *MockIAMAPI_UpdateRoleDescription_Call) Run(run func(_a0 *iam.UpdateRoleDescriptionInput)) *MockIAMAPI_UpdateRoleDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UpdateRoleDescriptionInput))
	})
	return _c
}

func (_c *MockIAMAPI_UpdateRoleDescription_Call) Return(_a0 *iam.UpdateRoleDescriptionOutput, _a1 error) *MockIAMAPI_UpdateRoleDescription_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateRoleDescription_Call) RunAndReturn(run func(*iam.UpdateRoleDescriptionInput) (*iam.UpdateRoleDescriptionOutput, error)) *MockIAMAPI_UpdateRoleDescription_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRoleDescriptionRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UpdateRoleDescriptionRequest(_a0 *iam.UpdateRoleDescriptionInput) (*request.Request, *iam.UpdateRoleDescriptionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.UpdateRoleDescriptionOutput
	if rf, ok := ret.Get(0).(func(*iam.UpdateRoleDescriptionInput) (*request.Request, *iam.UpdateRoleDescriptionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UpdateRoleDescriptionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UpdateRoleDescriptionInput) *iam.UpdateRoleDescriptionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.UpdateRoleDescriptionOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_UpdateRoleDescriptionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRoleDescriptionRequest'
type MockIAMAPI_UpdateRoleDescriptionRequest_Call struct {
	*mock.Call
}

// UpdateRoleDescriptionRequest is a helper method to define mock.On call
//   - _a0 *iam.UpdateRoleDescriptionInput
func (_e *MockIAMAPI_Expecter) UpdateRoleDescriptionRequest(_a0 interface{}) *MockIAMAPI_UpdateRoleDescriptionRequest_Call {
	return &MockIAMAPI_UpdateRoleDescriptionRequest_Call{Call: _e.mock.On("UpdateRoleDescriptionRequest", _a0)}
}

func (_c *MockIAMAPI_UpdateRoleDescriptionRequest_Call) Run(run func(_a0 *iam.UpdateRoleDescriptionInput)) *MockIAMAPI_UpdateRoleDescriptionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UpdateRoleDescriptionInput))
	})
	return _c
}

func (_c *MockIAMAPI_UpdateRoleDescriptionRequest_Call) Return(_a0 *request.Request, _a1 *iam.UpdateRoleDescriptionOutput) *MockIAMAPI_UpdateRoleDescriptionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateRoleDescriptionRequest_Call) RunAndReturn(run func(*iam.UpdateRoleDescriptionInput) (*request.Request, *iam.UpdateRoleDescriptionOutput)) *MockIAMAPI_UpdateRoleDescriptionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRoleDescriptionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) UpdateRoleDescriptionWithContext(_a0 context.Context, _a1 *iam.UpdateRoleDescriptionInput, _a2 ...request.Option) (*iam.UpdateRoleDescriptionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.UpdateRoleDescriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UpdateRoleDescriptionInput, ...request.Option) (*iam.UpdateRoleDescriptionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UpdateRoleDescriptionInput, ...request.Option) *iam.UpdateRoleDescriptionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateRoleDescriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.UpdateRoleDescriptionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UpdateRoleDescriptionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRoleDescriptionWithContext'
type MockIAMAPI_UpdateRoleDescriptionWithContext_Call struct {
	*mock.Call
}

// UpdateRoleDescriptionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.UpdateRoleDescriptionInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) UpdateRoleDescriptionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_UpdateRoleDescriptionWithContext_Call {
	return &MockIAMAPI_UpdateRoleDescriptionWithContext_Call{Call: _e.mock.On("UpdateRoleDescriptionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_UpdateRoleDescriptionWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.UpdateRoleDescriptionInput, _a2 ...request.Option)) *MockIAMAPI_UpdateRoleDescriptionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.UpdateRoleDescriptionInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_UpdateRoleDescriptionWithContext_Call) Return(_a0 *iam.UpdateRoleDescriptionOutput, _a1 error) *MockIAMAPI_UpdateRoleDescriptionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateRoleDescriptionWithContext_Call) RunAndReturn(run func(context.Context, *iam.UpdateRoleDescriptionInput, ...request.Option) (*iam.UpdateRoleDescriptionOutput, error)) *MockIAMAPI_UpdateRoleDescriptionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRoleRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UpdateRoleRequest(_a0 *iam.UpdateRoleInput) (*request.Request, *iam.UpdateRoleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.UpdateRoleOutput
	if rf, ok := ret.Get(0).(func(*iam.UpdateRoleInput) (*request.Request, *iam.UpdateRoleOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UpdateRoleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UpdateRoleInput) *iam.UpdateRoleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.UpdateRoleOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_UpdateRoleRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRoleRequest'
type MockIAMAPI_UpdateRoleRequest_Call struct {
	*mock.Call
}

// UpdateRoleRequest is a helper method to define mock.On call
//   - _a0 *iam.UpdateRoleInput
func (_e *MockIAMAPI_Expecter) UpdateRoleRequest(_a0 interface{}) *MockIAMAPI_UpdateRoleRequest_Call {
	return &MockIAMAPI_UpdateRoleRequest_Call{Call: _e.mock.On("UpdateRoleRequest", _a0)}
}

func (_c *MockIAMAPI_UpdateRoleRequest_Call) Run(run func(_a0 *iam.UpdateRoleInput)) *MockIAMAPI_UpdateRoleRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UpdateRoleInput))
	})
	return _c
}

func (_c *MockIAMAPI_UpdateRoleRequest_Call) Return(_a0 *request.Request, _a1 *iam.UpdateRoleOutput) *MockIAMAPI_UpdateRoleRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateRoleRequest_Call) RunAndReturn(run func(*iam.UpdateRoleInput) (*request.Request, *iam.UpdateRoleOutput)) *MockIAMAPI_UpdateRoleRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRoleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) UpdateRoleWithContext(_a0 context.Context, _a1 *iam.UpdateRoleInput, _a2 ...request.Option) (*iam.UpdateRoleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.UpdateRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UpdateRoleInput, ...request.Option) (*iam.UpdateRoleOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UpdateRoleInput, ...request.Option) *iam.UpdateRoleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.UpdateRoleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UpdateRoleWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRoleWithContext'
type MockIAMAPI_UpdateRoleWithContext_Call struct {
	*mock.Call
}

// UpdateRoleWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.UpdateRoleInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) UpdateRoleWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_UpdateRoleWithContext_Call {
	return &MockIAMAPI_UpdateRoleWithContext_Call{Call: _e.mock.On("UpdateRoleWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_UpdateRoleWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.UpdateRoleInput, _a2 ...request.Option)) *MockIAMAPI_UpdateRoleWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.UpdateRoleInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_UpdateRoleWithContext_Call) Return(_a0 *iam.UpdateRoleOutput, _a1 error) *MockIAMAPI_UpdateRoleWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateRoleWithContext_Call) RunAndReturn(run func(context.Context, *iam.UpdateRoleInput, ...request.Option) (*iam.UpdateRoleOutput, error)) *MockIAMAPI_UpdateRoleWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSAMLProvider provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UpdateSAMLProvider(_a0 *iam.UpdateSAMLProviderInput) (*iam.UpdateSAMLProviderOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.UpdateSAMLProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.UpdateSAMLProviderInput) (*iam.UpdateSAMLProviderOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UpdateSAMLProviderInput) *iam.UpdateSAMLProviderOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateSAMLProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UpdateSAMLProviderInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UpdateSAMLProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSAMLProvider'
type MockIAMAPI_UpdateSAMLProvider_Call struct {
	*mock.Call
}

// UpdateSAMLProvider is a helper method to define mock.On call
//   - _a0 *iam.UpdateSAMLProviderInput
func (_e *MockIAMAPI_Expecter) UpdateSAMLProvider(_a0 interface{}) *MockIAMAPI_UpdateSAMLProvider_Call {
	return &MockIAMAPI_UpdateSAMLProvider_Call{Call: _e.mock.On("UpdateSAMLProvider", _a0)}
}

func (_c *MockIAMAPI_UpdateSAMLProvider_Call) Run(run func(_a0 *iam.UpdateSAMLProviderInput)) *MockIAMAPI_UpdateSAMLProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UpdateSAMLProviderInput))
	})
	return _c
}

func (_c *MockIAMAPI_UpdateSAMLProvider_Call) Return(_a0 *iam.UpdateSAMLProviderOutput, _a1 error) *MockIAMAPI_UpdateSAMLProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateSAMLProvider_Call) RunAndReturn(run func(*iam.UpdateSAMLProviderInput) (*iam.UpdateSAMLProviderOutput, error)) *MockIAMAPI_UpdateSAMLProvider_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSAMLProviderRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UpdateSAMLProviderRequest(_a0 *iam.UpdateSAMLProviderInput) (*request.Request, *iam.UpdateSAMLProviderOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.UpdateSAMLProviderOutput
	if rf, ok := ret.Get(0).(func(*iam.UpdateSAMLProviderInput) (*request.Request, *iam.UpdateSAMLProviderOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UpdateSAMLProviderInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UpdateSAMLProviderInput) *iam.UpdateSAMLProviderOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.UpdateSAMLProviderOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_UpdateSAMLProviderRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSAMLProviderRequest'
type MockIAMAPI_UpdateSAMLProviderRequest_Call struct {
	*mock.Call
}

// UpdateSAMLProviderRequest is a helper method to define mock.On call
//   - _a0 *iam.UpdateSAMLProviderInput
func (_e *MockIAMAPI_Expecter) UpdateSAMLProviderRequest(_a0 interface{}) *MockIAMAPI_UpdateSAMLProviderRequest_Call {
	return &MockIAMAPI_UpdateSAMLProviderRequest_Call{Call: _e.mock.On("UpdateSAMLProviderRequest", _a0)}
}

func (_c *MockIAMAPI_UpdateSAMLProviderRequest_Call) Run(run func(_a0 *iam.UpdateSAMLProviderInput)) *MockIAMAPI_UpdateSAMLProviderRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UpdateSAMLProviderInput))
	})
	return _c
}

func (_c *MockIAMAPI_UpdateSAMLProviderRequest_Call) Return(_a0 *request.Request, _a1 *iam.UpdateSAMLProviderOutput) *MockIAMAPI_UpdateSAMLProviderRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateSAMLProviderRequest_Call) RunAndReturn(run func(*iam.UpdateSAMLProviderInput) (*request.Request, *iam.UpdateSAMLProviderOutput)) *MockIAMAPI_UpdateSAMLProviderRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSAMLProviderWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) UpdateSAMLProviderWithContext(_a0 context.Context, _a1 *iam.UpdateSAMLProviderInput, _a2 ...request.Option) (*iam.UpdateSAMLProviderOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.UpdateSAMLProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UpdateSAMLProviderInput, ...request.Option) (*iam.UpdateSAMLProviderOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UpdateSAMLProviderInput, ...request.Option) *iam.UpdateSAMLProviderOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateSAMLProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.UpdateSAMLProviderInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UpdateSAMLProviderWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSAMLProviderWithContext'
type MockIAMAPI_UpdateSAMLProviderWithContext_Call struct {
	*mock.Call
}

// UpdateSAMLProviderWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.UpdateSAMLProviderInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) UpdateSAMLProviderWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_UpdateSAMLProviderWithContext_Call {
	return &MockIAMAPI_UpdateSAMLProviderWithContext_Call{Call: _e.mock.On("UpdateSAMLProviderWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_UpdateSAMLProviderWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.UpdateSAMLProviderInput, _a2 ...request.Option)) *MockIAMAPI_UpdateSAMLProviderWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.UpdateSAMLProviderInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_UpdateSAMLProviderWithContext_Call) Return(_a0 *iam.UpdateSAMLProviderOutput, _a1 error) *MockIAMAPI_UpdateSAMLProviderWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateSAMLProviderWithContext_Call) RunAndReturn(run func(context.Context, *iam.UpdateSAMLProviderInput, ...request.Option) (*iam.UpdateSAMLProviderOutput, error)) *MockIAMAPI_UpdateSAMLProviderWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSSHPublicKey provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UpdateSSHPublicKey(_a0 *iam.UpdateSSHPublicKeyInput) (*iam.UpdateSSHPublicKeyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.UpdateSSHPublicKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.UpdateSSHPublicKeyInput) (*iam.UpdateSSHPublicKeyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UpdateSSHPublicKeyInput) *iam.UpdateSSHPublicKeyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateSSHPublicKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UpdateSSHPublicKeyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UpdateSSHPublicKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSSHPublicKey'
type MockIAMAPI_UpdateSSHPublicKey_Call struct {
	*mock.Call
}

// UpdateSSHPublicKey is a helper method to define mock.On call
//   - _a0 *iam.UpdateSSHPublicKeyInput
func (_e *MockIAMAPI_Expecter) UpdateSSHPublicKey(_a0 interface{}) *MockIAMAPI_UpdateSSHPublicKey_Call {
	return &MockIAMAPI_UpdateSSHPublicKey_Call{Call: _e.mock.On("UpdateSSHPublicKey", _a0)}
}

func (_c *MockIAMAPI_UpdateSSHPublicKey_Call) Run(run func(_a0 *iam.UpdateSSHPublicKeyInput)) *MockIAMAPI_UpdateSSHPublicKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UpdateSSHPublicKeyInput))
	})
	return _c
}

func (_c *MockIAMAPI_UpdateSSHPublicKey_Call) Return(_a0 *iam.UpdateSSHPublicKeyOutput, _a1 error) *MockIAMAPI_UpdateSSHPublicKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateSSHPublicKey_Call) RunAndReturn(run func(*iam.UpdateSSHPublicKeyInput) (*iam.UpdateSSHPublicKeyOutput, error)) *MockIAMAPI_UpdateSSHPublicKey_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSSHPublicKeyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UpdateSSHPublicKeyRequest(_a0 *iam.UpdateSSHPublicKeyInput) (*request.Request, *iam.UpdateSSHPublicKeyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.UpdateSSHPublicKeyOutput
	if rf, ok := ret.Get(0).(func(*iam.UpdateSSHPublicKeyInput) (*request.Request, *iam.UpdateSSHPublicKeyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UpdateSSHPublicKeyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UpdateSSHPublicKeyInput) *iam.UpdateSSHPublicKeyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.UpdateSSHPublicKeyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_UpdateSSHPublicKeyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSSHPublicKeyRequest'
type MockIAMAPI_UpdateSSHPublicKeyRequest_Call struct {
	*mock.Call
}

// UpdateSSHPublicKeyRequest is a helper method to define mock.On call
//   - _a0 *iam.UpdateSSHPublicKeyInput
func (_e *MockIAMAPI_Expecter) UpdateSSHPublicKeyRequest(_a0 interface{}) *MockIAMAPI_UpdateSSHPublicKeyRequest_Call {
	return &MockIAMAPI_UpdateSSHPublicKeyRequest_Call{Call: _e.mock.On("UpdateSSHPublicKeyRequest", _a0)}
}

func (_c *MockIAMAPI_UpdateSSHPublicKeyRequest_Call) Run(run func(_a0 *iam.UpdateSSHPublicKeyInput)) *MockIAMAPI_UpdateSSHPublicKeyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UpdateSSHPublicKeyInput))
	})
	return _c
}

func (_c *MockIAMAPI_UpdateSSHPublicKeyRequest_Call) Return(_a0 *request.Request, _a1 *iam.UpdateSSHPublicKeyOutput) *MockIAMAPI_UpdateSSHPublicKeyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateSSHPublicKeyRequest_Call) RunAndReturn(run func(*iam.UpdateSSHPublicKeyInput) (*request.Request, *iam.UpdateSSHPublicKeyOutput)) *MockIAMAPI_UpdateSSHPublicKeyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSSHPublicKeyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) UpdateSSHPublicKeyWithContext(_a0 context.Context, _a1 *iam.UpdateSSHPublicKeyInput, _a2 ...request.Option) (*iam.UpdateSSHPublicKeyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.UpdateSSHPublicKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UpdateSSHPublicKeyInput, ...request.Option) (*iam.UpdateSSHPublicKeyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UpdateSSHPublicKeyInput, ...request.Option) *iam.UpdateSSHPublicKeyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateSSHPublicKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.UpdateSSHPublicKeyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UpdateSSHPublicKeyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSSHPublicKeyWithContext'
type MockIAMAPI_UpdateSSHPublicKeyWithContext_Call struct {
	*mock.Call
}

// UpdateSSHPublicKeyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.UpdateSSHPublicKeyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) UpdateSSHPublicKeyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_UpdateSSHPublicKeyWithContext_Call {
	return &MockIAMAPI_UpdateSSHPublicKeyWithContext_Call{Call: _e.mock.On("UpdateSSHPublicKeyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_UpdateSSHPublicKeyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.UpdateSSHPublicKeyInput, _a2 ...request.Option)) *MockIAMAPI_UpdateSSHPublicKeyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.UpdateSSHPublicKeyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_UpdateSSHPublicKeyWithContext_Call) Return(_a0 *iam.UpdateSSHPublicKeyOutput, _a1 error) *MockIAMAPI_UpdateSSHPublicKeyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateSSHPublicKeyWithContext_Call) RunAndReturn(run func(context.Context, *iam.UpdateSSHPublicKeyInput, ...request.Option) (*iam.UpdateSSHPublicKeyOutput, error)) *MockIAMAPI_UpdateSSHPublicKeyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateServerCertificate provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UpdateServerCertificate(_a0 *iam.UpdateServerCertificateInput) (*iam.UpdateServerCertificateOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.UpdateServerCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.UpdateServerCertificateInput) (*iam.UpdateServerCertificateOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UpdateServerCertificateInput) *iam.UpdateServerCertificateOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateServerCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UpdateServerCertificateInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UpdateServerCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServerCertificate'
type MockIAMAPI_UpdateServerCertificate_Call struct {
	*mock.Call
}

// UpdateServerCertificate is a helper method to define mock.On call
//   - _a0 *iam.UpdateServerCertificateInput
func (_e *MockIAMAPI_Expecter) UpdateServerCertificate(_a0 interface{}) *MockIAMAPI_UpdateServerCertificate_Call {
	return &MockIAMAPI_UpdateServerCertificate_Call{Call: _e.mock.On("UpdateServerCertificate", _a0)}
}

func (_c *MockIAMAPI_UpdateServerCertificate_Call) Run(run func(_a0 *iam.UpdateServerCertificateInput)) *MockIAMAPI_UpdateServerCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UpdateServerCertificateInput))
	})
	return _c
}

func (_c *MockIAMAPI_UpdateServerCertificate_Call) Return(_a0 *iam.UpdateServerCertificateOutput, _a1 error) *MockIAMAPI_UpdateServerCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateServerCertificate_Call) RunAndReturn(run func(*iam.UpdateServerCertificateInput) (*iam.UpdateServerCertificateOutput, error)) *MockIAMAPI_UpdateServerCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateServerCertificateRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UpdateServerCertificateRequest(_a0 *iam.UpdateServerCertificateInput) (*request.Request, *iam.UpdateServerCertificateOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.UpdateServerCertificateOutput
	if rf, ok := ret.Get(0).(func(*iam.UpdateServerCertificateInput) (*request.Request, *iam.UpdateServerCertificateOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UpdateServerCertificateInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UpdateServerCertificateInput) *iam.UpdateServerCertificateOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.UpdateServerCertificateOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_UpdateServerCertificateRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServerCertificateRequest'
type MockIAMAPI_UpdateServerCertificateRequest_Call struct {
	*mock.Call
}

// UpdateServerCertificateRequest is a helper method to define mock.On call
//   - _a0 *iam.UpdateServerCertificateInput
func (_e *MockIAMAPI_Expecter) UpdateServerCertificateRequest(_a0 interface{}) *MockIAMAPI_UpdateServerCertificateRequest_Call {
	return &MockIAMAPI_UpdateServerCertificateRequest_Call{Call: _e.mock.On("UpdateServerCertificateRequest", _a0)}
}

func (_c *MockIAMAPI_UpdateServerCertificateRequest_Call) Run(run func(_a0 *iam.UpdateServerCertificateInput)) *MockIAMAPI_UpdateServerCertificateRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UpdateServerCertificateInput))
	})
	return _c
}

func (_c *MockIAMAPI_UpdateServerCertificateRequest_Call) Return(_a0 *request.Request, _a1 *iam.UpdateServerCertificateOutput) *MockIAMAPI_UpdateServerCertificateRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateServerCertificateRequest_Call) RunAndReturn(run func(*iam.UpdateServerCertificateInput) (*request.Request, *iam.UpdateServerCertificateOutput)) *MockIAMAPI_UpdateServerCertificateRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateServerCertificateWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) UpdateServerCertificateWithContext(_a0 context.Context, _a1 *iam.UpdateServerCertificateInput, _a2 ...request.Option) (*iam.UpdateServerCertificateOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.UpdateServerCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UpdateServerCertificateInput, ...request.Option) (*iam.UpdateServerCertificateOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UpdateServerCertificateInput, ...request.Option) *iam.UpdateServerCertificateOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateServerCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.UpdateServerCertificateInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UpdateServerCertificateWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServerCertificateWithContext'
type MockIAMAPI_UpdateServerCertificateWithContext_Call struct {
	*mock.Call
}

// UpdateServerCertificateWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.UpdateServerCertificateInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) UpdateServerCertificateWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_UpdateServerCertificateWithContext_Call {
	return &MockIAMAPI_UpdateServerCertificateWithContext_Call{Call: _e.mock.On("UpdateServerCertificateWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_UpdateServerCertificateWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.UpdateServerCertificateInput, _a2 ...request.Option)) *MockIAMAPI_UpdateServerCertificateWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.UpdateServerCertificateInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_UpdateServerCertificateWithContext_Call) Return(_a0 *iam.UpdateServerCertificateOutput, _a1 error) *MockIAMAPI_UpdateServerCertificateWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateServerCertificateWithContext_Call) RunAndReturn(run func(context.Context, *iam.UpdateServerCertificateInput, ...request.Option) (*iam.UpdateServerCertificateOutput, error)) *MockIAMAPI_UpdateServerCertificateWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateServiceSpecificCredential provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UpdateServiceSpecificCredential(_a0 *iam.UpdateServiceSpecificCredentialInput) (*iam.UpdateServiceSpecificCredentialOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.UpdateServiceSpecificCredentialOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.UpdateServiceSpecificCredentialInput) (*iam.UpdateServiceSpecificCredentialOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UpdateServiceSpecificCredentialInput) *iam.UpdateServiceSpecificCredentialOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateServiceSpecificCredentialOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UpdateServiceSpecificCredentialInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UpdateServiceSpecificCredential_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServiceSpecificCredential'
type MockIAMAPI_UpdateServiceSpecificCredential_Call struct {
	*mock.Call
}

// UpdateServiceSpecificCredential is a helper method to define mock.On call
//   - _a0 *iam.UpdateServiceSpecificCredentialInput
func (_e *MockIAMAPI_Expecter) UpdateServiceSpecificCredential(_a0 interface{}) *MockIAMAPI_UpdateServiceSpecificCredential_Call {
	return &MockIAMAPI_UpdateServiceSpecificCredential_Call{Call: _e.mock.On("UpdateServiceSpecificCredential", _a0)}
}

func (_c *MockIAMAPI_UpdateServiceSpecificCredential_Call) Run(run func(_a0 *iam.UpdateServiceSpecificCredentialInput)) *MockIAMAPI_UpdateServiceSpecificCredential_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UpdateServiceSpecificCredentialInput))
	})
	return _c
}

func (_c *MockIAMAPI_UpdateServiceSpecificCredential_Call) Return(_a0 *iam.UpdateServiceSpecificCredentialOutput, _a1 error) *MockIAMAPI_UpdateServiceSpecificCredential_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateServiceSpecificCredential_Call) RunAndReturn(run func(*iam.UpdateServiceSpecificCredentialInput) (*iam.UpdateServiceSpecificCredentialOutput, error)) *MockIAMAPI_UpdateServiceSpecificCredential_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateServiceSpecificCredentialRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UpdateServiceSpecificCredentialRequest(_a0 *iam.UpdateServiceSpecificCredentialInput) (*request.Request, *iam.UpdateServiceSpecificCredentialOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.UpdateServiceSpecificCredentialOutput
	if rf, ok := ret.Get(0).(func(*iam.UpdateServiceSpecificCredentialInput) (*request.Request, *iam.UpdateServiceSpecificCredentialOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UpdateServiceSpecificCredentialInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UpdateServiceSpecificCredentialInput) *iam.UpdateServiceSpecificCredentialOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.UpdateServiceSpecificCredentialOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_UpdateServiceSpecificCredentialRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServiceSpecificCredentialRequest'
type MockIAMAPI_UpdateServiceSpecificCredentialRequest_Call struct {
	*mock.Call
}

// UpdateServiceSpecificCredentialRequest is a helper method to define mock.On call
//   - _a0 *iam.UpdateServiceSpecificCredentialInput
func (_e *MockIAMAPI_Expecter) UpdateServiceSpecificCredentialRequest(_a0 interface{}) *MockIAMAPI_UpdateServiceSpecificCredentialRequest_Call {
	return &MockIAMAPI_UpdateServiceSpecificCredentialRequest_Call{Call: _e.mock.On("UpdateServiceSpecificCredentialRequest", _a0)}
}

func (_c *MockIAMAPI_UpdateServiceSpecificCredentialRequest_Call) Run(run func(_a0 *iam.UpdateServiceSpecificCredentialInput)) *MockIAMAPI_UpdateServiceSpecificCredentialRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UpdateServiceSpecificCredentialInput))
	})
	return _c
}

func (_c *MockIAMAPI_UpdateServiceSpecificCredentialRequest_Call) Return(_a0 *request.Request, _a1 *iam.UpdateServiceSpecificCredentialOutput) *MockIAMAPI_UpdateServiceSpecificCredentialRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateServiceSpecificCredentialRequest_Call) RunAndReturn(run func(*iam.UpdateServiceSpecificCredentialInput) (*request.Request, *iam.UpdateServiceSpecificCredentialOutput)) *MockIAMAPI_UpdateServiceSpecificCredentialRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateServiceSpecificCredentialWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) UpdateServiceSpecificCredentialWithContext(_a0 context.Context, _a1 *iam.UpdateServiceSpecificCredentialInput, _a2 ...request.Option) (*iam.UpdateServiceSpecificCredentialOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.UpdateServiceSpecificCredentialOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UpdateServiceSpecificCredentialInput, ...request.Option) (*iam.UpdateServiceSpecificCredentialOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UpdateServiceSpecificCredentialInput, ...request.Option) *iam.UpdateServiceSpecificCredentialOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateServiceSpecificCredentialOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.UpdateServiceSpecificCredentialInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UpdateServiceSpecificCredentialWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServiceSpecificCredentialWithContext'
type MockIAMAPI_UpdateServiceSpecificCredentialWithContext_Call struct {
	*mock.Call
}

// UpdateServiceSpecificCredentialWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.UpdateServiceSpecificCredentialInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) UpdateServiceSpecificCredentialWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_UpdateServiceSpecificCredentialWithContext_Call {
	return &MockIAMAPI_UpdateServiceSpecificCredentialWithContext_Call{Call: _e.mock.On("UpdateServiceSpecificCredentialWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_UpdateServiceSpecificCredentialWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.UpdateServiceSpecificCredentialInput, _a2 ...request.Option)) *MockIAMAPI_UpdateServiceSpecificCredentialWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.UpdateServiceSpecificCredentialInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_UpdateServiceSpecificCredentialWithContext_Call) Return(_a0 *iam.UpdateServiceSpecificCredentialOutput, _a1 error) *MockIAMAPI_UpdateServiceSpecificCredentialWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateServiceSpecificCredentialWithContext_Call) RunAndReturn(run func(context.Context, *iam.UpdateServiceSpecificCredentialInput, ...request.Option) (*iam.UpdateServiceSpecificCredentialOutput, error)) *MockIAMAPI_UpdateServiceSpecificCredentialWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSigningCertificate provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UpdateSigningCertificate(_a0 *iam.UpdateSigningCertificateInput) (*iam.UpdateSigningCertificateOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.UpdateSigningCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.UpdateSigningCertificateInput) (*iam.UpdateSigningCertificateOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UpdateSigningCertificateInput) *iam.UpdateSigningCertificateOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateSigningCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UpdateSigningCertificateInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UpdateSigningCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSigningCertificate'
type MockIAMAPI_UpdateSigningCertificate_Call struct {
	*mock.Call
}

// UpdateSigningCertificate is a helper method to define mock.On call
//   - _a0 *iam.UpdateSigningCertificateInput
func (_e *MockIAMAPI_Expecter) UpdateSigningCertificate(_a0 interface{}) *MockIAMAPI_UpdateSigningCertificate_Call {
	return &MockIAMAPI_UpdateSigningCertificate_Call{Call: _e.mock.On("UpdateSigningCertificate", _a0)}
}

func (_c *MockIAMAPI_UpdateSigningCertificate_Call) Run(run func(_a0 *iam.UpdateSigningCertificateInput)) *MockIAMAPI_UpdateSigningCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UpdateSigningCertificateInput))
	})
	return _c
}

func (_c *MockIAMAPI_UpdateSigningCertificate_Call) Return(_a0 *iam.UpdateSigningCertificateOutput, _a1 error) *MockIAMAPI_UpdateSigningCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateSigningCertificate_Call) RunAndReturn(run func(*iam.UpdateSigningCertificateInput) (*iam.UpdateSigningCertificateOutput, error)) *MockIAMAPI_UpdateSigningCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSigningCertificateRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UpdateSigningCertificateRequest(_a0 *iam.UpdateSigningCertificateInput) (*request.Request, *iam.UpdateSigningCertificateOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.UpdateSigningCertificateOutput
	if rf, ok := ret.Get(0).(func(*iam.UpdateSigningCertificateInput) (*request.Request, *iam.UpdateSigningCertificateOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UpdateSigningCertificateInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UpdateSigningCertificateInput) *iam.UpdateSigningCertificateOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.UpdateSigningCertificateOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_UpdateSigningCertificateRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSigningCertificateRequest'
type MockIAMAPI_UpdateSigningCertificateRequest_Call struct {
	*mock.Call
}

// UpdateSigningCertificateRequest is a helper method to define mock.On call
//   - _a0 *iam.UpdateSigningCertificateInput
func (_e *MockIAMAPI_Expecter) UpdateSigningCertificateRequest(_a0 interface{}) *MockIAMAPI_UpdateSigningCertificateRequest_Call {
	return &MockIAMAPI_UpdateSigningCertificateRequest_Call{Call: _e.mock.On("UpdateSigningCertificateRequest", _a0)}
}

func (_c *MockIAMAPI_UpdateSigningCertificateRequest_Call) Run(run func(_a0 *iam.UpdateSigningCertificateInput)) *MockIAMAPI_UpdateSigningCertificateRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UpdateSigningCertificateInput))
	})
	return _c
}

func (_c *MockIAMAPI_UpdateSigningCertificateRequest_Call) Return(_a0 *request.Request, _a1 *iam.UpdateSigningCertificateOutput) *MockIAMAPI_UpdateSigningCertificateRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateSigningCertificateRequest_Call) RunAndReturn(run func(*iam.UpdateSigningCertificateInput) (*request.Request, *iam.UpdateSigningCertificateOutput)) *MockIAMAPI_UpdateSigningCertificateRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSigningCertificateWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) UpdateSigningCertificateWithContext(_a0 context.Context, _a1 *iam.UpdateSigningCertificateInput, _a2 ...request.Option) (*iam.UpdateSigningCertificateOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.UpdateSigningCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UpdateSigningCertificateInput, ...request.Option) (*iam.UpdateSigningCertificateOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UpdateSigningCertificateInput, ...request.Option) *iam.UpdateSigningCertificateOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateSigningCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.UpdateSigningCertificateInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UpdateSigningCertificateWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSigningCertificateWithContext'
type MockIAMAPI_UpdateSigningCertificateWithContext_Call struct {
	*mock.Call
}

// UpdateSigningCertificateWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.UpdateSigningCertificateInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) UpdateSigningCertificateWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_UpdateSigningCertificateWithContext_Call {
	return &MockIAMAPI_UpdateSigningCertificateWithContext_Call{Call: _e.mock.On("UpdateSigningCertificateWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_UpdateSigningCertificateWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.UpdateSigningCertificateInput, _a2 ...request.Option)) *MockIAMAPI_UpdateSigningCertificateWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.UpdateSigningCertificateInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_UpdateSigningCertificateWithContext_Call) Return(_a0 *iam.UpdateSigningCertificateOutput, _a1 error) *MockIAMAPI_UpdateSigningCertificateWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateSigningCertificateWithContext_Call) RunAndReturn(run func(context.Context, *iam.UpdateSigningCertificateInput, ...request.Option) (*iam.UpdateSigningCertificateOutput, error)) *MockIAMAPI_UpdateSigningCertificateWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UpdateUser(_a0 *iam.UpdateUserInput) (*iam.UpdateUserOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.UpdateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.UpdateUserInput) (*iam.UpdateUserOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UpdateUserInput) *iam.UpdateUserOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UpdateUserInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockIAMAPI_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - _a0 *iam.UpdateUserInput
func (_e *MockIAMAPI_Expecter) UpdateUser(_a0 interface{}) *MockIAMAPI_UpdateUser_Call {
	return &MockIAMAPI_UpdateUser_Call{Call: _e.mock.On("UpdateUser", _a0)}
}

func (_c *MockIAMAPI_UpdateUser_Call) Run(run func(_a0 *iam.UpdateUserInput)) *MockIAMAPI_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UpdateUserInput))
	})
	return _c
}

func (_c *MockIAMAPI_UpdateUser_Call) Return(_a0 *iam.UpdateUserOutput, _a1 error) *MockIAMAPI_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateUser_Call) RunAndReturn(run func(*iam.UpdateUserInput) (*iam.UpdateUserOutput, error)) *MockIAMAPI_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UpdateUserRequest(_a0 *iam.UpdateUserInput) (*request.Request, *iam.UpdateUserOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.UpdateUserOutput
	if rf, ok := ret.Get(0).(func(*iam.UpdateUserInput) (*request.Request, *iam.UpdateUserOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UpdateUserInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UpdateUserInput) *iam.UpdateUserOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.UpdateUserOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_UpdateUserRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserRequest'
type MockIAMAPI_UpdateUserRequest_Call struct {
	*mock.Call
}

// UpdateUserRequest is a helper method to define mock.On call
//   - _a0 *iam.UpdateUserInput
func (_e *MockIAMAPI_Expecter) UpdateUserRequest(_a0 interface{}) *MockIAMAPI_UpdateUserRequest_Call {
	return &MockIAMAPI_UpdateUserRequest_Call{Call: _e.mock.On("UpdateUserRequest", _a0)}
}

func (_c *MockIAMAPI_UpdateUserRequest_Call) Run(run func(_a0 *iam.UpdateUserInput)) *MockIAMAPI_UpdateUserRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UpdateUserInput))
	})
	return _c
}

func (_c *MockIAMAPI_UpdateUserRequest_Call) Return(_a0 *request.Request, _a1 *iam.UpdateUserOutput) *MockIAMAPI_UpdateUserRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateUserRequest_Call) RunAndReturn(run func(*iam.UpdateUserInput) (*request.Request, *iam.UpdateUserOutput)) *MockIAMAPI_UpdateUserRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) UpdateUserWithContext(_a0 context.Context, _a1 *iam.UpdateUserInput, _a2 ...request.Option) (*iam.UpdateUserOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.UpdateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UpdateUserInput, ...request.Option) (*iam.UpdateUserOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UpdateUserInput, ...request.Option) *iam.UpdateUserOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UpdateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.UpdateUserInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UpdateUserWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserWithContext'
type MockIAMAPI_UpdateUserWithContext_Call struct {
	*mock.Call
}

// UpdateUserWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.UpdateUserInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) UpdateUserWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_UpdateUserWithContext_Call {
	return &MockIAMAPI_UpdateUserWithContext_Call{Call: _e.mock.On("UpdateUserWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_UpdateUserWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.UpdateUserInput, _a2 ...request.Option)) *MockIAMAPI_UpdateUserWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.UpdateUserInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_UpdateUserWithContext_Call) Return(_a0 *iam.UpdateUserOutput, _a1 error) *MockIAMAPI_UpdateUserWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UpdateUserWithContext_Call) RunAndReturn(run func(context.Context, *iam.UpdateUserInput, ...request.Option) (*iam.UpdateUserOutput, error)) *MockIAMAPI_UpdateUserWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UploadSSHPublicKey provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UploadSSHPublicKey(_a0 *iam.UploadSSHPublicKeyInput) (*iam.UploadSSHPublicKeyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.UploadSSHPublicKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.UploadSSHPublicKeyInput) (*iam.UploadSSHPublicKeyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UploadSSHPublicKeyInput) *iam.UploadSSHPublicKeyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UploadSSHPublicKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UploadSSHPublicKeyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UploadSSHPublicKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadSSHPublicKey'
type MockIAMAPI_UploadSSHPublicKey_Call struct {
	*mock.Call
}

// UploadSSHPublicKey is a helper method to define mock.On call
//   - _a0 *iam.UploadSSHPublicKeyInput
func (_e *MockIAMAPI_Expecter) UploadSSHPublicKey(_a0 interface{}) *MockIAMAPI_UploadSSHPublicKey_Call {
	return &MockIAMAPI_UploadSSHPublicKey_Call{Call: _e.mock.On("UploadSSHPublicKey", _a0)}
}

func (_c *MockIAMAPI_UploadSSHPublicKey_Call) Run(run func(_a0 *iam.UploadSSHPublicKeyInput)) *MockIAMAPI_UploadSSHPublicKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UploadSSHPublicKeyInput))
	})
	return _c
}

func (_c *MockIAMAPI_UploadSSHPublicKey_Call) Return(_a0 *iam.UploadSSHPublicKeyOutput, _a1 error) *MockIAMAPI_UploadSSHPublicKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UploadSSHPublicKey_Call) RunAndReturn(run func(*iam.UploadSSHPublicKeyInput) (*iam.UploadSSHPublicKeyOutput, error)) *MockIAMAPI_UploadSSHPublicKey_Call {
	_c.Call.Return(run)
	return _c
}

// UploadSSHPublicKeyRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UploadSSHPublicKeyRequest(_a0 *iam.UploadSSHPublicKeyInput) (*request.Request, *iam.UploadSSHPublicKeyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.UploadSSHPublicKeyOutput
	if rf, ok := ret.Get(0).(func(*iam.UploadSSHPublicKeyInput) (*request.Request, *iam.UploadSSHPublicKeyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UploadSSHPublicKeyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UploadSSHPublicKeyInput) *iam.UploadSSHPublicKeyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.UploadSSHPublicKeyOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_UploadSSHPublicKeyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadSSHPublicKeyRequest'
type MockIAMAPI_UploadSSHPublicKeyRequest_Call struct {
	*mock.Call
}

// UploadSSHPublicKeyRequest is a helper method to define mock.On call
//   - _a0 *iam.UploadSSHPublicKeyInput
func (_e *MockIAMAPI_Expecter) UploadSSHPublicKeyRequest(_a0 interface{}) *MockIAMAPI_UploadSSHPublicKeyRequest_Call {
	return &MockIAMAPI_UploadSSHPublicKeyRequest_Call{Call: _e.mock.On("UploadSSHPublicKeyRequest", _a0)}
}

func (_c *MockIAMAPI_UploadSSHPublicKeyRequest_Call) Run(run func(_a0 *iam.UploadSSHPublicKeyInput)) *MockIAMAPI_UploadSSHPublicKeyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UploadSSHPublicKeyInput))
	})
	return _c
}

func (_c *MockIAMAPI_UploadSSHPublicKeyRequest_Call) Return(_a0 *request.Request, _a1 *iam.UploadSSHPublicKeyOutput) *MockIAMAPI_UploadSSHPublicKeyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UploadSSHPublicKeyRequest_Call) RunAndReturn(run func(*iam.UploadSSHPublicKeyInput) (*request.Request, *iam.UploadSSHPublicKeyOutput)) *MockIAMAPI_UploadSSHPublicKeyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UploadSSHPublicKeyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) UploadSSHPublicKeyWithContext(_a0 context.Context, _a1 *iam.UploadSSHPublicKeyInput, _a2 ...request.Option) (*iam.UploadSSHPublicKeyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.UploadSSHPublicKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UploadSSHPublicKeyInput, ...request.Option) (*iam.UploadSSHPublicKeyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UploadSSHPublicKeyInput, ...request.Option) *iam.UploadSSHPublicKeyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UploadSSHPublicKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.UploadSSHPublicKeyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UploadSSHPublicKeyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadSSHPublicKeyWithContext'
type MockIAMAPI_UploadSSHPublicKeyWithContext_Call struct {
	*mock.Call
}

// UploadSSHPublicKeyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.UploadSSHPublicKeyInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) UploadSSHPublicKeyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_UploadSSHPublicKeyWithContext_Call {
	return &MockIAMAPI_UploadSSHPublicKeyWithContext_Call{Call: _e.mock.On("UploadSSHPublicKeyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_UploadSSHPublicKeyWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.UploadSSHPublicKeyInput, _a2 ...request.Option)) *MockIAMAPI_UploadSSHPublicKeyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.UploadSSHPublicKeyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_UploadSSHPublicKeyWithContext_Call) Return(_a0 *iam.UploadSSHPublicKeyOutput, _a1 error) *MockIAMAPI_UploadSSHPublicKeyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UploadSSHPublicKeyWithContext_Call) RunAndReturn(run func(context.Context, *iam.UploadSSHPublicKeyInput, ...request.Option) (*iam.UploadSSHPublicKeyOutput, error)) *MockIAMAPI_UploadSSHPublicKeyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UploadServerCertificate provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UploadServerCertificate(_a0 *iam.UploadServerCertificateInput) (*iam.UploadServerCertificateOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.UploadServerCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.UploadServerCertificateInput) (*iam.UploadServerCertificateOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UploadServerCertificateInput) *iam.UploadServerCertificateOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UploadServerCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UploadServerCertificateInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UploadServerCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadServerCertificate'
type MockIAMAPI_UploadServerCertificate_Call struct {
	*mock.Call
}

// UploadServerCertificate is a helper method to define mock.On call
//   - _a0 *iam.UploadServerCertificateInput
func (_e *MockIAMAPI_Expecter) UploadServerCertificate(_a0 interface{}) *MockIAMAPI_UploadServerCertificate_Call {
	return &MockIAMAPI_UploadServerCertificate_Call{Call: _e.mock.On("UploadServerCertificate", _a0)}
}

func (_c *MockIAMAPI_UploadServerCertificate_Call) Run(run func(_a0 *iam.UploadServerCertificateInput)) *MockIAMAPI_UploadServerCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UploadServerCertificateInput))
	})
	return _c
}

func (_c *MockIAMAPI_UploadServerCertificate_Call) Return(_a0 *iam.UploadServerCertificateOutput, _a1 error) *MockIAMAPI_UploadServerCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UploadServerCertificate_Call) RunAndReturn(run func(*iam.UploadServerCertificateInput) (*iam.UploadServerCertificateOutput, error)) *MockIAMAPI_UploadServerCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// UploadServerCertificateRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UploadServerCertificateRequest(_a0 *iam.UploadServerCertificateInput) (*request.Request, *iam.UploadServerCertificateOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.UploadServerCertificateOutput
	if rf, ok := ret.Get(0).(func(*iam.UploadServerCertificateInput) (*request.Request, *iam.UploadServerCertificateOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UploadServerCertificateInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UploadServerCertificateInput) *iam.UploadServerCertificateOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.UploadServerCertificateOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_UploadServerCertificateRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadServerCertificateRequest'
type MockIAMAPI_UploadServerCertificateRequest_Call struct {
	*mock.Call
}

// UploadServerCertificateRequest is a helper method to define mock.On call
//   - _a0 *iam.UploadServerCertificateInput
func (_e *MockIAMAPI_Expecter) UploadServerCertificateRequest(_a0 interface{}) *MockIAMAPI_UploadServerCertificateRequest_Call {
	return &MockIAMAPI_UploadServerCertificateRequest_Call{Call: _e.mock.On("UploadServerCertificateRequest", _a0)}
}

func (_c *MockIAMAPI_UploadServerCertificateRequest_Call) Run(run func(_a0 *iam.UploadServerCertificateInput)) *MockIAMAPI_UploadServerCertificateRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UploadServerCertificateInput))
	})
	return _c
}

func (_c *MockIAMAPI_UploadServerCertificateRequest_Call) Return(_a0 *request.Request, _a1 *iam.UploadServerCertificateOutput) *MockIAMAPI_UploadServerCertificateRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UploadServerCertificateRequest_Call) RunAndReturn(run func(*iam.UploadServerCertificateInput) (*request.Request, *iam.UploadServerCertificateOutput)) *MockIAMAPI_UploadServerCertificateRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UploadServerCertificateWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) UploadServerCertificateWithContext(_a0 context.Context, _a1 *iam.UploadServerCertificateInput, _a2 ...request.Option) (*iam.UploadServerCertificateOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.UploadServerCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UploadServerCertificateInput, ...request.Option) (*iam.UploadServerCertificateOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UploadServerCertificateInput, ...request.Option) *iam.UploadServerCertificateOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UploadServerCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.UploadServerCertificateInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UploadServerCertificateWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadServerCertificateWithContext'
type MockIAMAPI_UploadServerCertificateWithContext_Call struct {
	*mock.Call
}

// UploadServerCertificateWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.UploadServerCertificateInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) UploadServerCertificateWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_UploadServerCertificateWithContext_Call {
	return &MockIAMAPI_UploadServerCertificateWithContext_Call{Call: _e.mock.On("UploadServerCertificateWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_UploadServerCertificateWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.UploadServerCertificateInput, _a2 ...request.Option)) *MockIAMAPI_UploadServerCertificateWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.UploadServerCertificateInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_UploadServerCertificateWithContext_Call) Return(_a0 *iam.UploadServerCertificateOutput, _a1 error) *MockIAMAPI_UploadServerCertificateWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UploadServerCertificateWithContext_Call) RunAndReturn(run func(context.Context, *iam.UploadServerCertificateInput, ...request.Option) (*iam.UploadServerCertificateOutput, error)) *MockIAMAPI_UploadServerCertificateWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UploadSigningCertificate provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UploadSigningCertificate(_a0 *iam.UploadSigningCertificateInput) (*iam.UploadSigningCertificateOutput, error) {
	ret := _m.Called(_a0)

	var r0 *iam.UploadSigningCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam.UploadSigningCertificateInput) (*iam.UploadSigningCertificateOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UploadSigningCertificateInput) *iam.UploadSigningCertificateOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UploadSigningCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UploadSigningCertificateInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UploadSigningCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadSigningCertificate'
type MockIAMAPI_UploadSigningCertificate_Call struct {
	*mock.Call
}

// UploadSigningCertificate is a helper method to define mock.On call
//   - _a0 *iam.UploadSigningCertificateInput
func (_e *MockIAMAPI_Expecter) UploadSigningCertificate(_a0 interface{}) *MockIAMAPI_UploadSigningCertificate_Call {
	return &MockIAMAPI_UploadSigningCertificate_Call{Call: _e.mock.On("UploadSigningCertificate", _a0)}
}

func (_c *MockIAMAPI_UploadSigningCertificate_Call) Run(run func(_a0 *iam.UploadSigningCertificateInput)) *MockIAMAPI_UploadSigningCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UploadSigningCertificateInput))
	})
	return _c
}

func (_c *MockIAMAPI_UploadSigningCertificate_Call) Return(_a0 *iam.UploadSigningCertificateOutput, _a1 error) *MockIAMAPI_UploadSigningCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UploadSigningCertificate_Call) RunAndReturn(run func(*iam.UploadSigningCertificateInput) (*iam.UploadSigningCertificateOutput, error)) *MockIAMAPI_UploadSigningCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// UploadSigningCertificateRequest provides a mock function with given fields: _a0
func (_m *MockIAMAPI) UploadSigningCertificateRequest(_a0 *iam.UploadSigningCertificateInput) (*request.Request, *iam.UploadSigningCertificateOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *iam.UploadSigningCertificateOutput
	if rf, ok := ret.Get(0).(func(*iam.UploadSigningCertificateInput) (*request.Request, *iam.UploadSigningCertificateOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*iam.UploadSigningCertificateInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam.UploadSigningCertificateInput) *iam.UploadSigningCertificateOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*iam.UploadSigningCertificateOutput)
		}
	}

	return r0, r1
}

// MockIAMAPI_UploadSigningCertificateRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadSigningCertificateRequest'
type MockIAMAPI_UploadSigningCertificateRequest_Call struct {
	*mock.Call
}

// UploadSigningCertificateRequest is a helper method to define mock.On call
//   - _a0 *iam.UploadSigningCertificateInput
func (_e *MockIAMAPI_Expecter) UploadSigningCertificateRequest(_a0 interface{}) *MockIAMAPI_UploadSigningCertificateRequest_Call {
	return &MockIAMAPI_UploadSigningCertificateRequest_Call{Call: _e.mock.On("UploadSigningCertificateRequest", _a0)}
}

func (_c *MockIAMAPI_UploadSigningCertificateRequest_Call) Run(run func(_a0 *iam.UploadSigningCertificateInput)) *MockIAMAPI_UploadSigningCertificateRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.UploadSigningCertificateInput))
	})
	return _c
}

func (_c *MockIAMAPI_UploadSigningCertificateRequest_Call) Return(_a0 *request.Request, _a1 *iam.UploadSigningCertificateOutput) *MockIAMAPI_UploadSigningCertificateRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UploadSigningCertificateRequest_Call) RunAndReturn(run func(*iam.UploadSigningCertificateInput) (*request.Request, *iam.UploadSigningCertificateOutput)) *MockIAMAPI_UploadSigningCertificateRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UploadSigningCertificateWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) UploadSigningCertificateWithContext(_a0 context.Context, _a1 *iam.UploadSigningCertificateInput, _a2 ...request.Option) (*iam.UploadSigningCertificateOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *iam.UploadSigningCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UploadSigningCertificateInput, ...request.Option) (*iam.UploadSigningCertificateOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iam.UploadSigningCertificateInput, ...request.Option) *iam.UploadSigningCertificateOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.UploadSigningCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iam.UploadSigningCertificateInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMAPI_UploadSigningCertificateWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadSigningCertificateWithContext'
type MockIAMAPI_UploadSigningCertificateWithContext_Call struct {
	*mock.Call
}

// UploadSigningCertificateWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.UploadSigningCertificateInput
//   - _a2 ...request.Option
func (_e *MockIAMAPI_Expecter) UploadSigningCertificateWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_UploadSigningCertificateWithContext_Call {
	return &MockIAMAPI_UploadSigningCertificateWithContext_Call{Call: _e.mock.On("UploadSigningCertificateWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_UploadSigningCertificateWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.UploadSigningCertificateInput, _a2 ...request.Option)) *MockIAMAPI_UploadSigningCertificateWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.UploadSigningCertificateInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_UploadSigningCertificateWithContext_Call) Return(_a0 *iam.UploadSigningCertificateOutput, _a1 error) *MockIAMAPI_UploadSigningCertificateWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMAPI_UploadSigningCertificateWithContext_Call) RunAndReturn(run func(context.Context, *iam.UploadSigningCertificateInput, ...request.Option) (*iam.UploadSigningCertificateOutput, error)) *MockIAMAPI_UploadSigningCertificateWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilInstanceProfileExists provides a mock function with given fields: _a0
func (_m *MockIAMAPI) WaitUntilInstanceProfileExists(_a0 *iam.GetInstanceProfileInput) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.GetInstanceProfileInput) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_WaitUntilInstanceProfileExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilInstanceProfileExists'
type MockIAMAPI_WaitUntilInstanceProfileExists_Call struct {
	*mock.Call
}

// WaitUntilInstanceProfileExists is a helper method to define mock.On call
//   - _a0 *iam.GetInstanceProfileInput
func (_e *MockIAMAPI_Expecter) WaitUntilInstanceProfileExists(_a0 interface{}) *MockIAMAPI_WaitUntilInstanceProfileExists_Call {
	return &MockIAMAPI_WaitUntilInstanceProfileExists_Call{Call: _e.mock.On("WaitUntilInstanceProfileExists", _a0)}
}

func (_c *MockIAMAPI_WaitUntilInstanceProfileExists_Call) Run(run func(_a0 *iam.GetInstanceProfileInput)) *MockIAMAPI_WaitUntilInstanceProfileExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetInstanceProfileInput))
	})
	return _c
}

func (_c *MockIAMAPI_WaitUntilInstanceProfileExists_Call) Return(_a0 error) *MockIAMAPI_WaitUntilInstanceProfileExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_WaitUntilInstanceProfileExists_Call) RunAndReturn(run func(*iam.GetInstanceProfileInput) error) *MockIAMAPI_WaitUntilInstanceProfileExists_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilInstanceProfileExistsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) WaitUntilInstanceProfileExistsWithContext(_a0 context.Context, _a1 *iam.GetInstanceProfileInput, _a2 ...request.WaiterOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetInstanceProfileInput, ...request.WaiterOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_WaitUntilInstanceProfileExistsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilInstanceProfileExistsWithContext'
type MockIAMAPI_WaitUntilInstanceProfileExistsWithContext_Call struct {
	*mock.Call
}

// WaitUntilInstanceProfileExistsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetInstanceProfileInput
//   - _a2 ...request.WaiterOption
func (_e *MockIAMAPI_Expecter) WaitUntilInstanceProfileExistsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_WaitUntilInstanceProfileExistsWithContext_Call {
	return &MockIAMAPI_WaitUntilInstanceProfileExistsWithContext_Call{Call: _e.mock.On("WaitUntilInstanceProfileExistsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_WaitUntilInstanceProfileExistsWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetInstanceProfileInput, _a2 ...request.WaiterOption)) *MockIAMAPI_WaitUntilInstanceProfileExistsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.WaiterOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.WaiterOption)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetInstanceProfileInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_WaitUntilInstanceProfileExistsWithContext_Call) Return(_a0 error) *MockIAMAPI_WaitUntilInstanceProfileExistsWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_WaitUntilInstanceProfileExistsWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetInstanceProfileInput, ...request.WaiterOption) error) *MockIAMAPI_WaitUntilInstanceProfileExistsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilPolicyExists provides a mock function with given fields: _a0
func (_m *MockIAMAPI) WaitUntilPolicyExists(_a0 *iam.GetPolicyInput) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.GetPolicyInput) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_WaitUntilPolicyExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilPolicyExists'
type MockIAMAPI_WaitUntilPolicyExists_Call struct {
	*mock.Call
}

// WaitUntilPolicyExists is a helper method to define mock.On call
//   - _a0 *iam.GetPolicyInput
func (_e *MockIAMAPI_Expecter) WaitUntilPolicyExists(_a0 interface{}) *MockIAMAPI_WaitUntilPolicyExists_Call {
	return &MockIAMAPI_WaitUntilPolicyExists_Call{Call: _e.mock.On("WaitUntilPolicyExists", _a0)}
}

func (_c *MockIAMAPI_WaitUntilPolicyExists_Call) Run(run func(_a0 *iam.GetPolicyInput)) *MockIAMAPI_WaitUntilPolicyExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetPolicyInput))
	})
	return _c
}

func (_c *MockIAMAPI_WaitUntilPolicyExists_Call) Return(_a0 error) *MockIAMAPI_WaitUntilPolicyExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_WaitUntilPolicyExists_Call) RunAndReturn(run func(*iam.GetPolicyInput) error) *MockIAMAPI_WaitUntilPolicyExists_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilPolicyExistsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) WaitUntilPolicyExistsWithContext(_a0 context.Context, _a1 *iam.GetPolicyInput, _a2 ...request.WaiterOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetPolicyInput, ...request.WaiterOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_WaitUntilPolicyExistsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilPolicyExistsWithContext'
type MockIAMAPI_WaitUntilPolicyExistsWithContext_Call struct {
	*mock.Call
}

// WaitUntilPolicyExistsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetPolicyInput
//   - _a2 ...request.WaiterOption
func (_e *MockIAMAPI_Expecter) WaitUntilPolicyExistsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_WaitUntilPolicyExistsWithContext_Call {
	return &MockIAMAPI_WaitUntilPolicyExistsWithContext_Call{Call: _e.mock.On("WaitUntilPolicyExistsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_WaitUntilPolicyExistsWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetPolicyInput, _a2 ...request.WaiterOption)) *MockIAMAPI_WaitUntilPolicyExistsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.WaiterOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.WaiterOption)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_WaitUntilPolicyExistsWithContext_Call) Return(_a0 error) *MockIAMAPI_WaitUntilPolicyExistsWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_WaitUntilPolicyExistsWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetPolicyInput, ...request.WaiterOption) error) *MockIAMAPI_WaitUntilPolicyExistsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilRoleExists provides a mock function with given fields: _a0
func (_m *MockIAMAPI) WaitUntilRoleExists(_a0 *iam.GetRoleInput) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.GetRoleInput) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_WaitUntilRoleExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilRoleExists'
type MockIAMAPI_WaitUntilRoleExists_Call struct {
	*mock.Call
}

// WaitUntilRoleExists is a helper method to define mock.On call
//   - _a0 *iam.GetRoleInput
func (_e *MockIAMAPI_Expecter) WaitUntilRoleExists(_a0 interface{}) *MockIAMAPI_WaitUntilRoleExists_Call {
	return &MockIAMAPI_WaitUntilRoleExists_Call{Call: _e.mock.On("WaitUntilRoleExists", _a0)}
}

func (_c *MockIAMAPI_WaitUntilRoleExists_Call) Run(run func(_a0 *iam.GetRoleInput)) *MockIAMAPI_WaitUntilRoleExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetRoleInput))
	})
	return _c
}

func (_c *MockIAMAPI_WaitUntilRoleExists_Call) Return(_a0 error) *MockIAMAPI_WaitUntilRoleExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_WaitUntilRoleExists_Call) RunAndReturn(run func(*iam.GetRoleInput) error) *MockIAMAPI_WaitUntilRoleExists_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilRoleExistsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) WaitUntilRoleExistsWithContext(_a0 context.Context, _a1 *iam.GetRoleInput, _a2 ...request.WaiterOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetRoleInput, ...request.WaiterOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_WaitUntilRoleExistsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilRoleExistsWithContext'
type MockIAMAPI_WaitUntilRoleExistsWithContext_Call struct {
	*mock.Call
}

// WaitUntilRoleExistsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetRoleInput
//   - _a2 ...request.WaiterOption
func (_e *MockIAMAPI_Expecter) WaitUntilRoleExistsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_WaitUntilRoleExistsWithContext_Call {
	return &MockIAMAPI_WaitUntilRoleExistsWithContext_Call{Call: _e.mock.On("WaitUntilRoleExistsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_WaitUntilRoleExistsWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetRoleInput, _a2 ...request.WaiterOption)) *MockIAMAPI_WaitUntilRoleExistsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.WaiterOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.WaiterOption)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetRoleInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_WaitUntilRoleExistsWithContext_Call) Return(_a0 error) *MockIAMAPI_WaitUntilRoleExistsWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_WaitUntilRoleExistsWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetRoleInput, ...request.WaiterOption) error) *MockIAMAPI_WaitUntilRoleExistsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilUserExists provides a mock function with given fields: _a0
func (_m *MockIAMAPI) WaitUntilUserExists(_a0 *iam.GetUserInput) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*iam.GetUserInput) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_WaitUntilUserExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilUserExists'
type MockIAMAPI_WaitUntilUserExists_Call struct {
	*mock.Call
}

// WaitUntilUserExists is a helper method to define mock.On call
//   - _a0 *iam.GetUserInput
func (_e *MockIAMAPI_Expecter) WaitUntilUserExists(_a0 interface{}) *MockIAMAPI_WaitUntilUserExists_Call {
	return &MockIAMAPI_WaitUntilUserExists_Call{Call: _e.mock.On("WaitUntilUserExists", _a0)}
}

func (_c *MockIAMAPI_WaitUntilUserExists_Call) Run(run func(_a0 *iam.GetUserInput)) *MockIAMAPI_WaitUntilUserExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*iam.GetUserInput))
	})
	return _c
}

func (_c *MockIAMAPI_WaitUntilUserExists_Call) Return(_a0 error) *MockIAMAPI_WaitUntilUserExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_WaitUntilUserExists_Call) RunAndReturn(run func(*iam.GetUserInput) error) *MockIAMAPI_WaitUntilUserExists_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilUserExistsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIAMAPI) WaitUntilUserExistsWithContext(_a0 context.Context, _a1 *iam.GetUserInput, _a2 ...request.WaiterOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *iam.GetUserInput, ...request.WaiterOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMAPI_WaitUntilUserExistsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilUserExistsWithContext'
type MockIAMAPI_WaitUntilUserExistsWithContext_Call struct {
	*mock.Call
}

// WaitUntilUserExistsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *iam.GetUserInput
//   - _a2 ...request.WaiterOption
func (_e *MockIAMAPI_Expecter) WaitUntilUserExistsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockIAMAPI_WaitUntilUserExistsWithContext_Call {
	return &MockIAMAPI_WaitUntilUserExistsWithContext_Call{Call: _e.mock.On("WaitUntilUserExistsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockIAMAPI_WaitUntilUserExistsWithContext_Call) Run(run func(_a0 context.Context, _a1 *iam.GetUserInput, _a2 ...request.WaiterOption)) *MockIAMAPI_WaitUntilUserExistsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.WaiterOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.WaiterOption)
			}
		}
		run(args[0].(context.Context), args[1].(*iam.GetUserInput), variadicArgs...)
	})
	return _c
}

func (_c *MockIAMAPI_WaitUntilUserExistsWithContext_Call) Return(_a0 error) *MockIAMAPI_WaitUntilUserExistsWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMAPI_WaitUntilUserExistsWithContext_Call) RunAndReturn(run func(context.Context, *iam.GetUserInput, ...request.WaiterOption) error) *MockIAMAPI_WaitUntilUserExistsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIAMAPI creates a new instance of MockIAMAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAMAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAMAPI {
	mock := &MockIAMAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
